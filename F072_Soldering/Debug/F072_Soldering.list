
F072_Soldering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d9c  08005d9c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da4  08005da4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000020  08005dcc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005dcc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a593  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e8  00000000  00000000  0002a5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcd2  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d25c  00000000  00000000  00049c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a726  00000000  00000000  00056eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000f1664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a0c 	.word	0x08005a0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08005a0c 	.word	0x08005a0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	619a      	str	r2, [r3, #24]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}

08000638 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <EEPROM_SPI_INIT>:
/**
 * @brief Init EEPROM SPI
 *
 * @param hspi Pointer to SPI struct handler
 */
void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	EEPROM_SPI = hspi;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <EEPROM_SPI_INIT+0x18>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	2000003c 	.word	0x2000003c

0800066c <EEPROM_SPI_WritePage>:

EepromOperations EEPROM_SPI_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	0008      	movs	r0, r1
 8000676:	0011      	movs	r1, r2
 8000678:	1cbb      	adds	r3, r7, #2
 800067a:	1c02      	adds	r2, r0, #0
 800067c:	801a      	strh	r2, [r3, #0]
 800067e:	003b      	movs	r3, r7
 8000680:	1c0a      	adds	r2, r1, #0
 8000682:	801a      	strh	r2, [r3, #0]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8000684:	e002      	b.n	800068c <EEPROM_SPI_WritePage+0x20>
		LL_mDelay( 2 );
 8000686:	2002      	movs	r0, #2
 8000688:	f005 f964 	bl	8005954 <LL_mDelay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <EEPROM_SPI_WritePage+0x100>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	225d      	movs	r2, #93	; 0x5d
 8000692:	5c9b      	ldrb	r3, [r3, r2]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b01      	cmp	r3, #1
 8000698:	d1f5      	bne.n	8000686 <EEPROM_SPI_WritePage+0x1a>
	}
	HAL_StatusTypeDef spiTransmitStatus;

	sEE_WriteEnable();
 800069a:	f000 faa9 	bl	8000bf0 <sEE_WriteEnable>

	uint8_t header[3];
	header[0] = EEPROM_WRITE;
 800069e:	2408      	movs	r4, #8
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
	header[1] = WriteAddr >> 8;
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	705a      	strb	r2, [r3, #1]
	header[2] = WriteAddr;
 80006b4:	1cbb      	adds	r3, r7, #2
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	709a      	strb	r2, [r3, #2]

	EEPROM_W_HIGH();
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	01db      	lsls	r3, r3, #7
 80006c2:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <EEPROM_SPI_WritePage+0x104>)
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f7ff ffaa 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_H_HIGH();
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	019b      	lsls	r3, r3, #6
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <EEPROM_SPI_WritePage+0x104>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f7ff ffa3 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_CS_LOW();
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	015b      	lsls	r3, r3, #5
 80006de:	4a24      	ldr	r2, [pc, #144]	; (8000770 <EEPROM_SPI_WritePage+0x104>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f7ff ffa8 	bl	8000638 <LL_GPIO_ResetOutputPin>

	EEPROM_SPI_SendInstruction((uint8_t*)header, 3);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2103      	movs	r1, #3
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fadf 	bl	8000cb0 <EEPROM_SPI_SendInstruction>

	for (uint8_t i = 0; i < 5; i++) {
 80006f2:	230e      	movs	r3, #14
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e018      	b.n	800072e <EEPROM_SPI_WritePage+0xc2>
		spiTransmitStatus = HAL_SPI_Transmit(EEPROM_SPI, pBuffer, NumByteToWrite, 100);
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <EEPROM_SPI_WritePage+0x100>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	250f      	movs	r5, #15
 8000702:	197c      	adds	r4, r7, r5
 8000704:	003b      	movs	r3, r7
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	f003 fc9e 	bl	800404c <HAL_SPI_Transmit>
 8000710:	0003      	movs	r3, r0
 8000712:	7023      	strb	r3, [r4, #0]
		if (spiTransmitStatus == HAL_BUSY) {
 8000714:	197b      	adds	r3, r7, r5
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d10e      	bne.n	800073a <EEPROM_SPI_WritePage+0xce>
			LL_mDelay( 10 );
 800071c:	200a      	movs	r0, #10
 800071e:	f005 f919 	bl	8005954 <LL_mDelay>
	for (uint8_t i = 0; i < 5; i++) {
 8000722:	210e      	movs	r1, #14
 8000724:	187b      	adds	r3, r7, r1
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	187b      	adds	r3, r7, r1
 800072a:	3201      	adds	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	230e      	movs	r3, #14
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d9e1      	bls.n	80006fc <EEPROM_SPI_WritePage+0x90>
 8000738:	e000      	b.n	800073c <EEPROM_SPI_WritePage+0xd0>
		} else {
			break;
 800073a:	46c0      	nop			; (mov r8, r8)
		}
	}

	EEPROM_CS_HIGH();
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	015b      	lsls	r3, r3, #5
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <EEPROM_SPI_WritePage+0x104>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f7ff ff6b 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_SPI_WaitStandbyState();
 800074a:	f000 fa01 	bl	8000b50 <EEPROM_SPI_WaitStandbyState>
	sEE_WriteDisable();
 800074e:	f000 fa7f 	bl	8000c50 <sEE_WriteDisable>

	if (spiTransmitStatus == HAL_ERROR) {
 8000752:	230f      	movs	r3, #15
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d101      	bne.n	8000760 <EEPROM_SPI_WritePage+0xf4>
		return EEPROM_STATUS_ERROR;
 800075c:	2302      	movs	r3, #2
 800075e:	e000      	b.n	8000762 <EEPROM_SPI_WritePage+0xf6>
	} else {
		return EEPROM_STATUS_COMPLETE;
 8000760:	2301      	movs	r3, #1
	}
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b004      	add	sp, #16
 8000768:	bdb0      	pop	{r4, r5, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	2000003c 	.word	0x2000003c
 8000770:	48000400 	.word	0x48000400

08000774 <EEPROM_SPI_WriteBuffer>:

EepromOperations EEPROM_SPI_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	0008      	movs	r0, r1
 800077e:	0011      	movs	r1, r2
 8000780:	1cbb      	adds	r3, r7, #2
 8000782:	1c02      	adds	r2, r0, #0
 8000784:	801a      	strh	r2, [r3, #0]
 8000786:	003b      	movs	r3, r7
 8000788:	1c0a      	adds	r2, r1, #0
 800078a:	801a      	strh	r2, [r3, #0]
	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800078c:	2516      	movs	r5, #22
 800078e:	197b      	adds	r3, r7, r5
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
 8000794:	2312      	movs	r3, #18
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	2200      	movs	r2, #0
 800079a:	801a      	strh	r2, [r3, #0]
 800079c:	2010      	movs	r0, #16
 800079e:	183b      	adds	r3, r7, r0
 80007a0:	2200      	movs	r2, #0
 80007a2:	801a      	strh	r2, [r3, #0]
 80007a4:	220e      	movs	r2, #14
 80007a6:	18bb      	adds	r3, r7, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	801a      	strh	r2, [r3, #0]
 80007ac:	210c      	movs	r1, #12
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
	uint16_t sEE_DataNum = 0;
 80007b4:	260a      	movs	r6, #10
 80007b6:	19bb      	adds	r3, r7, r6
 80007b8:	2200      	movs	r2, #0
 80007ba:	801a      	strh	r2, [r3, #0]

	EepromOperations pageWriteStatus = EEPROM_STATUS_PENDING;
 80007bc:	2415      	movs	r4, #21
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

	Addr = WriteAddr % EEPROM_PAGESIZE;
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	1cba      	adds	r2, r7, #2
 80007c8:	8812      	ldrh	r2, [r2, #0]
 80007ca:	211f      	movs	r1, #31
 80007cc:	400a      	ands	r2, r1
 80007ce:	801a      	strh	r2, [r3, #0]
	count = EEPROM_PAGESIZE - Addr;
 80007d0:	220e      	movs	r2, #14
 80007d2:	18bb      	adds	r3, r7, r2
 80007d4:	183a      	adds	r2, r7, r0
 80007d6:	8812      	ldrh	r2, [r2, #0]
 80007d8:	2120      	movs	r1, #32
 80007da:	1a8a      	subs	r2, r1, r2
 80007dc:	801a      	strh	r2, [r3, #0]
	NumOfPage = NumByteToWrite / EEPROM_PAGESIZE;
 80007de:	197b      	adds	r3, r7, r5
 80007e0:	003a      	movs	r2, r7
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	0952      	lsrs	r2, r2, #5
 80007e6:	801a      	strh	r2, [r3, #0]
	NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 80007e8:	2312      	movs	r3, #18
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	003a      	movs	r2, r7
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	211f      	movs	r1, #31
 80007f2:	400a      	ands	r2, r1
 80007f4:	801a      	strh	r2, [r3, #0]

	if (Addr == 0) {
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d15c      	bne.n	80008b8 <EEPROM_SPI_WriteBuffer+0x144>
		if (NumOfPage == 0) {
 80007fe:	197b      	adds	r3, r7, r5
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d136      	bne.n	8000874 <EEPROM_SPI_WriteBuffer+0x100>
			sEE_DataNum = NumByteToWrite;
 8000806:	19bb      	adds	r3, r7, r6
 8000808:	003a      	movs	r2, r7
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	801a      	strh	r2, [r3, #0]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800080e:	0025      	movs	r5, r4
 8000810:	193c      	adds	r4, r7, r4
 8000812:	19bb      	adds	r3, r7, r6
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	1cbb      	adds	r3, r7, #2
 8000818:	8819      	ldrh	r1, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff25 	bl	800066c <EEPROM_SPI_WritePage>
 8000822:	0003      	movs	r3, r0
 8000824:	7023      	strb	r3, [r4, #0]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000826:	197b      	adds	r3, r7, r5
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d100      	bne.n	8000830 <EEPROM_SPI_WriteBuffer+0xbc>
 800082e:	e129      	b.n	8000a84 <EEPROM_SPI_WriteBuffer+0x310>
				return pageWriteStatus;
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	e127      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
			}
		} else {
			while (NumOfPage--) {
				sEE_DataNum = EEPROM_PAGESIZE;
 8000836:	210a      	movs	r1, #10
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2220      	movs	r2, #32
 800083c:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800083e:	2515      	movs	r5, #21
 8000840:	197c      	adds	r4, r7, r5
 8000842:	187b      	adds	r3, r7, r1
 8000844:	881a      	ldrh	r2, [r3, #0]
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	8819      	ldrh	r1, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff0d 	bl	800066c <EEPROM_SPI_WritePage>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d002      	beq.n	8000864 <EEPROM_SPI_WriteBuffer+0xf0>
					return pageWriteStatus;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e110      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
				}

				WriteAddr += EEPROM_PAGESIZE;
 8000864:	1cbb      	adds	r3, r7, #2
 8000866:	1cba      	adds	r2, r7, #2
 8000868:	8812      	ldrh	r2, [r2, #0]
 800086a:	3220      	adds	r2, #32
 800086c:	801a      	strh	r2, [r3, #0]
				pBuffer += EEPROM_PAGESIZE;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3320      	adds	r3, #32
 8000872:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 8000874:	2216      	movs	r2, #22
 8000876:	18bb      	adds	r3, r7, r2
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	18ba      	adds	r2, r7, r2
 800087c:	1e59      	subs	r1, r3, #1
 800087e:	8011      	strh	r1, [r2, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1d8      	bne.n	8000836 <EEPROM_SPI_WriteBuffer+0xc2>
			}
			sEE_DataNum = NumOfSingle;
 8000884:	210a      	movs	r1, #10
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2212      	movs	r2, #18
 800088a:	18ba      	adds	r2, r7, r2
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	801a      	strh	r2, [r3, #0]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8000890:	2515      	movs	r5, #21
 8000892:	197c      	adds	r4, r7, r5
 8000894:	187b      	adds	r3, r7, r1
 8000896:	881a      	ldrh	r2, [r3, #0]
 8000898:	1cbb      	adds	r3, r7, #2
 800089a:	8819      	ldrh	r1, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fee4 	bl	800066c <EEPROM_SPI_WritePage>
 80008a4:	0003      	movs	r3, r0
 80008a6:	7023      	strb	r3, [r4, #0]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80008a8:	197b      	adds	r3, r7, r5
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d100      	bne.n	80008b2 <EEPROM_SPI_WriteBuffer+0x13e>
 80008b0:	e0e8      	b.n	8000a84 <EEPROM_SPI_WriteBuffer+0x310>
				return pageWriteStatus;
 80008b2:	197b      	adds	r3, r7, r5
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	e0e6      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
			}
		}
	} else {
		if (NumOfPage == 0) {
 80008b8:	2316      	movs	r3, #22
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d161      	bne.n	8000986 <EEPROM_SPI_WriteBuffer+0x212>
			if (NumOfSingle > count) {
 80008c2:	2112      	movs	r1, #18
 80008c4:	187a      	adds	r2, r7, r1
 80008c6:	200e      	movs	r0, #14
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	8812      	ldrh	r2, [r2, #0]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d93f      	bls.n	8000952 <EEPROM_SPI_WriteBuffer+0x1de>
				temp = NumOfSingle - count;
 80008d2:	230c      	movs	r3, #12
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	1879      	adds	r1, r7, r1
 80008d8:	183a      	adds	r2, r7, r0
 80008da:	8809      	ldrh	r1, [r1, #0]
 80008dc:	8812      	ldrh	r2, [r2, #0]
 80008de:	1a8a      	subs	r2, r1, r2
 80008e0:	801a      	strh	r2, [r3, #0]
				sEE_DataNum = count;
 80008e2:	210a      	movs	r1, #10
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	183a      	adds	r2, r7, r0
 80008e8:	8812      	ldrh	r2, [r2, #0]
 80008ea:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80008ec:	2515      	movs	r5, #21
 80008ee:	197c      	adds	r4, r7, r5
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	881a      	ldrh	r2, [r3, #0]
 80008f4:	1cbb      	adds	r3, r7, #2
 80008f6:	8819      	ldrh	r1, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff feb6 	bl	800066c <EEPROM_SPI_WritePage>
 8000900:	0003      	movs	r3, r0
 8000902:	7023      	strb	r3, [r4, #0]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000904:	197b      	adds	r3, r7, r5
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d002      	beq.n	8000912 <EEPROM_SPI_WriteBuffer+0x19e>
					return pageWriteStatus;
 800090c:	197b      	adds	r3, r7, r5
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	e0b9      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
				}
				WriteAddr += count;
 8000912:	1cbb      	adds	r3, r7, #2
 8000914:	1cb9      	adds	r1, r7, #2
 8000916:	200e      	movs	r0, #14
 8000918:	183a      	adds	r2, r7, r0
 800091a:	8809      	ldrh	r1, [r1, #0]
 800091c:	8812      	ldrh	r2, [r2, #0]
 800091e:	188a      	adds	r2, r1, r2
 8000920:	801a      	strh	r2, [r3, #0]
				pBuffer += count;
 8000922:	183b      	adds	r3, r7, r0
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	607b      	str	r3, [r7, #4]
				sEE_DataNum = temp;
 800092c:	210a      	movs	r1, #10
 800092e:	187b      	adds	r3, r7, r1
 8000930:	220c      	movs	r2, #12
 8000932:	18ba      	adds	r2, r7, r2
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8000938:	2315      	movs	r3, #21
 800093a:	18fc      	adds	r4, r7, r3
 800093c:	187b      	adds	r3, r7, r1
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	1cbb      	adds	r3, r7, #2
 8000942:	8819      	ldrh	r1, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fe90 	bl	800066c <EEPROM_SPI_WritePage>
 800094c:	0003      	movs	r3, r0
 800094e:	7023      	strb	r3, [r4, #0]
 8000950:	e010      	b.n	8000974 <EEPROM_SPI_WriteBuffer+0x200>
			} else {
				sEE_DataNum = NumByteToWrite;
 8000952:	210a      	movs	r1, #10
 8000954:	187b      	adds	r3, r7, r1
 8000956:	003a      	movs	r2, r7
 8000958:	8812      	ldrh	r2, [r2, #0]
 800095a:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800095c:	2315      	movs	r3, #21
 800095e:	18fc      	adds	r4, r7, r3
 8000960:	187b      	adds	r3, r7, r1
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	1cbb      	adds	r3, r7, #2
 8000966:	8819      	ldrh	r1, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff fe7e 	bl	800066c <EEPROM_SPI_WritePage>
 8000970:	0003      	movs	r3, r0
 8000972:	7023      	strb	r3, [r4, #0]
			}
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000974:	2215      	movs	r2, #21
 8000976:	18bb      	adds	r3, r7, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d100      	bne.n	8000980 <EEPROM_SPI_WriteBuffer+0x20c>
 800097e:	e081      	b.n	8000a84 <EEPROM_SPI_WriteBuffer+0x310>
				return pageWriteStatus;
 8000980:	18bb      	adds	r3, r7, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	e07f      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
			}
		} else {
			NumByteToWrite -= count;
 8000986:	003b      	movs	r3, r7
 8000988:	0039      	movs	r1, r7
 800098a:	200e      	movs	r0, #14
 800098c:	183a      	adds	r2, r7, r0
 800098e:	8809      	ldrh	r1, [r1, #0]
 8000990:	8812      	ldrh	r2, [r2, #0]
 8000992:	1a8a      	subs	r2, r1, r2
 8000994:	801a      	strh	r2, [r3, #0]
			NumOfPage = NumByteToWrite / EEPROM_PAGESIZE;
 8000996:	2316      	movs	r3, #22
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	003a      	movs	r2, r7
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	0952      	lsrs	r2, r2, #5
 80009a0:	801a      	strh	r2, [r3, #0]
			NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 80009a2:	2312      	movs	r3, #18
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	003a      	movs	r2, r7
 80009a8:	8812      	ldrh	r2, [r2, #0]
 80009aa:	211f      	movs	r1, #31
 80009ac:	400a      	ands	r2, r1
 80009ae:	801a      	strh	r2, [r3, #0]
			sEE_DataNum = count;
 80009b0:	210a      	movs	r1, #10
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	183a      	adds	r2, r7, r0
 80009b6:	8812      	ldrh	r2, [r2, #0]
 80009b8:	801a      	strh	r2, [r3, #0]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80009ba:	2515      	movs	r5, #21
 80009bc:	197c      	adds	r4, r7, r5
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	881a      	ldrh	r2, [r3, #0]
 80009c2:	1cbb      	adds	r3, r7, #2
 80009c4:	8819      	ldrh	r1, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fe4f 	bl	800066c <EEPROM_SPI_WritePage>
 80009ce:	0003      	movs	r3, r0
 80009d0:	7023      	strb	r3, [r4, #0]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80009d2:	197b      	adds	r3, r7, r5
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d002      	beq.n	80009e0 <EEPROM_SPI_WriteBuffer+0x26c>
				return pageWriteStatus;
 80009da:	197b      	adds	r3, r7, r5
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	e052      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
			}
			WriteAddr += count;
 80009e0:	1cbb      	adds	r3, r7, #2
 80009e2:	1cb9      	adds	r1, r7, #2
 80009e4:	200e      	movs	r0, #14
 80009e6:	183a      	adds	r2, r7, r0
 80009e8:	8809      	ldrh	r1, [r1, #0]
 80009ea:	8812      	ldrh	r2, [r2, #0]
 80009ec:	188a      	adds	r2, r1, r2
 80009ee:	801a      	strh	r2, [r3, #0]
			pBuffer += count;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	18d3      	adds	r3, r2, r3
 80009f8:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 80009fa:	e01e      	b.n	8000a3a <EEPROM_SPI_WriteBuffer+0x2c6>
				sEE_DataNum = EEPROM_PAGESIZE;
 80009fc:	210a      	movs	r1, #10
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2220      	movs	r2, #32
 8000a02:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8000a04:	2515      	movs	r5, #21
 8000a06:	197c      	adds	r4, r7, r5
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	881a      	ldrh	r2, [r3, #0]
 8000a0c:	1cbb      	adds	r3, r7, #2
 8000a0e:	8819      	ldrh	r1, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fe2a 	bl	800066c <EEPROM_SPI_WritePage>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	7023      	strb	r3, [r4, #0]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000a1c:	197b      	adds	r3, r7, r5
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d002      	beq.n	8000a2a <EEPROM_SPI_WriteBuffer+0x2b6>
					return pageWriteStatus;
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	e02d      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
				}
				WriteAddr += EEPROM_PAGESIZE;
 8000a2a:	1cbb      	adds	r3, r7, #2
 8000a2c:	1cba      	adds	r2, r7, #2
 8000a2e:	8812      	ldrh	r2, [r2, #0]
 8000a30:	3220      	adds	r2, #32
 8000a32:	801a      	strh	r2, [r3, #0]
				pBuffer += EEPROM_PAGESIZE;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3320      	adds	r3, #32
 8000a38:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 8000a3a:	2216      	movs	r2, #22
 8000a3c:	18bb      	adds	r3, r7, r2
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	18ba      	adds	r2, r7, r2
 8000a42:	1e59      	subs	r1, r3, #1
 8000a44:	8011      	strh	r1, [r2, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1d8      	bne.n	80009fc <EEPROM_SPI_WriteBuffer+0x288>
			}
			if (NumOfSingle != 0) {
 8000a4a:	2212      	movs	r2, #18
 8000a4c:	18bb      	adds	r3, r7, r2
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d017      	beq.n	8000a84 <EEPROM_SPI_WriteBuffer+0x310>
				sEE_DataNum = NumOfSingle;
 8000a54:	210a      	movs	r1, #10
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	18ba      	adds	r2, r7, r2
 8000a5a:	8812      	ldrh	r2, [r2, #0]
 8000a5c:	801a      	strh	r2, [r3, #0]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8000a5e:	2515      	movs	r5, #21
 8000a60:	197c      	adds	r4, r7, r5
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	1cbb      	adds	r3, r7, #2
 8000a68:	8819      	ldrh	r1, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fdfd 	bl	800066c <EEPROM_SPI_WritePage>
 8000a72:	0003      	movs	r3, r0
 8000a74:	7023      	strb	r3, [r4, #0]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000a76:	197b      	adds	r3, r7, r5
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <EEPROM_SPI_WriteBuffer+0x310>
					return pageWriteStatus;
 8000a7e:	197b      	adds	r3, r7, r5
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	e000      	b.n	8000a86 <EEPROM_SPI_WriteBuffer+0x312>
				}
			}
		}
	}
	return EEPROM_STATUS_COMPLETE;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b007      	add	sp, #28
 8000a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000a90 <EEPROM_SPI_ReadBuffer>:

EepromOperations EEPROM_SPI_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead) {
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	0008      	movs	r0, r1
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	1cbb      	adds	r3, r7, #2
 8000a9e:	1c02      	adds	r2, r0, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	1c0a      	adds	r2, r1, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8000aa8:	e002      	b.n	8000ab0 <EEPROM_SPI_ReadBuffer+0x20>
		LL_mDelay( 2 );
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f004 ff52 	bl	8005954 <LL_mDelay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <EEPROM_SPI_ReadBuffer+0xb8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	225d      	movs	r2, #93	; 0x5d
 8000ab6:	5c9b      	ldrb	r3, [r3, r2]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d1f5      	bne.n	8000aaa <EEPROM_SPI_ReadBuffer+0x1a>
	}

	uint8_t header[3];

	header[0] = EEPROM_READ;
 8000abe:	240c      	movs	r4, #12
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
	header[1] = ReadAddr >> 8;
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	705a      	strb	r2, [r3, #1]
	header[2] = ReadAddr;
 8000ad4:	1cbb      	adds	r3, r7, #2
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	709a      	strb	r2, [r3, #2]

	EEPROM_W_HIGH();
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	01db      	lsls	r3, r3, #7
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <EEPROM_SPI_ReadBuffer+0xbc>)
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	f7ff fd9a 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_H_HIGH();
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	019b      	lsls	r3, r3, #6
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <EEPROM_SPI_ReadBuffer+0xbc>)
 8000af2:	0019      	movs	r1, r3
 8000af4:	0010      	movs	r0, r2
 8000af6:	f7ff fd93 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_CS_LOW();
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <EEPROM_SPI_ReadBuffer+0xbc>)
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	f7ff fd98 	bl	8000638 <LL_GPIO_ResetOutputPin>

	EEPROM_SPI_SendInstruction(header, 3);
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 f8cf 	bl	8000cb0 <EEPROM_SPI_SendInstruction>

	while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 8000b12:	e002      	b.n	8000b1a <EEPROM_SPI_ReadBuffer+0x8a>
		LL_mDelay( 2 );
 8000b14:	2002      	movs	r0, #2
 8000b16:	f004 ff1d 	bl	8005954 <LL_mDelay>
	while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <EEPROM_SPI_ReadBuffer+0xb8>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	003b      	movs	r3, r7
 8000b20:	881a      	ldrh	r2, [r3, #0]
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	23c8      	movs	r3, #200	; 0xc8
 8000b26:	f003 fbe9 	bl	80042fc <HAL_SPI_Receive>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d0f1      	beq.n	8000b14 <EEPROM_SPI_ReadBuffer+0x84>
	}
	EEPROM_CS_HIGH();
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	015b      	lsls	r3, r3, #5
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <EEPROM_SPI_ReadBuffer+0xbc>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f7ff fd71 	bl	8000620 <LL_GPIO_SetOutputPin>

	return EEPROM_STATUS_COMPLETE;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b005      	add	sp, #20
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	2000003c 	.word	0x2000003c
 8000b4c:	48000400 	.word	0x48000400

08000b50 <EEPROM_SPI_WaitStandbyState>:

uint8_t EEPROM_SPI_WaitStandbyState(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint8_t sEEstatus[1] = { 0x00 };
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <EEPROM_SPI_WaitStandbyState+0x90>)
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
	uint8_t command[1] = { EEPROM_RDSR };
 8000b5e:	003b      	movs	r3, r7
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <EEPROM_SPI_WaitStandbyState+0x94>)
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	701a      	strb	r2, [r3, #0]

	EEPROM_W_HIGH();
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <EEPROM_SPI_WaitStandbyState+0x98>)
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	0010      	movs	r0, r2
 8000b70:	f7ff fd56 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_H_HIGH();
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	019b      	lsls	r3, r3, #6
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <EEPROM_SPI_WaitStandbyState+0x98>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f7ff fd4f 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_CS_LOW();
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	015b      	lsls	r3, r3, #5
 8000b86:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <EEPROM_SPI_WaitStandbyState+0x98>)
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	f7ff fd54 	bl	8000638 <LL_GPIO_ResetOutputPin>

	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8000b90:	003b      	movs	r3, r7
 8000b92:	2101      	movs	r1, #1
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f88b 	bl	8000cb0 <EEPROM_SPI_SendInstruction>

	do {
		while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 8000b9a:	e002      	b.n	8000ba2 <EEPROM_SPI_WaitStandbyState+0x52>
			LL_mDelay( 2 );
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f004 fed9 	bl	8005954 <LL_mDelay>
		while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <EEPROM_SPI_WaitStandbyState+0x9c>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	1d39      	adds	r1, r7, #4
 8000ba8:	23c8      	movs	r3, #200	; 0xc8
 8000baa:	2201      	movs	r2, #1
 8000bac:	f003 fba6 	bl	80042fc <HAL_SPI_Receive>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d0f2      	beq.n	8000b9c <EEPROM_SPI_WaitStandbyState+0x4c>
		};
		HAL_Delay(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f002 ff22 	bl	8003a00 <HAL_Delay>
	} while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d1ec      	bne.n	8000ba2 <EEPROM_SPI_WaitStandbyState+0x52>
	EEPROM_CS_HIGH();
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <EEPROM_SPI_WaitStandbyState+0x98>)
 8000bce:	0019      	movs	r1, r3
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	f7ff fd25 	bl	8000620 <LL_GPIO_SetOutputPin>
	return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08005a24 	.word	0x08005a24
 8000be4:	08005a28 	.word	0x08005a28
 8000be8:	48000400 	.word	0x48000400
 8000bec:	2000003c 	.word	0x2000003c

08000bf0 <sEE_WriteEnable>:
		Error_Handler();
	}
	return (uint8_t)answerByte;
}

void sEE_WriteEnable(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	EEPROM_W_HIGH();
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	01db      	lsls	r3, r3, #7
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <sEE_WriteEnable+0x58>)
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0010      	movs	r0, r2
 8000c00:	f7ff fd0e 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_H_HIGH();
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	019b      	lsls	r3, r3, #6
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <sEE_WriteEnable+0x58>)
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	f7ff fd07 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_CS_LOW();
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	015b      	lsls	r3, r3, #5
 8000c16:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <sEE_WriteEnable+0x58>)
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	f7ff fd0c 	bl	8000638 <LL_GPIO_ResetOutputPin>

	uint8_t command[1] = { EEPROM_WREN };
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <sEE_WriteEnable+0x5c>)
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	701a      	strb	r2, [r3, #0]
	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 f83f 	bl	8000cb0 <EEPROM_SPI_SendInstruction>

	EEPROM_CS_HIGH();
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	015b      	lsls	r3, r3, #5
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <sEE_WriteEnable+0x58>)
 8000c38:	0019      	movs	r1, r3
 8000c3a:	0010      	movs	r0, r2
 8000c3c:	f7ff fcf0 	bl	8000620 <LL_GPIO_SetOutputPin>
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	08005a2c 	.word	0x08005a2c

08000c50 <sEE_WriteDisable>:

void sEE_WriteDisable(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	EEPROM_W_HIGH();
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	01db      	lsls	r3, r3, #7
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <sEE_WriteDisable+0x58>)
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0010      	movs	r0, r2
 8000c60:	f7ff fcde 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_H_HIGH();
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	019b      	lsls	r3, r3, #6
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <sEE_WriteDisable+0x58>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f7ff fcd7 	bl	8000620 <LL_GPIO_SetOutputPin>
	EEPROM_CS_LOW();
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <sEE_WriteDisable+0x58>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f7ff fcdc 	bl	8000638 <LL_GPIO_ResetOutputPin>

	uint8_t command[1] = { EEPROM_WRDI };
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <sEE_WriteDisable+0x5c>)
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	701a      	strb	r2, [r3, #0]
	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 f80f 	bl	8000cb0 <EEPROM_SPI_SendInstruction>

	EEPROM_CS_HIGH();
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	015b      	lsls	r3, r3, #5
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <sEE_WriteDisable+0x58>)
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	f7ff fcc0 	bl	8000620 <LL_GPIO_SetOutputPin>
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	08005a30 	.word	0x08005a30

08000cb0 <EEPROM_SPI_SendInstruction>:
	EEPROM_CS_HIGH();

	sEE_WriteDisable();
}

void EEPROM_SPI_SendInstruction(uint8_t *instruction, uint8_t size) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	000a      	movs	r2, r1
 8000cba:	1cfb      	adds	r3, r7, #3
 8000cbc:	701a      	strb	r2, [r3, #0]
	while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 8000cbe:	e002      	b.n	8000cc6 <EEPROM_SPI_SendInstruction+0x16>
		LL_mDelay( 2 );
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f004 fe47 	bl	8005954 <LL_mDelay>
	while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <EEPROM_SPI_SendInstruction+0x48>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	225d      	movs	r2, #93	; 0x5d
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f5      	beq.n	8000cc0 <EEPROM_SPI_SendInstruction+0x10>
	}

	if (HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK) {
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <EEPROM_SPI_SendInstruction+0x48>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	1cfb      	adds	r3, r7, #3
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	23c8      	movs	r3, #200	; 0xc8
 8000ce2:	f003 f9b3 	bl	800404c <HAL_SPI_Transmit>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <EEPROM_SPI_SendInstruction+0x3e>
		Error_Handler();
 8000cea:	f001 fe8d 	bl	8002a08 <Error_Handler>
	}
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	2000003c 	.word	0x2000003c

08000cfc <LL_GPIO_WriteOutputPort>:
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LL_GPIO_ReadOutputPort>:
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LL_GPIO_SetOutputPin>:
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	619a      	str	r2, [r3, #24]
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <LL_GPIO_ResetOutputPin>:
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <delay>:
#include "HD44780.h"
#include "main.h"

// ===========================================================================
void delay(uint32_t del)		// hloupy delay, jednotka je 410ns pri taktu hodin 48MHz
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	for(i=0;i<del;i++){};
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e002      	b.n	8000d6c <delay+0x14>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f8      	bhi.n	8000d66 <delay+0xe>
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <LCD_PrPwm>:
	LCD_WriteData(znak+0x37);
}

// ===========================================================================
void LCD_PrPwm(uint16_t val) 		// vypisuje procenta 6 znaku
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	1dbb      	adds	r3, r7, #6
 8000d8a:	801a      	strh	r2, [r3, #0]
	unsigned char znak;
	unsigned char nula = 0;
 8000d8c:	260f      	movs	r6, #15
 8000d8e:	19bb      	adds	r3, r7, r6
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	znak = val / 1000;
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	22fa      	movs	r2, #250	; 0xfa
 8000d9a:	0091      	lsls	r1, r2, #2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9b3 	bl	8000108 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	250e      	movs	r5, #14
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	701a      	strb	r2, [r3, #0]
	val = val % 1000;
 8000dac:	1dbc      	adds	r4, r7, #6
 8000dae:	1dbb      	adds	r3, r7, #6
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	22fa      	movs	r2, #250	; 0xfa
 8000db4:	0091      	lsls	r1, r2, #2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fa2c 	bl	8000214 <__aeabi_uidivmod>
 8000dbc:	000b      	movs	r3, r1
 8000dbe:	8023      	strh	r3, [r4, #0]
	if (znak!=0)
 8000dc0:	197b      	adds	r3, r7, r5
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00a      	beq.n	8000dde <LCD_PrPwm+0x5e>
	{
		LCD_WriteData( znak + 0x30 );
 8000dc8:	197b      	adds	r3, r7, r5
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3330      	adds	r3, #48	; 0x30
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fa0d 	bl	80011f0 <LCD_WriteData>
		nula = 1;
 8000dd6:	19bb      	adds	r3, r7, r6
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e002      	b.n	8000de4 <LCD_PrPwm+0x64>
	}
	else LCD_WriteData( ' ' );
 8000dde:	2020      	movs	r0, #32
 8000de0:	f000 fa06 	bl	80011f0 <LCD_WriteData>
	znak = val / 100;
 8000de4:	1dbb      	adds	r3, r7, #6
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	2164      	movs	r1, #100	; 0x64
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff f98c 	bl	8000108 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	250e      	movs	r5, #14
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	701a      	strb	r2, [r3, #0]
	val = val % 100;
 8000dfa:	1dbc      	adds	r4, r7, #6
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2164      	movs	r1, #100	; 0x64
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fa06 	bl	8000214 <__aeabi_uidivmod>
 8000e08:	000b      	movs	r3, r1
 8000e0a:	8023      	strh	r3, [r4, #0]
	if ((znak!=0) || (nula!=0))
 8000e0c:	197b      	adds	r3, r7, r5
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d104      	bne.n	8000e1e <LCD_PrPwm+0x9e>
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d008      	beq.n	8000e30 <LCD_PrPwm+0xb0>
	{
		LCD_WriteData( znak + 0x30 );
 8000e1e:	230e      	movs	r3, #14
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3330      	adds	r3, #48	; 0x30
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 f9e1 	bl	80011f0 <LCD_WriteData>
 8000e2e:	e002      	b.n	8000e36 <LCD_PrPwm+0xb6>
	}
	else LCD_WriteData( ' ' );
 8000e30:	2020      	movs	r0, #32
 8000e32:	f000 f9dd 	bl	80011f0 <LCD_WriteData>
	znak = val / 10;
 8000e36:	1dbb      	adds	r3, r7, #6
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	210a      	movs	r1, #10
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff f963 	bl	8000108 <__udivsi3>
 8000e42:	0003      	movs	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	210e      	movs	r1, #14
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
	LCD_WriteData( znak + 0x30 );
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3330      	adds	r3, #48	; 0x30
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 f9cb 	bl	80011f0 <LCD_WriteData>
	LCD_WriteData( ',' );
 8000e5a:	202c      	movs	r0, #44	; 0x2c
 8000e5c:	f000 f9c8 	bl	80011f0 <LCD_WriteData>
	LCD_WriteData((val % 10) + 0x30);
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	210a      	movs	r1, #10
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff f9d4 	bl	8000214 <__aeabi_uidivmod>
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 f9ba 	bl	80011f0 <LCD_WriteData>
	LCD_WriteCString( "%  " );
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <LCD_PrPwm+0x10c>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f93a 	bl	80010f8 <LCD_WriteCString>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b005      	add	sp, #20
 8000e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8c:	08005a34 	.word	0x08005a34

08000e90 <LCD_PrTemp>:

// ===========================================================================
void LCD_PrTemp(uint16_t val) 		// vypisuje teplotu 7 znaku
{
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	0002      	movs	r2, r0
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	801a      	strh	r2, [r3, #0]
	unsigned char znak;
	unsigned char nula = 0;
 8000e9c:	260f      	movs	r6, #15
 8000e9e:	19bb      	adds	r3, r7, r6
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	znak = val / 1000;
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	22fa      	movs	r2, #250	; 0xfa
 8000eaa:	0091      	lsls	r1, r2, #2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff f92b 	bl	8000108 <__udivsi3>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	250e      	movs	r5, #14
 8000eb8:	197b      	adds	r3, r7, r5
 8000eba:	701a      	strb	r2, [r3, #0]
	val = val % 1000;
 8000ebc:	1dbc      	adds	r4, r7, #6
 8000ebe:	1dbb      	adds	r3, r7, #6
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	22fa      	movs	r2, #250	; 0xfa
 8000ec4:	0091      	lsls	r1, r2, #2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff f9a4 	bl	8000214 <__aeabi_uidivmod>
 8000ecc:	000b      	movs	r3, r1
 8000ece:	8023      	strh	r3, [r4, #0]
	if (znak!=0)
 8000ed0:	197b      	adds	r3, r7, r5
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00a      	beq.n	8000eee <LCD_PrTemp+0x5e>
	{
		LCD_WriteData( znak + 0x30 );
 8000ed8:	197b      	adds	r3, r7, r5
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3330      	adds	r3, #48	; 0x30
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 f985 	bl	80011f0 <LCD_WriteData>
		nula = 1;
 8000ee6:	19bb      	adds	r3, r7, r6
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e002      	b.n	8000ef4 <LCD_PrTemp+0x64>
	}
	else LCD_WriteData( ' ' );
 8000eee:	2020      	movs	r0, #32
 8000ef0:	f000 f97e 	bl	80011f0 <LCD_WriteData>
	znak = val / 100;
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2164      	movs	r1, #100	; 0x64
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff f904 	bl	8000108 <__udivsi3>
 8000f00:	0003      	movs	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	250e      	movs	r5, #14
 8000f06:	197b      	adds	r3, r7, r5
 8000f08:	701a      	strb	r2, [r3, #0]
	val = val % 100;
 8000f0a:	1dbc      	adds	r4, r7, #6
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff f97e 	bl	8000214 <__aeabi_uidivmod>
 8000f18:	000b      	movs	r3, r1
 8000f1a:	8023      	strh	r3, [r4, #0]
	if ((znak!=0) || (nula!=0))
 8000f1c:	197b      	adds	r3, r7, r5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d104      	bne.n	8000f2e <LCD_PrTemp+0x9e>
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d008      	beq.n	8000f40 <LCD_PrTemp+0xb0>
	{
		LCD_WriteData( znak + 0x30 );
 8000f2e:	230e      	movs	r3, #14
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3330      	adds	r3, #48	; 0x30
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 f959 	bl	80011f0 <LCD_WriteData>
 8000f3e:	e002      	b.n	8000f46 <LCD_PrTemp+0xb6>
	}
	else LCD_WriteData( ' ' );
 8000f40:	2020      	movs	r0, #32
 8000f42:	f000 f955 	bl	80011f0 <LCD_WriteData>
	znak = val / 10;
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff f8db 	bl	8000108 <__udivsi3>
 8000f52:	0003      	movs	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	210e      	movs	r1, #14
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
	LCD_WriteData( znak + 0x30 );
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 f943 	bl	80011f0 <LCD_WriteData>
	LCD_WriteData( ',' );
 8000f6a:	202c      	movs	r0, #44	; 0x2c
 8000f6c:	f000 f940 	bl	80011f0 <LCD_WriteData>
	LCD_WriteData((val % 10) + 0x30);
 8000f70:	1dbb      	adds	r3, r7, #6
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	210a      	movs	r1, #10
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff f94c 	bl	8000214 <__aeabi_uidivmod>
 8000f7c:	000b      	movs	r3, r1
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3330      	adds	r3, #48	; 0x30
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 f932 	bl	80011f0 <LCD_WriteData>
	LCD_WriteData( 0xDF ); // znak stupen
 8000f8c:	20df      	movs	r0, #223	; 0xdf
 8000f8e:	f000 f92f 	bl	80011f0 <LCD_WriteData>
	LCD_WriteCString( "C  " );
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <LCD_PrTemp+0x114>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 f8af 	bl	80010f8 <LCD_WriteCString>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b005      	add	sp, #20
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	08005a38 	.word	0x08005a38

08000fa8 <LCD_Mypow>:
* Function Name : LCD_Mypow
* Description	: vypocita n-tou mocninu cisla m
*
*********************************************************************************/
unsigned long int LCD_Mypow( unsigned char m, unsigned char n )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	1c0a      	adds	r2, r1, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	uint32_t result = 1;		// deklaruje promennou pro vypocet vysledku
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
	while( n-- ) result *= m;	// smycka pro nasobeni
 8000fbe:	e004      	b.n	8000fca <LCD_Mypow+0x22>
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4353      	muls	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	1dba      	adds	r2, r7, #6
 8000fd0:	1e59      	subs	r1, r3, #1
 8000fd2:	7011      	strb	r1, [r2, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f3      	bne.n	8000fc0 <LCD_Mypow+0x18>
	return result;				// vysledek
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <LCD_PrintNumber>:
* Description	: napise cislo
* hodnota, pocet znaku, pocet desetinnych mist
*
*********************************************************************************/
void LCD_PrintNumber( uint64_t Num, uint8_t NumLen, uint8_t Decimal )
{
 8000fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe4:	b087      	sub	sp, #28
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60b8      	str	r0, [r7, #8]
 8000fea:	60f9      	str	r1, [r7, #12]
 8000fec:	0019      	movs	r1, r3
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	1c0a      	adds	r2, r1, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000ff8:	2316      	movs	r3, #22
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]

	for(t = 0; t < NumLen; t++)
 8001000:	2317      	movs	r3, #23
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e06a      	b.n	80010e0 <LCD_PrintNumber+0xfe>
	{
		temp = ( Num / LCD_Mypow( 10, NumLen - t - 1 )) % 10;
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	2617      	movs	r6, #23
 800100e:	19bb      	adds	r3, r7, r6
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	0019      	movs	r1, r3
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff ffc2 	bl	8000fa8 <LCD_Mypow>
 8001024:	0003      	movs	r3, r0
 8001026:	001c      	movs	r4, r3
 8001028:	2300      	movs	r3, #0
 800102a:	001d      	movs	r5, r3
 800102c:	0022      	movs	r2, r4
 800102e:	002b      	movs	r3, r5
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	f7ff f9de 	bl	80003f4 <__aeabi_uldivmod>
 8001038:	0002      	movs	r2, r0
 800103a:	000b      	movs	r3, r1
 800103c:	0010      	movs	r0, r2
 800103e:	0019      	movs	r1, r3
 8001040:	220a      	movs	r2, #10
 8001042:	2300      	movs	r3, #0
 8001044:	f7ff f9d6 	bl	80003f4 <__aeabi_uldivmod>
 8001048:	0010      	movs	r0, r2
 800104a:	0019      	movs	r1, r3
 800104c:	2315      	movs	r3, #21
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	1c02      	adds	r2, r0, #0
 8001052:	701a      	strb	r2, [r3, #0]
		if (( enshow == 0 ) && ( t < ( NumLen - 1 )) && ( t < ( NumLen - Decimal - 1 )))
 8001054:	2216      	movs	r2, #22
 8001056:	18bb      	adds	r3, r7, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d11d      	bne.n	800109a <LCD_PrintNumber+0xb8>
 800105e:	19bb      	adds	r3, r7, r6
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	429a      	cmp	r2, r3
 800106a:	da16      	bge.n	800109a <LCD_PrintNumber+0xb8>
 800106c:	19bb      	adds	r3, r7, r6
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	7819      	ldrb	r1, [r3, #0]
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1acb      	subs	r3, r1, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	429a      	cmp	r2, r3
 800107e:	da0c      	bge.n	800109a <LCD_PrintNumber+0xb8>
		{
			if ( temp == 0 )
 8001080:	2315      	movs	r3, #21
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <LCD_PrintNumber+0xb0>
			{
				LCD_WriteData( ' ' );
 800108a:	2020      	movs	r0, #32
 800108c:	f000 f8b0 	bl	80011f0 <LCD_WriteData>
				continue;
 8001090:	e020      	b.n	80010d4 <LCD_PrintNumber+0xf2>
			}
			else enshow = 1;
 8001092:	2316      	movs	r3, #22
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
		}
		LCD_WriteData( temp + '0' );
 800109a:	2315      	movs	r3, #21
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3330      	adds	r3, #48	; 0x30
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 f8a3 	bl	80011f0 <LCD_WriteData>
		if(( t == ( NumLen - Decimal - 1 )) && ( t < ( NumLen - 1 )))
 80010aa:	2017      	movs	r0, #23
 80010ac:	183b      	adds	r3, r7, r0
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	1acb      	subs	r3, r1, r3
 80010ba:	3b01      	subs	r3, #1
 80010bc:	429a      	cmp	r2, r3
 80010be:	d109      	bne.n	80010d4 <LCD_PrintNumber+0xf2>
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	429a      	cmp	r2, r3
 80010cc:	da02      	bge.n	80010d4 <LCD_PrintNumber+0xf2>
		{
			LCD_WriteData( ',' );
 80010ce:	202c      	movs	r0, #44	; 0x2c
 80010d0:	f000 f88e 	bl	80011f0 <LCD_WriteData>
	for(t = 0; t < NumLen; t++)
 80010d4:	2117      	movs	r1, #23
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	3201      	adds	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	2317      	movs	r3, #23
 80010e2:	18fa      	adds	r2, r7, r3
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d38d      	bcc.n	800100a <LCD_PrintNumber+0x28>
		}
	}
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b007      	add	sp, #28
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010f8 <LCD_WriteCString>:

// ===========================================================================
void LCD_WriteCString( const char* retezec ) // vypise konstantni retezec
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  while(*retezec != '\0')
 8001100:	e007      	b.n	8001112 <LCD_WriteCString+0x1a>
  {
    LCD_WriteData(*retezec);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f872 	bl	80011f0 <LCD_WriteData>
	retezec +=1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
  while(*retezec != '\0')
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f3      	bne.n	8001102 <LCD_WriteCString+0xa>
  }
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <LCD_Position>:

// ===========================================================================
void LCD_Position( uint8_t y, uint8_t x ) // nastavi pozici kurzoru
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	1c0a      	adds	r2, r1, #0
 8001134:	701a      	strb	r2, [r3, #0]
	switch( y )
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d019      	beq.n	8001172 <LCD_Position+0x4e>
 800113e:	dc1e      	bgt.n	800117e <LCD_Position+0x5a>
 8001140:	2b02      	cmp	r3, #2
 8001142:	d010      	beq.n	8001166 <LCD_Position+0x42>
 8001144:	dc1b      	bgt.n	800117e <LCD_Position+0x5a>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <LCD_Position+0x2c>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <LCD_Position+0x36>
 800114e:	e016      	b.n	800117e <LCD_Position+0x5a>
	{
		case 0: x+=0x00; break;
 8001150:	1dbb      	adds	r3, r7, #6
 8001152:	1dba      	adds	r2, r7, #6
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e011      	b.n	800117e <LCD_Position+0x5a>
		case 1: x+=0x40; break;
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	1dba      	adds	r2, r7, #6
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	3240      	adds	r2, #64	; 0x40
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e00b      	b.n	800117e <LCD_Position+0x5a>
		case 2: x+=0x14; break;
 8001166:	1dbb      	adds	r3, r7, #6
 8001168:	1dba      	adds	r2, r7, #6
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	3214      	adds	r2, #20
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e005      	b.n	800117e <LCD_Position+0x5a>
		case 3: x+=0x54; break;
 8001172:	1dbb      	adds	r3, r7, #6
 8001174:	1dba      	adds	r2, r7, #6
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	3254      	adds	r2, #84	; 0x54
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	46c0      	nop			; (mov r8, r8)
	}
	LCD_WriteComm( x | 0x80 );
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	4252      	negs	r2, r2
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	0018      	movs	r0, r3
 800118c:	f000 f846 	bl	800121c <LCD_WriteComm>
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_Init>:

// ===========================================================================
void LCD_Init( void ) // inicializuje displej
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <LCD_Init+0x3c>)
 800119e:	2120      	movs	r1, #32
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff fdcd 	bl	8000d40 <LL_GPIO_ResetOutputPin>
	LCD_Clear();
 80011a6:	f000 f817 	bl	80011d8 <LCD_Clear>
	LCD_WriteComm( 0x28 );			// select 8-bit mode
 80011aa:	2028      	movs	r0, #40	; 0x28
 80011ac:	f000 f836 	bl	800121c <LCD_WriteComm>
	LL_mDelay( 5 );					// 5 ms
 80011b0:	2005      	movs	r0, #5
 80011b2:	f004 fbcf 	bl	8005954 <LL_mDelay>
	LCD_WriteComm( 0x08 );			// select 8-bit mode
 80011b6:	2008      	movs	r0, #8
 80011b8:	f000 f830 	bl	800121c <LCD_WriteComm>
	LCD_Clear();
 80011bc:	f000 f80c 	bl	80011d8 <LCD_Clear>
	LCD_WriteComm( 0x06 );			// select 8-bit mode
 80011c0:	2006      	movs	r0, #6
 80011c2:	f000 f82b 	bl	800121c <LCD_WriteComm>
	LCD_WriteComm( 0x0C );			// select
 80011c6:	200c      	movs	r0, #12
 80011c8:	f000 f828 	bl	800121c <LCD_WriteComm>
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	48000400 	.word	0x48000400

080011d8 <LCD_Clear>:

// ===========================================================================
void LCD_Clear( void ) // vymaze obsah displeje a nastavi kurzor na zacatek
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	LCD_WriteComm( 1 );
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 f81d 	bl	800121c <LCD_WriteComm>
	LL_mDelay( 2 );					// 2 ms
 80011e2:	2002      	movs	r0, #2
 80011e4:	f004 fbb6 	bl	8005954 <LL_mDelay>
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <LCD_WriteData>:

// ===========================================================================
void LCD_WriteData( uint8_t val ) // zapise data na displej
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	0002      	movs	r2, r0
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	701a      	strb	r2, [r3, #0]
	LL_GPIO_SetOutputPin(LCD_RS_GPIO_Port, LCD_RS_Pin);
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <LCD_WriteData+0x28>)
 80011fe:	2110      	movs	r1, #16
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff fd91 	bl	8000d28 <LL_GPIO_SetOutputPin>
	LCD_Write( val );
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f81c 	bl	8001248 <LCD_Write>
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}
 8001218:	48000400 	.word	0x48000400

0800121c <LCD_WriteComm>:

// ===========================================================================
void LCD_WriteComm( uint8_t val ) // zapise ridici kod na displej
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	0002      	movs	r2, r0
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	701a      	strb	r2, [r3, #0]
	LL_GPIO_ResetOutputPin(LCD_RS_GPIO_Port, LCD_RS_Pin);
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <LCD_WriteComm+0x28>)
 800122a:	2110      	movs	r1, #16
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff fd87 	bl	8000d40 <LL_GPIO_ResetOutputPin>
	LCD_Write( val );
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	f000 f806 	bl	8001248 <LCD_Write>
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	48000400 	.word	0x48000400

08001248 <LCD_Write>:

// ===========================================================================
void LCD_Write( uint8_t val )		// zapise kod na displej
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	0002      	movs	r2, r0
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	701a      	strb	r2, [r3, #0]
	LL_GPIO_WriteOutputPort( GPIOB, ( LL_GPIO_ReadOutputPort(GPIOB) & 0xFFF0 ) | (( val >> 4 ) & 0x0F ));
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <LCD_Write+0x98>)
 8001256:	0018      	movs	r0, r3
 8001258:	f7ff fd5c 	bl	8000d14 <LL_GPIO_ReadOutputPort>
 800125c:	0003      	movs	r3, r0
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <LCD_Write+0x9c>)
 8001260:	401a      	ands	r2, r3
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	0019      	movs	r1, r3
 800126c:	230f      	movs	r3, #15
 800126e:	400b      	ands	r3, r1
 8001270:	4313      	orrs	r3, r2
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <LCD_Write+0x98>)
 8001274:	0019      	movs	r1, r3
 8001276:	0010      	movs	r0, r2
 8001278:	f7ff fd40 	bl	8000cfc <LL_GPIO_WriteOutputPort>
	delay(5);
 800127c:	2005      	movs	r0, #5
 800127e:	f7ff fd6b 	bl	8000d58 <delay>
	LL_GPIO_SetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <LCD_Write+0x98>)
 8001284:	2120      	movs	r1, #32
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fd4e 	bl	8000d28 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <LCD_Write+0x98>)
 800128e:	2120      	movs	r1, #32
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fd55 	bl	8000d40 <LL_GPIO_ResetOutputPin>
	LL_GPIO_WriteOutputPort( GPIOB, ( LL_GPIO_ReadOutputPort(GPIOB) & 0xFFF0 ) | ( val & 0x0F ));
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <LCD_Write+0x98>)
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fd3b 	bl	8000d14 <LL_GPIO_ReadOutputPort>
 800129e:	0003      	movs	r3, r0
 80012a0:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <LCD_Write+0x9c>)
 80012a2:	401a      	ands	r2, r3
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	210f      	movs	r1, #15
 80012aa:	400b      	ands	r3, r1
 80012ac:	4313      	orrs	r3, r2
 80012ae:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <LCD_Write+0x98>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7ff fd22 	bl	8000cfc <LL_GPIO_WriteOutputPort>
	delay(5);
 80012b8:	2005      	movs	r0, #5
 80012ba:	f7ff fd4d 	bl	8000d58 <delay>
	LL_GPIO_SetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <LCD_Write+0x98>)
 80012c0:	2120      	movs	r1, #32
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff fd30 	bl	8000d28 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <LCD_Write+0x98>)
 80012ca:	2120      	movs	r1, #32
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fd37 	bl	8000d40 <LL_GPIO_ResetOutputPin>
	delay( 100 );	// hodnota 100 pro oranzovy displej
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f7ff fd40 	bl	8000d58 <delay>
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	48000400 	.word	0x48000400
 80012e4:	0000fff0 	.word	0x0000fff0

080012e8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2207      	movs	r2, #7
 80012f8:	4393      	bics	r3, r2
 80012fa:	001a      	movs	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	615a      	str	r2, [r3, #20]
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}

0800130c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2204      	movs	r2, #4
 800131c:	4393      	bics	r3, r2
 800131e:	001a      	movs	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	035b      	lsls	r3, r3, #13
 8001342:	0b5b      	lsrs	r3, r3, #13
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <LL_AHB1_GRP1_EnableClock+0x28>)
 800135e:	6959      	ldr	r1, [r3, #20]
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <LL_AHB1_GRP1_EnableClock+0x28>)
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	430a      	orrs	r2, r1
 8001366:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <LL_AHB1_GRP1_EnableClock+0x28>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b004      	add	sp, #16
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <LL_APB1_GRP2_EnableClock+0x28>)
 800138a:	6999      	ldr	r1, [r3, #24]
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <LL_APB1_GRP2_EnableClock+0x28>)
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	430a      	orrs	r2, r1
 8001392:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <LL_APB1_GRP2_EnableClock+0x28>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b090      	sub	sp, #64	; 0x40
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80013b2:	2530      	movs	r5, #48	; 0x30
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	0018      	movs	r0, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f004 fb1d 	bl	80059fc <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80013c2:	241c      	movs	r4, #28
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	0018      	movs	r0, r3
 80013c8:	2314      	movs	r3, #20
 80013ca:	001a      	movs	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f004 fb15 	bl	80059fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	0018      	movs	r0, r3
 80013d6:	2318      	movs	r3, #24
 80013d8:	001a      	movs	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f004 fb0e 	bl	80059fc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ffcb 	bl	8001380 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff ffb0 	bl	8001354 <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2203      	movs	r2, #3
 80013fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	1d3a      	adds	r2, r7, #4
 8001408:	2390      	movs	r3, #144	; 0x90
 800140a:	05db      	lsls	r3, r3, #23
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f003 fea8 	bl	8005164 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_ADC_Init+0xe0>)
 8001416:	2101      	movs	r1, #1
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ff89 	bl	8001330 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800141e:	197b      	adds	r3, r7, r5
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	0612      	lsls	r2, r2, #24
 8001424:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001426:	197b      	adds	r3, r7, r5
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800142c:	197b      	adds	r3, r7, r5
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001432:	197b      	adds	r3, r7, r5
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001438:	197b      	adds	r3, r7, r5
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <MX_ADC_Init+0xe0>)
 800143c:	0019      	movs	r1, r3
 800143e:	0010      	movs	r0, r2
 8001440:	f003 fc5e 	bl	8004d00 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001444:	193b      	adds	r3, r7, r4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	0192      	lsls	r2, r2, #6
 8001456:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2201      	movs	r2, #1
 800145c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800145e:	193b      	adds	r3, r7, r4
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001464:	193b      	adds	r3, r7, r4
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <MX_ADC_Init+0xe0>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f003 fc7e 	bl	8004d6c <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_ADC_Init+0xe0>)
 8001472:	2100      	movs	r1, #0
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ff49 	bl	800130c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <MX_ADC_Init+0xe0>)
 800147c:	2100      	movs	r1, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff ff32 	bl	80012e8 <LL_ADC_SetSamplingTimeCommonChannels>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b010      	add	sp, #64	; 0x40
 800148a:	bdb0      	pop	{r4, r5, r7, pc}
 800148c:	40012400 	.word	0x40012400

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b7f      	cmp	r3, #127	; 0x7f
 80014a2:	d809      	bhi.n	80014b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	001a      	movs	r2, r3
 80014aa:	231f      	movs	r3, #31
 80014ac:	401a      	ands	r2, r3
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_EnableIRQ+0x30>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	4091      	lsls	r1, r2
 80014b4:	000a      	movs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
  }
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d828      	bhi.n	800152c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014da:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <__NVIC_SetPriority+0xd4>)
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	33c0      	adds	r3, #192	; 0xc0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	589b      	ldr	r3, [r3, r2]
 80014ea:	1dfa      	adds	r2, r7, #7
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	0011      	movs	r1, r2
 80014f0:	2203      	movs	r2, #3
 80014f2:	400a      	ands	r2, r1
 80014f4:	00d2      	lsls	r2, r2, #3
 80014f6:	21ff      	movs	r1, #255	; 0xff
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	43d2      	mvns	r2, r2
 80014fe:	401a      	ands	r2, r3
 8001500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	22ff      	movs	r2, #255	; 0xff
 8001508:	401a      	ands	r2, r3
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	0018      	movs	r0, r3
 8001510:	2303      	movs	r3, #3
 8001512:	4003      	ands	r3, r0
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	481f      	ldr	r0, [pc, #124]	; (8001598 <__NVIC_SetPriority+0xd4>)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	430a      	orrs	r2, r1
 8001524:	33c0      	adds	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800152a:	e031      	b.n	8001590 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <__NVIC_SetPriority+0xd8>)
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0019      	movs	r1, r3
 8001534:	230f      	movs	r3, #15
 8001536:	400b      	ands	r3, r1
 8001538:	3b08      	subs	r3, #8
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3306      	adds	r3, #6
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	3304      	adds	r3, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	0011      	movs	r1, r2
 800154c:	2203      	movs	r2, #3
 800154e:	400a      	ands	r2, r1
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	21ff      	movs	r1, #255	; 0xff
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	43d2      	mvns	r2, r2
 800155a:	401a      	ands	r2, r3
 800155c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	401a      	ands	r2, r3
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0018      	movs	r0, r3
 800156c:	2303      	movs	r3, #3
 800156e:	4003      	ands	r3, r0
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <__NVIC_SetPriority+0xd8>)
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	001c      	movs	r4, r3
 800157c:	230f      	movs	r3, #15
 800157e:	4023      	ands	r3, r4
 8001580:	3b08      	subs	r3, #8
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	430a      	orrs	r2, r1
 8001586:	3306      	adds	r3, #6
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	18c3      	adds	r3, r0, r3
 800158c:	3304      	adds	r3, #4
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b003      	add	sp, #12
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <LL_AHB1_GRP1_EnableClock>:
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80015aa:	6959      	ldr	r1, [r3, #20]
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000

080015cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <LL_SYSCFG_SetEXTISource+0x48>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	21ff      	movs	r1, #255	; 0xff
 80015dc:	400b      	ands	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	589b      	ldr	r3, [r3, r2]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	0c12      	lsrs	r2, r2, #16
 80015e8:	210f      	movs	r1, #15
 80015ea:	4091      	lsls	r1, r2
 80015ec:	000a      	movs	r2, r1
 80015ee:	43d2      	mvns	r2, r2
 80015f0:	401a      	ands	r2, r3
 80015f2:	0011      	movs	r1, r2
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	409a      	lsls	r2, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <LL_SYSCFG_SetEXTISource+0x48>)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	24ff      	movs	r4, #255	; 0xff
 8001602:	4023      	ands	r3, r4
 8001604:	430a      	orrs	r2, r1
 8001606:	3302      	adds	r3, #2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	501a      	str	r2, [r3, r0]
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b003      	add	sp, #12
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	40010000 	.word	0x40010000

08001618 <LL_GPIO_SetPinMode>:
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	435b      	muls	r3, r3
 800162c:	001a      	movs	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	189b      	adds	r3, r3, r2
 8001634:	43db      	mvns	r3, r3
 8001636:	400b      	ands	r3, r1
 8001638:	001a      	movs	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	435b      	muls	r3, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	434b      	muls	r3, r1
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <LL_GPIO_SetPinPull>:
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68d9      	ldr	r1, [r3, #12]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	435b      	muls	r3, r3
 8001664:	001a      	movs	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	189b      	adds	r3, r3, r2
 800166c:	43db      	mvns	r3, r3
 800166e:	400b      	ands	r3, r1
 8001670:	001a      	movs	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	435b      	muls	r3, r3
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	434b      	muls	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	60da      	str	r2, [r3, #12]
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <LL_GPIO_ResetOutputPin>:
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016a6:	2418      	movs	r4, #24
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	0018      	movs	r0, r3
 80016ac:	2308      	movs	r3, #8
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f004 f9a3 	bl	80059fc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	003b      	movs	r3, r7
 80016b8:	0018      	movs	r0, r3
 80016ba:	2318      	movs	r3, #24
 80016bc:	001a      	movs	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	f004 f99c 	bl	80059fc <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff ff69 	bl	80015a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	031b      	lsls	r3, r3, #12
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff ff64 	bl	80015a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	02db      	lsls	r3, r3, #11
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7ff ff5a 	bl	80015a0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 80016ec:	2390      	movs	r3, #144	; 0x90
 80016ee:	05db      	lsls	r3, r3, #23
 80016f0:	2110      	movs	r1, #16
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ffc8 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_D0_GPIO_Port, LCD_D0_Pin);
 80016f8:	4bc0      	ldr	r3, [pc, #768]	; (80019fc <MX_GPIO_Init+0x35c>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ffc3 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_D1_GPIO_Port, LCD_D1_Pin);
 8001702:	4bbe      	ldr	r3, [pc, #760]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001704:	2102      	movs	r1, #2
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ffbe 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_D2_GPIO_Port, LCD_D2_Pin);
 800170c:	4bbb      	ldr	r3, [pc, #748]	; (80019fc <MX_GPIO_Init+0x35c>)
 800170e:	2104      	movs	r1, #4
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffb9 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	4ab8      	ldr	r2, [pc, #736]	; (80019fc <MX_GPIO_Init+0x35c>)
 800171c:	0019      	movs	r1, r3
 800171e:	0010      	movs	r0, r2
 8001720:	f7ff ffb2 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_H_GPIO_Port, SPI2_H_Pin);
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	019b      	lsls	r3, r3, #6
 8001728:	4ab4      	ldr	r2, [pc, #720]	; (80019fc <MX_GPIO_Init+0x35c>)
 800172a:	0019      	movs	r1, r3
 800172c:	0010      	movs	r0, r2
 800172e:	f7ff ffab 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_W_GPIO_Port, SPI2_W_Pin);
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	01db      	lsls	r3, r3, #7
 8001736:	4ab1      	ldr	r2, [pc, #708]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001738:	0019      	movs	r1, r3
 800173a:	0010      	movs	r0, r2
 800173c:	f7ff ffa4 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_D3_GPIO_Port, LCD_D3_Pin);
 8001740:	4bae      	ldr	r3, [pc, #696]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001742:	2108      	movs	r1, #8
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ff9f 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_RS_GPIO_Port, LCD_RS_Pin);
 800174a:	4bac      	ldr	r3, [pc, #688]	; (80019fc <MX_GPIO_Init+0x35c>)
 800174c:	2110      	movs	r1, #16
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff ff9a 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_E_GPIO_Port, LCD_E_Pin);
 8001754:	4ba9      	ldr	r3, [pc, #676]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001756:	2120      	movs	r1, #32
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff95 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_LED_GPIO_Port, LCD_LED_Pin);
 800175e:	4ba7      	ldr	r3, [pc, #668]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff90 	bl	8001688 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001768:	003b      	movs	r3, r7
 800176a:	2210      	movs	r2, #16
 800176c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800176e:	003b      	movs	r3, r7
 8001770:	2201      	movs	r2, #1
 8001772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001774:	003b      	movs	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800177a:	003b      	movs	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001780:	003b      	movs	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001786:	003a      	movs	r2, r7
 8001788:	2390      	movs	r3, #144	; 0x90
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f003 fce8 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D0_Pin;
 8001794:	003b      	movs	r3, r7
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800179a:	003b      	movs	r3, r7
 800179c:	2201      	movs	r2, #1
 800179e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017a0:	003b      	movs	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017a6:	003b      	movs	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ac:	003b      	movs	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_D0_GPIO_Port, &GPIO_InitStruct);
 80017b2:	003b      	movs	r3, r7
 80017b4:	4a91      	ldr	r2, [pc, #580]	; (80019fc <MX_GPIO_Init+0x35c>)
 80017b6:	0019      	movs	r1, r3
 80017b8:	0010      	movs	r0, r2
 80017ba:	f003 fcd3 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D1_Pin;
 80017be:	003b      	movs	r3, r7
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017c4:	003b      	movs	r3, r7
 80017c6:	2201      	movs	r2, #1
 80017c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017ca:	003b      	movs	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017d0:	003b      	movs	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017d6:	003b      	movs	r3, r7
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
 80017dc:	003b      	movs	r3, r7
 80017de:	4a87      	ldr	r2, [pc, #540]	; (80019fc <MX_GPIO_Init+0x35c>)
 80017e0:	0019      	movs	r1, r3
 80017e2:	0010      	movs	r0, r2
 80017e4:	f003 fcbe 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D2_Pin;
 80017e8:	003b      	movs	r3, r7
 80017ea:	2204      	movs	r2, #4
 80017ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017ee:	003b      	movs	r3, r7
 80017f0:	2201      	movs	r2, #1
 80017f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017f4:	003b      	movs	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017fa:	003b      	movs	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001800:	003b      	movs	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_D2_GPIO_Port, &GPIO_InitStruct);
 8001806:	003b      	movs	r3, r7
 8001808:	4a7c      	ldr	r2, [pc, #496]	; (80019fc <MX_GPIO_Init+0x35c>)
 800180a:	0019      	movs	r1, r3
 800180c:	0010      	movs	r0, r2
 800180e:	f003 fca9 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001812:	003b      	movs	r3, r7
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	0152      	lsls	r2, r2, #5
 8001818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800181a:	003b      	movs	r3, r7
 800181c:	2201      	movs	r2, #1
 800181e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001820:	003b      	movs	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001826:	003b      	movs	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800182c:	003b      	movs	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001832:	003b      	movs	r3, r7
 8001834:	4a71      	ldr	r2, [pc, #452]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001836:	0019      	movs	r1, r3
 8001838:	0010      	movs	r0, r2
 800183a:	f003 fc93 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_H_Pin;
 800183e:	003b      	movs	r3, r7
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0192      	lsls	r2, r2, #6
 8001844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001846:	003b      	movs	r3, r7
 8001848:	2201      	movs	r2, #1
 800184a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800184c:	003b      	movs	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001852:	003b      	movs	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001858:	003b      	movs	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI2_H_GPIO_Port, &GPIO_InitStruct);
 800185e:	003b      	movs	r3, r7
 8001860:	4a66      	ldr	r2, [pc, #408]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001862:	0019      	movs	r1, r3
 8001864:	0010      	movs	r0, r2
 8001866:	f003 fc7d 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_W_Pin;
 800186a:	003b      	movs	r3, r7
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	01d2      	lsls	r2, r2, #7
 8001870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001872:	003b      	movs	r3, r7
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001878:	003b      	movs	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800187e:	003b      	movs	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001884:	003b      	movs	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI2_W_GPIO_Port, &GPIO_InitStruct);
 800188a:	003b      	movs	r3, r7
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <MX_GPIO_Init+0x35c>)
 800188e:	0019      	movs	r1, r3
 8001890:	0010      	movs	r0, r2
 8001892:	f003 fc67 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Encoder_1_Pin;
 8001896:	003b      	movs	r3, r7
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800189c:	003b      	movs	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018a2:	003b      	movs	r3, r7
 80018a4:	2201      	movs	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 80018a8:	003b      	movs	r3, r7
 80018aa:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <MX_GPIO_Init+0x360>)
 80018ac:	0019      	movs	r1, r3
 80018ae:	0010      	movs	r0, r2
 80018b0:	f003 fc58 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D3_Pin;
 80018b4:	003b      	movs	r3, r7
 80018b6:	2208      	movs	r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018ba:	003b      	movs	r3, r7
 80018bc:	2201      	movs	r2, #1
 80018be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018c0:	003b      	movs	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c6:	003b      	movs	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018cc:	003b      	movs	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_D3_GPIO_Port, &GPIO_InitStruct);
 80018d2:	003b      	movs	r3, r7
 80018d4:	4a49      	ldr	r2, [pc, #292]	; (80019fc <MX_GPIO_Init+0x35c>)
 80018d6:	0019      	movs	r1, r3
 80018d8:	0010      	movs	r0, r2
 80018da:	f003 fc43 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80018de:	003b      	movs	r3, r7
 80018e0:	2210      	movs	r2, #16
 80018e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018e4:	003b      	movs	r3, r7
 80018e6:	2201      	movs	r2, #1
 80018e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018ea:	003b      	movs	r3, r7
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018f0:	003b      	movs	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018f6:	003b      	movs	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80018fc:	003b      	movs	r3, r7
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001900:	0019      	movs	r1, r3
 8001902:	0010      	movs	r0, r2
 8001904:	f003 fc2e 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8001908:	003b      	movs	r3, r7
 800190a:	2220      	movs	r2, #32
 800190c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800190e:	003b      	movs	r3, r7
 8001910:	2201      	movs	r2, #1
 8001912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001914:	003b      	movs	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800191a:	003b      	movs	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001920:	003b      	movs	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8001926:	003b      	movs	r3, r7
 8001928:	4a34      	ldr	r2, [pc, #208]	; (80019fc <MX_GPIO_Init+0x35c>)
 800192a:	0019      	movs	r1, r3
 800192c:	0010      	movs	r0, r2
 800192e:	f003 fc19 	bl	8005164 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 8001932:	003b      	movs	r3, r7
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001938:	003b      	movs	r3, r7
 800193a:	2201      	movs	r2, #1
 800193c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800193e:	003b      	movs	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001944:	003b      	movs	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194a:	003b      	movs	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 8001950:	003b      	movs	r3, r7
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <MX_GPIO_Init+0x35c>)
 8001954:	0019      	movs	r1, r3
 8001956:	0010      	movs	r0, r2
 8001958:	f003 fc04 	bl	8005164 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE5);
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <MX_GPIO_Init+0x364>)
 800195e:	0019      	movs	r1, r3
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff fe33 	bl	80015cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE6);
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <MX_GPIO_Init+0x368>)
 8001968:	0019      	movs	r1, r3
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fe2e 	bl	80015cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(Button_GPIO_Port, Button_Pin, LL_GPIO_PULL_UP);
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <MX_GPIO_Init+0x360>)
 8001972:	2201      	movs	r2, #1
 8001974:	2120      	movs	r1, #32
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fe6a 	bl	8001650 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(Encoder_0_GPIO_Port, Encoder_0_Pin, LL_GPIO_PULL_UP);
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_GPIO_Init+0x360>)
 800197e:	2201      	movs	r2, #1
 8001980:	2140      	movs	r1, #64	; 0x40
 8001982:	0018      	movs	r0, r3
 8001984:	f7ff fe64 	bl	8001650 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(Button_GPIO_Port, Button_Pin, LL_GPIO_MODE_INPUT);
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_GPIO_Init+0x360>)
 800198a:	2200      	movs	r2, #0
 800198c:	2120      	movs	r1, #32
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff fe42 	bl	8001618 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(Encoder_0_GPIO_Port, Encoder_0_Pin, LL_GPIO_MODE_INPUT);
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_GPIO_Init+0x360>)
 8001996:	2200      	movs	r2, #0
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff fe3c 	bl	8001618 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80019a0:	0021      	movs	r1, r4
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2220      	movs	r2, #32
 80019a6:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2201      	movs	r2, #1
 80019ac:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2200      	movs	r2, #0
 80019b2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2202      	movs	r2, #2
 80019b8:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019ba:	000c      	movs	r4, r1
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	0018      	movs	r0, r3
 80019c0:	f003 fa8e 	bl	8004ee0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80019c4:	0021      	movs	r1, r4
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2201      	movs	r2, #1
 80019d0:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2200      	movs	r2, #0
 80019d6:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2202      	movs	r2, #2
 80019dc:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	0018      	movs	r0, r3
 80019e2:	f003 fa7d 	bl	8004ee0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80019e6:	2100      	movs	r1, #0
 80019e8:	2007      	movs	r0, #7
 80019ea:	f7ff fd6b 	bl	80014c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80019ee:	2007      	movs	r0, #7
 80019f0:	f7ff fd4e 	bl	8001490 <__NVIC_EnableIRQ>

}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b009      	add	sp, #36	; 0x24
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	00040001 	.word	0x00040001
 8001a08:	00080001 	.word	0x00080001

08001a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <LL_ADC_Enable+0x20>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	7fffffe8 	.word	0x7fffffe8

08001a30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <LL_ADC_Disable+0x20>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2202      	movs	r2, #2
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	7fffffe8 	.word	0x7fffffe8

08001a54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <LL_ADC_REG_StartConversion+0x20>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	2204      	movs	r2, #4
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	7fffffe8 	.word	0x7fffffe8

08001a78 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	b29b      	uxth	r3, r3
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CR2          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI48ON);
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <LL_RCC_HSI48_Enable+0x18>)
 8001a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <LL_RCC_HSI48_Enable+0x18>)
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	0249      	lsls	r1, r1, #9
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CR2          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI48RDY) == (RCC_CR2_HSI48RDY));
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_RCC_HSI48_IsReady+0x20>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	4013      	ands	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <LL_RCC_HSI48_IsReady+0x24>)
 8001abc:	4694      	mov	ip, r2
 8001abe:	4463      	add	r3, ip
 8001ac0:	425a      	negs	r2, r3
 8001ac2:	4153      	adcs	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	fffe0000 	.word	0xfffe0000

08001ad4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <LL_RCC_SetSysClkSource+0x24>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <LL_RCC_SetSysClkSource+0x24>)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <LL_RCC_GetSysClkSource+0x14>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	220c      	movs	r2, #12
 8001b06:	4013      	ands	r3, r2
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	22f0      	movs	r2, #240	; 0xf0
 8001b22:	4393      	bics	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000

08001b3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <LL_RCC_SetAPB1Prescaler+0x28>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	fffff8ff 	.word	0xfffff8ff

08001b68 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LL_FLASH_SetLatency+0x24>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <LL_FLASH_SetLatency+0x24>)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40022000 	.word	0x40022000

08001b90 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <LL_FLASH_GetLatency+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_SYSTICK_EnableIT+0x18>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_SYSTICK_EnableIT+0x18>)
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <LL_SYSTICK_DisableIT>:
  * @brief  Disable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_DisableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_DisableIT(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <LL_SYSTICK_DisableIT+0x18>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <LL_SYSTICK_DisableIT+0x18>)
 8001bce:	2102      	movs	r1, #2
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	0212      	lsls	r2, r2, #8
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <LL_GPIO_SetOutputPin>:
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <LL_GPIO_ResetOutputPin>:
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b08e      	sub	sp, #56	; 0x38
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9a:	f001 fe4d 	bl	8003938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9e:	f000 fd77 	bl	8002790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca2:	f7ff fcfd 	bl	80016a0 <MX_GPIO_Init>
  MX_ADC_Init();
 8001ca6:	f7ff fb81 	bl	80013ac <MX_ADC_Init>
  MX_SPI1_Init();
 8001caa:	f000 feb3 	bl	8002a14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001cae:	f000 fef1 	bl	8002a94 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001cb2:	f001 fccd 	bl	8003650 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cb6:	f001 fd87 	bl	80037c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* * * * * * * * * * * * * * * * * * * * */
  /* * * Aktivace PWM pro pajku        * * */
  /* * * * * * * * * * * * * * * * * * * * */
  LL_TIM_EnableCounter(TIM1);								// PWM pajky
 8001cba:	4beb      	ldr	r3, [pc, #940]	; (8002068 <main+0x3d4>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ff8f 	bl	8001be0 <LL_TIM_EnableCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8001cc2:	4be9      	ldr	r3, [pc, #932]	; (8002068 <main+0x3d4>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ffbd 	bl	8001c44 <LL_TIM_EnableAllOutputs>
  LL_TIM_SetAutoReload(TIM1, 1000);							// perioda PWM signalu v ns
 8001cca:	23fa      	movs	r3, #250	; 0xfa
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4ae6      	ldr	r2, [pc, #920]	; (8002068 <main+0x3d4>)
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	f7ff ff92 	bl	8001bfc <LL_TIM_SetAutoReload>
  LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8001cd8:	4be3      	ldr	r3, [pc, #908]	; (8002068 <main+0x3d4>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ff99 	bl	8001c14 <LL_TIM_OC_SetCompareCH1>
  TemperatureSet = 100;
 8001ce2:	4ae2      	ldr	r2, [pc, #904]	; (800206c <main+0x3d8>)
 8001ce4:	2364      	movs	r3, #100	; 0x64
 8001ce6:	8013      	strh	r3, [r2, #0]

  LL_mDelay( 250 );
 8001ce8:	20fa      	movs	r0, #250	; 0xfa
 8001cea:	f003 fe33 	bl	8005954 <LL_mDelay>

  LL_SYSTICK_EnableIT();							// aktivuje preruseni po 1ms
 8001cee:	f7ff ff5b 	bl	8001ba8 <LL_SYSTICK_EnableIT>
  LL_ADC_Enable(ADC1);
 8001cf2:	4bdf      	ldr	r3, [pc, #892]	; (8002070 <main+0x3dc>)
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fe89 	bl	8001a0c <LL_ADC_Enable>
  LL_ADC_REG_StartConversion(ADC1);
 8001cfa:	4bdd      	ldr	r3, [pc, #884]	; (8002070 <main+0x3dc>)
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fea9 	bl	8001a54 <LL_ADC_REG_StartConversion>

  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
  /* * * Precte hodnoty promennych z EEPROM        * * */
  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

  EEPROM_SPI_INIT(&hspi2);
 8001d02:	4bdc      	ldr	r3, [pc, #880]	; (8002074 <main+0x3e0>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7fe fca3 	bl	8000650 <EEPROM_SPI_INIT>
  EEPROM_SPI_ReadBuffer(EepromBuffer, (uint16_t)0x03, (uint16_t)22 );
 8001d0a:	4bdb      	ldr	r3, [pc, #876]	; (8002078 <main+0x3e4>)
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	2103      	movs	r1, #3
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe febd 	bl	8000a90 <EEPROM_SPI_ReadBuffer>
  if((EepromBuffer[18] == 0xA5) && (EepromBuffer[19] == 0x62)){
 8001d16:	4bd8      	ldr	r3, [pc, #864]	; (8002078 <main+0x3e4>)
 8001d18:	7c9b      	ldrb	r3, [r3, #18]
 8001d1a:	2ba5      	cmp	r3, #165	; 0xa5
 8001d1c:	d16f      	bne.n	8001dfe <main+0x16a>
 8001d1e:	4bd6      	ldr	r3, [pc, #856]	; (8002078 <main+0x3e4>)
 8001d20:	7cdb      	ldrb	r3, [r3, #19]
 8001d22:	2b62      	cmp	r3, #98	; 0x62
 8001d24:	d16b      	bne.n	8001dfe <main+0x16a>
	  TemperatureMin = EepromBuffer[ 0] * 256 + EepromBuffer[ 1];
 8001d26:	4bd4      	ldr	r3, [pc, #848]	; (8002078 <main+0x3e4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4bd1      	ldr	r3, [pc, #836]	; (8002078 <main+0x3e4>)
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	18d3      	adds	r3, r2, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4ad0      	ldr	r2, [pc, #832]	; (800207c <main+0x3e8>)
 8001d3c:	8013      	strh	r3, [r2, #0]
	  TemperatureMax = EepromBuffer[ 2] * 256 + EepromBuffer[ 3];
 8001d3e:	4bce      	ldr	r3, [pc, #824]	; (8002078 <main+0x3e4>)
 8001d40:	789b      	ldrb	r3, [r3, #2]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4bcb      	ldr	r3, [pc, #812]	; (8002078 <main+0x3e4>)
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	18d3      	adds	r3, r2, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4acb      	ldr	r2, [pc, #812]	; (8002080 <main+0x3ec>)
 8001d54:	8013      	strh	r3, [r2, #0]
	  TemperatureSet0 = EepromBuffer[ 4] * 256 + EepromBuffer[ 5];
 8001d56:	4bc8      	ldr	r3, [pc, #800]	; (8002078 <main+0x3e4>)
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4bc5      	ldr	r3, [pc, #788]	; (8002078 <main+0x3e4>)
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	18d3      	adds	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4ac6      	ldr	r2, [pc, #792]	; (8002084 <main+0x3f0>)
 8001d6c:	8013      	strh	r3, [r2, #0]
	  StandbyTemperature = EepromBuffer[ 6] * 256 + EepromBuffer[ 7];
 8001d6e:	4bc2      	ldr	r3, [pc, #776]	; (8002078 <main+0x3e4>)
 8001d70:	799b      	ldrb	r3, [r3, #6]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4bbf      	ldr	r3, [pc, #764]	; (8002078 <main+0x3e4>)
 8001d7a:	79db      	ldrb	r3, [r3, #7]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	18d3      	adds	r3, r2, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4ac1      	ldr	r2, [pc, #772]	; (8002088 <main+0x3f4>)
 8001d84:	8013      	strh	r3, [r2, #0]
	  StandbyDifference = EepromBuffer[ 8] * 256 + EepromBuffer[ 9];
 8001d86:	4bbc      	ldr	r3, [pc, #752]	; (8002078 <main+0x3e4>)
 8001d88:	7a1b      	ldrb	r3, [r3, #8]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4bb9      	ldr	r3, [pc, #740]	; (8002078 <main+0x3e4>)
 8001d92:	7a5b      	ldrb	r3, [r3, #9]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4abc      	ldr	r2, [pc, #752]	; (800208c <main+0x3f8>)
 8001d9c:	8013      	strh	r3, [r2, #0]
	  StandbyTimerMax = EepromBuffer[10] * 256 + EepromBuffer[11];
 8001d9e:	4bb6      	ldr	r3, [pc, #728]	; (8002078 <main+0x3e4>)
 8001da0:	7a9b      	ldrb	r3, [r3, #10]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4bb3      	ldr	r3, [pc, #716]	; (8002078 <main+0x3e4>)
 8001daa:	7adb      	ldrb	r3, [r3, #11]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4ab7      	ldr	r2, [pc, #732]	; (8002090 <main+0x3fc>)
 8001db4:	8013      	strh	r3, [r2, #0]
	  MeanMax = EepromBuffer[12] * 256 + EepromBuffer[13];
 8001db6:	4bb0      	ldr	r3, [pc, #704]	; (8002078 <main+0x3e4>)
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4bad      	ldr	r3, [pc, #692]	; (8002078 <main+0x3e4>)
 8001dc2:	7b5b      	ldrb	r3, [r3, #13]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4ab2      	ldr	r2, [pc, #712]	; (8002094 <main+0x400>)
 8001dcc:	8013      	strh	r3, [r2, #0]
	  Const1 = EepromBuffer[14] * 256 + EepromBuffer[15];
 8001dce:	4baa      	ldr	r3, [pc, #680]	; (8002078 <main+0x3e4>)
 8001dd0:	7b9b      	ldrb	r3, [r3, #14]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4ba7      	ldr	r3, [pc, #668]	; (8002078 <main+0x3e4>)
 8001dda:	7bdb      	ldrb	r3, [r3, #15]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	18d3      	adds	r3, r2, r3
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4aad      	ldr	r2, [pc, #692]	; (8002098 <main+0x404>)
 8001de4:	8013      	strh	r3, [r2, #0]
	  Const2 = EepromBuffer[16] * 256 + EepromBuffer[17];
 8001de6:	4ba4      	ldr	r3, [pc, #656]	; (8002078 <main+0x3e4>)
 8001de8:	7c1b      	ldrb	r3, [r3, #16]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4ba1      	ldr	r3, [pc, #644]	; (8002078 <main+0x3e4>)
 8001df2:	7c5b      	ldrb	r3, [r3, #17]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	18d3      	adds	r3, r2, r3
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4aa8      	ldr	r2, [pc, #672]	; (800209c <main+0x408>)
 8001dfc:	8013      	strh	r3, [r2, #0]

  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
  /* * * Aktivuje display a zahraje melodii        * * */
  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

  LCD_Init();
 8001dfe:	f7ff f9cb 	bl	8001198 <LCD_Init>
  LL_mDelay( 250 );
 8001e02:	20fa      	movs	r0, #250	; 0xfa
 8001e04:	f003 fda6 	bl	8005954 <LL_mDelay>
  LL_GPIO_SetOutputPin(LCD_LED_GPIO_Port, LCD_LED_Pin);		// zapne podsviceni
 8001e08:	4ba5      	ldr	r3, [pc, #660]	; (80020a0 <main+0x40c>)
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff ff28 	bl	8001c62 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);	// CS obvodu mereni teploty
 8001e12:	2390      	movs	r3, #144	; 0x90
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	2110      	movs	r1, #16
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ff22 	bl	8001c62 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);	// CS obvodu EEPROM
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	4a9f      	ldr	r2, [pc, #636]	; (80020a0 <main+0x40c>)
 8001e24:	0019      	movs	r1, r3
 8001e26:	0010      	movs	r0, r2
 8001e28:	f7ff ff1b 	bl	8001c62 <LL_GPIO_SetOutputPin>
  LCD_Init();
 8001e2c:	f7ff f9b4 	bl	8001198 <LCD_Init>
  LCD_Position( 0, 0 );
 8001e30:	2100      	movs	r1, #0
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff f976 	bl	8001124 <LCD_Position>
  LCD_WriteCString( " 03_Soldering   " );
 8001e38:	4b9a      	ldr	r3, [pc, #616]	; (80020a4 <main+0x410>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7ff f95c 	bl	80010f8 <LCD_WriteCString>
  LCD_Position( 1, 0 );
 8001e40:	2100      	movs	r1, #0
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff f96e 	bl	8001124 <LCD_Position>
  LCD_WriteCString( " 30.12.2022     " );
 8001e48:	4b97      	ldr	r3, [pc, #604]	; (80020a8 <main+0x414>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff f954 	bl	80010f8 <LCD_WriteCString>
  Music();
 8001e50:	f000 fd00 	bl	8002854 <Music>
  LCD_Clear();
 8001e54:	f7ff f9c0 	bl	80011d8 <LCD_Clear>
  while (1) {
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Ovlada teplomer                           * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  if((TimerStart > 4000) && (TimerStart < 5000)) TemperatureSet = TemperatureSet0;	// nastavi pozadovanou teplotu 4 sekundy od startu
 8001e58:	4b94      	ldr	r3, [pc, #592]	; (80020ac <main+0x418>)
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	23fa      	movs	r3, #250	; 0xfa
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d908      	bls.n	8001e76 <main+0x1e2>
 8001e64:	4b91      	ldr	r3, [pc, #580]	; (80020ac <main+0x418>)
 8001e66:	881a      	ldrh	r2, [r3, #0]
 8001e68:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <main+0x41c>)
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d803      	bhi.n	8001e76 <main+0x1e2>
 8001e6e:	4b85      	ldr	r3, [pc, #532]	; (8002084 <main+0x3f0>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <main+0x3d8>)
 8001e74:	8013      	strh	r3, [r2, #0]
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001e76:	2390      	movs	r3, #144	; 0x90
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f002 f80e 	bl	8003ea0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, Temperature, 4, 1000);								// precte data z termoclanku
 8001e84:	23fa      	movs	r3, #250	; 0xfa
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	498a      	ldr	r1, [pc, #552]	; (80020b4 <main+0x420>)
 8001e8a:	488b      	ldr	r0, [pc, #556]	; (80020b8 <main+0x424>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	f002 fa35 	bl	80042fc <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001e92:	2390      	movs	r3, #144	; 0x90
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	2201      	movs	r2, #1
 8001e98:	2110      	movs	r1, #16
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f002 f800 	bl	8003ea0 <HAL_GPIO_WritePin>
	  TemperatureIn = (Temperature[3] >> 4) | (Temperature[2] << 4);
 8001ea0:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <main+0x420>)
 8001ea2:	78db      	ldrb	r3, [r3, #3]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	4b82      	ldr	r3, [pc, #520]	; (80020b4 <main+0x420>)
 8001eac:	789b      	ldrb	r3, [r3, #2]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <main+0x428>)
 8001eb6:	601a      	str	r2, [r3, #0]
	  TemperatureIn = TemperatureIn * 625 / 1000;									// vypoctena teplota obvodu a zaokrouhleno na desetiny stupne
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <main+0x428>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	0152      	lsls	r2, r2, #5
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	18d2      	adds	r2, r2, r3
 8001ec6:	0093      	lsls	r3, r2, #2
 8001ec8:	18d2      	adds	r2, r2, r3
 8001eca:	23fa      	movs	r3, #250	; 0xfa
 8001ecc:	0099      	lsls	r1, r3, #2
 8001ece:	0010      	movs	r0, r2
 8001ed0:	f7fe f91a 	bl	8000108 <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <main+0x428>)
 8001eda:	601a      	str	r2, [r3, #0]
	  TemperatureOut = (Temperature[1] >> 2) | (Temperature[0] << 6);
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <main+0x420>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <main+0x420>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	019b      	lsls	r3, r3, #6
 8001eec:	4313      	orrs	r3, r2
 8001eee:	001a      	movs	r2, r3
 8001ef0:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <main+0x42c>)
 8001ef2:	601a      	str	r2, [r3, #0]
	  TemperatureOut &= 0x03FFF;
 8001ef4:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <main+0x42c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	049b      	lsls	r3, r3, #18
 8001efa:	0c9a      	lsrs	r2, r3, #18
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <main+0x42c>)
 8001efe:	601a      	str	r2, [r3, #0]
	  TemperatureOut = TemperatureOut * 25 / 10;									// vypoctena teplota clanku a zaokrouhleno na desetiny stupne
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <main+0x42c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	18d2      	adds	r2, r2, r3
 8001f0a:	0093      	lsls	r3, r2, #2
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	210a      	movs	r1, #10
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe f8f9 	bl	8000108 <__udivsi3>
 8001f16:	0003      	movs	r3, r0
 8001f18:	001a      	movs	r2, r3
 8001f1a:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <main+0x42c>)
 8001f1c:	601a      	str	r2, [r3, #0]
	  MeanArray[MeanPointer] = TemperatureOut;
 8001f1e:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <main+0x42c>)
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <main+0x430>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	001a      	movs	r2, r3
 8001f28:	b28b      	uxth	r3, r1
 8001f2a:	4967      	ldr	r1, [pc, #412]	; (80020c8 <main+0x434>)
 8001f2c:	0052      	lsls	r2, r2, #1
 8001f2e:	5253      	strh	r3, [r2, r1]
	  MeanAdd += MeanArray[MeanPointer];											// pricita k prumeru
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <main+0x430>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <main+0x434>)
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	5a9b      	ldrh	r3, [r3, r2]
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	4b63      	ldr	r3, [pc, #396]	; (80020cc <main+0x438>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	18d2      	adds	r2, r2, r3
 8001f42:	4b62      	ldr	r3, [pc, #392]	; (80020cc <main+0x438>)
 8001f44:	601a      	str	r2, [r3, #0]
	  if(MeanPointer < MeanMax) MeanPointer++; else MeanPointer = 0;
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <main+0x430>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <main+0x400>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d206      	bcs.n	8001f62 <main+0x2ce>
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <main+0x430>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4a59      	ldr	r2, [pc, #356]	; (80020c4 <main+0x430>)
 8001f5e:	7013      	strb	r3, [r2, #0]
 8001f60:	e002      	b.n	8001f68 <main+0x2d4>
 8001f62:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <main+0x430>)
 8001f64:	2300      	movs	r3, #0
 8001f66:	7013      	strb	r3, [r2, #0]
	  MeanAdd -= MeanArray[MeanPointer];											// odecita od prumeru posledni z pole
 8001f68:	4b58      	ldr	r3, [pc, #352]	; (80020cc <main+0x438>)
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <main+0x430>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4a55      	ldr	r2, [pc, #340]	; (80020c8 <main+0x434>)
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	5a9b      	ldrh	r3, [r3, r2]
 8001f76:	1aca      	subs	r2, r1, r3
 8001f78:	4b54      	ldr	r3, [pc, #336]	; (80020cc <main+0x438>)
 8001f7a:	601a      	str	r2, [r3, #0]
	  TemperatureMeasure = (uint16_t) (MeanAdd / MeanMax);							// vypocte prumer
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <main+0x438>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b44      	ldr	r3, [pc, #272]	; (8002094 <main+0x400>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f7fe f8be 	bl	8000108 <__udivsi3>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	001a      	movs	r2, r3
 8001f92:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <main+0x43c>)
 8001f94:	601a      	str	r2, [r3, #0]

	  if(((Temperature[3] & 0x0F) != 0x00) && ((Temperature[3] & 0x0F) != 0x02)) {	// hleda chybu teplomeru krome pripojeni ke GND
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <main+0x420>)
 8001f98:	78db      	ldrb	r3, [r3, #3]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d011      	beq.n	8001fc6 <main+0x332>
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <main+0x420>)
 8001fa4:	78db      	ldrb	r3, [r3, #3]
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d00a      	beq.n	8001fc6 <main+0x332>
		  System = 4;
 8001fb0:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <main+0x440>)
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	7013      	strb	r3, [r2, #0]
		  TemperatureMeasure = 6000;
 8001fb6:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <main+0x43c>)
 8001fb8:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <main+0x444>)
 8001fba:	6013      	str	r3, [r2, #0]
		  LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <main+0x3d4>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fe27 	bl	8001c14 <LL_TIM_OC_SetCompareCH1>
	  }
	  if(((Temperature[3] & 0x0F) == 0x00) && (System == 4)) System = 0;
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <main+0x420>)
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	001a      	movs	r2, r3
 8001fcc:	230f      	movs	r3, #15
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d106      	bne.n	8001fe0 <main+0x34c>
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <main+0x440>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d102      	bne.n	8001fe0 <main+0x34c>
 8001fda:	4a3e      	ldr	r2, [pc, #248]	; (80020d4 <main+0x440>)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	7013      	strb	r3, [r2, #0]

	  LL_mDelay(50);
 8001fe0:	2032      	movs	r0, #50	; 0x32
 8001fe2:	f003 fcb7 	bl	8005954 <LL_mDelay>

	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Meri napajeci napeti a vypne zarizeni     * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  AdResult = LL_ADC_REG_ReadConversionData12(ADC1);								// zmeri napajeci napeti
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <main+0x3dc>)
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fd45 	bl	8001a78 <LL_ADC_REG_ReadConversionData12>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <main+0x448>)
 8001ff4:	601a      	str	r2, [r3, #0]
	  AdResult = ( AdResult * 303 ) >> 14;											// y = 0.0185 x
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <main+0x448>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	189b      	adds	r3, r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	0b9a      	lsrs	r2, r3, #14
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <main+0x448>)
 800200c:	601a      	str	r2, [r3, #0]
	  if((AdResult < 15) && (TimerStart > 5000)) {									// low voltage, it will shut down
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <main+0x448>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b0e      	cmp	r3, #14
 8002014:	d86a      	bhi.n	80020ec <main+0x458>
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <main+0x418>)
 8002018:	881a      	ldrh	r2, [r3, #0]
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <main+0x44c>)
 800201c:	429a      	cmp	r2, r3
 800201e:	d965      	bls.n	80020ec <main+0x458>
		  LL_TIM_OC_SetCompareCH2(TIM1, 0);											// stops PWM heating
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <main+0x3d4>)
 8002022:	2100      	movs	r1, #0
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fe01 	bl	8001c2c <LL_TIM_OC_SetCompareCH2>
		  LL_ADC_Disable(ADC1);
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <main+0x3dc>)
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fcff 	bl	8001a30 <LL_ADC_Disable>
		  LL_GPIO_ResetOutputPin(LCD_LED_GPIO_Port, LCD_LED_Pin);					// turns off the backlight
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <main+0x40c>)
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fe1f 	bl	8001c7a <LL_GPIO_ResetOutputPin>
		  LCD_Position( 0, 0 );
 800203c:	2100      	movs	r1, #0
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff f870 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "Low voltage, it " );
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <main+0x450>)
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff f856 	bl	80010f8 <LCD_WriteCString>
		  LCD_Position( 1, 0 );
 800204c:	2100      	movs	r1, #0
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff f868 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "will shut down  " );
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <main+0x454>)
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff f84e 	bl	80010f8 <LCD_WriteCString>
		  MusicEnd();
 800205c:	f000 fc7c 	bl	8002958 <MusicEnd>
		  LL_SYSTICK_DisableIT();													// stops SYSTICK
 8002060:	f7ff fdb0 	bl	8001bc4 <LL_SYSTICK_DisableIT>
		  while (1) {}																// vypinani je dokonceno
 8002064:	e7fe      	b.n	8002064 <main+0x3d0>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	40012c00 	.word	0x40012c00
 800206c:	20000008 	.word	0x20000008
 8002070:	40012400 	.word	0x40012400
 8002074:	20000288 	.word	0x20000288
 8002078:	20000204 	.word	0x20000204
 800207c:	20000002 	.word	0x20000002
 8002080:	20000004 	.word	0x20000004
 8002084:	20000006 	.word	0x20000006
 8002088:	2000000a 	.word	0x2000000a
 800208c:	2000000c 	.word	0x2000000c
 8002090:	2000000e 	.word	0x2000000e
 8002094:	20000000 	.word	0x20000000
 8002098:	20000010 	.word	0x20000010
 800209c:	20000012 	.word	0x20000012
 80020a0:	48000400 	.word	0x48000400
 80020a4:	08005a3c 	.word	0x08005a3c
 80020a8:	08005a50 	.word	0x08005a50
 80020ac:	20000044 	.word	0x20000044
 80020b0:	00001387 	.word	0x00001387
 80020b4:	20000048 	.word	0x20000048
 80020b8:	20000224 	.word	0x20000224
 80020bc:	2000004c 	.word	0x2000004c
 80020c0:	20000050 	.word	0x20000050
 80020c4:	200001e4 	.word	0x200001e4
 80020c8:	20000054 	.word	0x20000054
 80020cc:	200001e8 	.word	0x200001e8
 80020d0:	200001ec 	.word	0x200001ec
 80020d4:	20000040 	.word	0x20000040
 80020d8:	00001770 	.word	0x00001770
 80020dc:	200001f0 	.word	0x200001f0
 80020e0:	00001388 	.word	0x00001388
 80020e4:	08005a64 	.word	0x08005a64
 80020e8:	08005a78 	.word	0x08005a78

	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Zobrazeni na displeji v beznem rezimu     * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  switch(System & 0x0F) {														// promenna System je ovladana rotacnim koderem v programu preruseni
 80020ec:	4bc8      	ldr	r3, [pc, #800]	; (8002410 <main+0x77c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	230f      	movs	r3, #15
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d900      	bls.n	80020fc <main+0x468>
 80020fa:	e305      	b.n	8002708 <main+0xa74>
 80020fc:	009a      	lsls	r2, r3, #2
 80020fe:	4bc5      	ldr	r3, [pc, #788]	; (8002414 <main+0x780>)
 8002100:	18d3      	adds	r3, r2, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	469f      	mov	pc, r3
	  case 0: {
		  LCD_Position( 0, 0 );														// normalni zobrazeni
 8002106:	2100      	movs	r1, #0
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff f80b 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "Tsold = " );
 800210e:	4bc2      	ldr	r3, [pc, #776]	; (8002418 <main+0x784>)
 8002110:	0018      	movs	r0, r3
 8002112:	f7fe fff1 	bl	80010f8 <LCD_WriteCString>
		  LCD_PrTemp( TemperatureMeasure );											// namerena teplota
 8002116:	4bc1      	ldr	r3, [pc, #772]	; (800241c <main+0x788>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	0018      	movs	r0, r3
 800211e:	f7fe feb7 	bl	8000e90 <LCD_PrTemp>
		  LCD_WriteCString( " " );
 8002122:	4bbf      	ldr	r3, [pc, #764]	; (8002420 <main+0x78c>)
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe ffe7 	bl	80010f8 <LCD_WriteCString>
		  LCD_Position( 1, 0 );
 800212a:	2100      	movs	r1, #0
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe fff9 	bl	8001124 <LCD_Position>
		  LCD_PrTemp( TemperatureSet );													// pozadovana teplota
 8002132:	4bbc      	ldr	r3, [pc, #752]	; (8002424 <main+0x790>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe feaa 	bl	8000e90 <LCD_PrTemp>
		  LCD_WriteCString( "P =" );
 800213c:	4bba      	ldr	r3, [pc, #744]	; (8002428 <main+0x794>)
 800213e:	0018      	movs	r0, r3
 8002140:	f7fe ffda 	bl	80010f8 <LCD_WriteCString>
		  LCD_PrintNumber(SolderPWM / 10, 3, 0);									// vykon zaokruhleny na cela procenta
 8002144:	4bb9      	ldr	r3, [pc, #740]	; (800242c <main+0x798>)
 8002146:	2200      	movs	r2, #0
 8002148:	5e9b      	ldrsh	r3, [r3, r2]
 800214a:	210a      	movs	r1, #10
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe f865 	bl	800021c <__divsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	b21b      	sxth	r3, r3
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
 8002158:	17db      	asrs	r3, r3, #31
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
 800215c:	2300      	movs	r3, #0
 800215e:	2203      	movs	r2, #3
 8002160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002162:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002164:	f7fe ff3d 	bl	8000fe2 <LCD_PrintNumber>
		  LCD_WriteCString( "% " );													// konec normalniho zobrazeni
 8002168:	4bb1      	ldr	r3, [pc, #708]	; (8002430 <main+0x79c>)
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe ffc4 	bl	80010f8 <LCD_WriteCString>
		  break;
 8002170:	e2ca      	b.n	8002708 <main+0xa74>
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Zobrazeni na displeji v rezimu MENU       * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  case 1: {
		  LCD_Position( 0, 0 );														// zobrazeni MENU
 8002172:	2100      	movs	r1, #0
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe ffd5 	bl	8001124 <LCD_Position>
		  switch(Menu) {
 800217a:	4bae      	ldr	r3, [pc, #696]	; (8002434 <main+0x7a0>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b0d      	cmp	r3, #13
 8002180:	d900      	bls.n	8002184 <main+0x4f0>
 8002182:	e133      	b.n	80023ec <main+0x758>
 8002184:	009a      	lsls	r2, r3, #2
 8002186:	4bac      	ldr	r3, [pc, #688]	; (8002438 <main+0x7a4>)
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	469f      	mov	pc, r3
		  case 0: {
			  LCD_WriteCString( "1 Teplota Tmin  " );
 800218e:	4bab      	ldr	r3, [pc, #684]	; (800243c <main+0x7a8>)
 8002190:	0018      	movs	r0, r3
 8002192:	f7fe ffb1 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 8002196:	2100      	movs	r1, #0
 8002198:	2001      	movs	r0, #1
 800219a:	f7fe ffc3 	bl	8001124 <LCD_Position>
	  		  LCD_PrTemp( TemperatureMin );											// minimalni teplota, kterou lze nastavit
 800219e:	4ba8      	ldr	r3, [pc, #672]	; (8002440 <main+0x7ac>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7fe fe74 	bl	8000e90 <LCD_PrTemp>
	  		  LCD_WriteCString( "      " );
 80021a8:	4ba6      	ldr	r3, [pc, #664]	; (8002444 <main+0x7b0>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fe ffa4 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 80021b0:	e11c      	b.n	80023ec <main+0x758>
		  }
		  case 1: {
			  LCD_WriteCString( "2 Teplota Tmax  " );
 80021b2:	4ba5      	ldr	r3, [pc, #660]	; (8002448 <main+0x7b4>)
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7fe ff9f 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 80021ba:	2100      	movs	r1, #0
 80021bc:	2001      	movs	r0, #1
 80021be:	f7fe ffb1 	bl	8001124 <LCD_Position>
			  LCD_PrTemp( TemperatureMax );											// maximalni teplota, kteru lze nastavit
 80021c2:	4ba2      	ldr	r3, [pc, #648]	; (800244c <main+0x7b8>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7fe fe62 	bl	8000e90 <LCD_PrTemp>
			  LCD_WriteCString( "      " );
 80021cc:	4b9d      	ldr	r3, [pc, #628]	; (8002444 <main+0x7b0>)
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fe ff92 	bl	80010f8 <LCD_WriteCString>
			  break;
 80021d4:	e10a      	b.n	80023ec <main+0x758>
		  }
		  case 2: {
			  LCD_WriteCString( "3 Teplota Tset  " );
 80021d6:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <main+0x7bc>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f7fe ff8d 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 80021de:	2100      	movs	r1, #0
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7fe ff9f 	bl	8001124 <LCD_Position>
			  LCD_PrTemp( TemperatureSet0 );										// pozadovana teplota po zapnuti
 80021e6:	4b9b      	ldr	r3, [pc, #620]	; (8002454 <main+0x7c0>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fe50 	bl	8000e90 <LCD_PrTemp>
			  LCD_WriteCString( "      " );
 80021f0:	4b94      	ldr	r3, [pc, #592]	; (8002444 <main+0x7b0>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fe ff80 	bl	80010f8 <LCD_WriteCString>
			  break;
 80021f8:	e0f8      	b.n	80023ec <main+0x758>
		  }
		  case 3: {
	  		  LCD_WriteCString( "4 Teplota Standb" );
 80021fa:	4b97      	ldr	r3, [pc, #604]	; (8002458 <main+0x7c4>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fe ff7b 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 8002202:	2100      	movs	r1, #0
 8002204:	2001      	movs	r0, #1
 8002206:	f7fe ff8d 	bl	8001124 <LCD_Position>
	  		  LCD_PrTemp( StandbyTemperature );										// teplota ve Standby rezimu
 800220a:	4b94      	ldr	r3, [pc, #592]	; (800245c <main+0x7c8>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fe3e 	bl	8000e90 <LCD_PrTemp>
	  		  LCD_WriteCString( "      " );
 8002214:	4b8b      	ldr	r3, [pc, #556]	; (8002444 <main+0x7b0>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7fe ff6e 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 800221c:	e0e6      	b.n	80023ec <main+0x758>
		  }
		  case 4: {
			  LCD_WriteCString( "5 Standby Diff  " );
 800221e:	4b90      	ldr	r3, [pc, #576]	; (8002460 <main+0x7cc>)
 8002220:	0018      	movs	r0, r3
 8002222:	f7fe ff69 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 8002226:	2100      	movs	r1, #0
 8002228:	2001      	movs	r0, #1
 800222a:	f7fe ff7b 	bl	8001124 <LCD_Position>
			  LCD_PrPwm( StandbyDifference );										// rozdil teploty, ktery nesmi byt prekrocen, aby byl Standby rezim
 800222e:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <main+0x7d0>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	f7fe fda4 	bl	8000d80 <LCD_PrPwm>
			  LCD_WriteCString( "       " );
 8002238:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <main+0x7d4>)
 800223a:	0018      	movs	r0, r3
 800223c:	f7fe ff5c 	bl	80010f8 <LCD_WriteCString>
			  break;
 8002240:	e0d4      	b.n	80023ec <main+0x758>
		  }
		  case 5: {
			  LCD_WriteCString( "6 Standby timer " );
 8002242:	4b8a      	ldr	r3, [pc, #552]	; (800246c <main+0x7d8>)
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe ff57 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 800224a:	2100      	movs	r1, #0
 800224c:	2001      	movs	r0, #1
 800224e:	f7fe ff69 	bl	8001124 <LCD_Position>
			  LCD_PrintNumber( StandbyTimerMax, 4, 0 );								// cas, za ktery se prepina do Standby
 8002252:	4b87      	ldr	r3, [pc, #540]	; (8002470 <main+0x7dc>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	2300      	movs	r3, #0
 800225e:	2204      	movs	r2, #4
 8002260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002264:	f7fe febd 	bl	8000fe2 <LCD_PrintNumber>
			  LCD_WriteCString( " sec      " );
 8002268:	4b82      	ldr	r3, [pc, #520]	; (8002474 <main+0x7e0>)
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe ff44 	bl	80010f8 <LCD_WriteCString>
			  break;
 8002270:	e0bc      	b.n	80023ec <main+0x758>
		  }
		  case 6: {
			  LCD_WriteCString( "7 Velikost pole " );
 8002272:	4b81      	ldr	r3, [pc, #516]	; (8002478 <main+0x7e4>)
 8002274:	0018      	movs	r0, r3
 8002276:	f7fe ff3f 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 800227a:	2100      	movs	r1, #0
 800227c:	2001      	movs	r0, #1
 800227e:	f7fe ff51 	bl	8001124 <LCD_Position>
			  LCD_PrintNumber( MeanMax, 4, 0 );										// velikost pole pro prumerovani pri mereni
 8002282:	4b7e      	ldr	r3, [pc, #504]	; (800247c <main+0x7e8>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
 800228c:	2300      	movs	r3, #0
 800228e:	2204      	movs	r2, #4
 8002290:	6a38      	ldr	r0, [r7, #32]
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	f7fe fea5 	bl	8000fe2 <LCD_PrintNumber>
			  LCD_WriteCString( "           " );
 8002298:	4b79      	ldr	r3, [pc, #484]	; (8002480 <main+0x7ec>)
 800229a:	0018      	movs	r0, r3
 800229c:	f7fe ff2c 	bl	80010f8 <LCD_WriteCString>
			  break;
 80022a0:	e0a4      	b.n	80023ec <main+0x758>
		  }
		  case 7: {
	  		  LCD_WriteCString( "8 Proporcionalni" );
 80022a2:	4b78      	ldr	r3, [pc, #480]	; (8002484 <main+0x7f0>)
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7fe ff27 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 80022aa:	2100      	movs	r1, #0
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7fe ff39 	bl	8001124 <LCD_Position>
	  		  LCD_PrintNumber( Const1, 4, 0 );										// konstanta pro proporcionalni regulaci
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <main+0x7f4>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	2300      	movs	r3, #0
 80022be:	2204      	movs	r2, #4
 80022c0:	69b8      	ldr	r0, [r7, #24]
 80022c2:	69f9      	ldr	r1, [r7, #28]
 80022c4:	f7fe fe8d 	bl	8000fe2 <LCD_PrintNumber>
	  		  LCD_WriteCString( "           " );
 80022c8:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <main+0x7ec>)
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fe ff14 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 80022d0:	e08c      	b.n	80023ec <main+0x758>
		  }
		  case 8: {
	  		  LCD_WriteCString( "9 Integralni    " );
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <main+0x7f8>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7fe ff0f 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 80022da:	2100      	movs	r1, #0
 80022dc:	2001      	movs	r0, #1
 80022de:	f7fe ff21 	bl	8001124 <LCD_Position>
	  		  LCD_PrintNumber( Const2, 4, 0 );										// konstanta pro integralni regulaci
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <main+0x7fc>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	2300      	movs	r3, #0
 80022ee:	2204      	movs	r2, #4
 80022f0:	6938      	ldr	r0, [r7, #16]
 80022f2:	6979      	ldr	r1, [r7, #20]
 80022f4:	f7fe fe75 	bl	8000fe2 <LCD_PrintNumber>
	  		  LCD_WriteCString( "           " );
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <main+0x7ec>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fe fefc 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 8002300:	e074      	b.n	80023ec <main+0x758>
		  }
		  case 9: {
	  		  LCD_WriteCString( "10 Rozdil + int " );
 8002302:	4b64      	ldr	r3, [pc, #400]	; (8002494 <main+0x800>)
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe fef7 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 800230a:	2100      	movs	r1, #0
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe ff09 	bl	8001124 <LCD_Position>
	  		  LCD_PrintNumber( Difference, 4, 0 );									// vypisuje proporcionalni a integralni rozdil
 8002312:	4b61      	ldr	r3, [pc, #388]	; (8002498 <main+0x804>)
 8002314:	2200      	movs	r2, #0
 8002316:	5e9b      	ldrsh	r3, [r3, r2]
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	17db      	asrs	r3, r3, #31
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	2300      	movs	r3, #0
 8002320:	2204      	movs	r2, #4
 8002322:	68b8      	ldr	r0, [r7, #8]
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	f7fe fe5c 	bl	8000fe2 <LCD_PrintNumber>
	  		  LCD_WriteCString( "  " );
 800232a:	4b5c      	ldr	r3, [pc, #368]	; (800249c <main+0x808>)
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fee3 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_PrintNumber( DifferenceIntegral, 6, 0 );
 8002332:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <main+0x80c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	001c      	movs	r4, r3
 8002338:	17db      	asrs	r3, r3, #31
 800233a:	001d      	movs	r5, r3
 800233c:	2300      	movs	r3, #0
 800233e:	2206      	movs	r2, #6
 8002340:	0020      	movs	r0, r4
 8002342:	0029      	movs	r1, r5
 8002344:	f7fe fe4d 	bl	8000fe2 <LCD_PrintNumber>
	  		  break;
 8002348:	e050      	b.n	80023ec <main+0x758>
		  }
		  case 10: {
	  		  LCD_WriteCString( "11 Prumerovani  " );
 800234a:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <main+0x810>)
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe fed3 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 8002352:	2100      	movs	r1, #0
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe fee5 	bl	8001124 <LCD_Position>
	  		  LCD_PrTemp( TemperatureOut );											// vypisuje aktualni namerenou a prumernou teplotu
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <main+0x814>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	0018      	movs	r0, r3
 8002362:	f7fe fd95 	bl	8000e90 <LCD_PrTemp>
	  		  LCD_WriteCString( " " );
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <main+0x78c>)
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe fec5 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_PrTemp( TemperatureMeasure );
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <main+0x788>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	0018      	movs	r0, r3
 8002376:	f7fe fd8b 	bl	8000e90 <LCD_PrTemp>
	  		  break;
 800237a:	e037      	b.n	80023ec <main+0x758>
		  }
		  case 11: {
	  		  LCD_WriteCString( "12 Teplota okoli" );
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <main+0x818>)
 800237e:	0018      	movs	r0, r3
 8002380:	f7fe feba 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe fecc 	bl	8001124 <LCD_Position>
	  		  LCD_PrTemp( TemperatureIn );											// vypisuje teplotu okoli
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <main+0x81c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	0018      	movs	r0, r3
 8002394:	f7fe fd7c 	bl	8000e90 <LCD_PrTemp>
	  		  LCD_WriteCString( "       " );
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <main+0x7d4>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7fe feac 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 80023a0:	e024      	b.n	80023ec <main+0x758>
		  }
		  case 12: {
	  		  LCD_WriteCString( "Napajeci napeti:" );
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <main+0x820>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fe fea7 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 80023aa:	2100      	movs	r1, #0
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe feb9 	bl	8001124 <LCD_Position>
	  		  LCD_PrintNumber( AdResult, 2, 0);										// vypisuje napajeci napeti
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <main+0x824>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	2300      	movs	r3, #0
 80023be:	2202      	movs	r2, #2
 80023c0:	6838      	ldr	r0, [r7, #0]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f7fe fe0d 	bl	8000fe2 <LCD_PrintNumber>
	  		  LCD_WriteCString( " Voltu - - - " );
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <main+0x828>)
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fe94 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 80023d0:	e00c      	b.n	80023ec <main+0x758>
		  }
		  case 13: {
	  		  LCD_WriteCString( "Exit menu       " );								// konec MENU, promenna System pujde na hodnotu 2, aby se ulozilo do EEPROM
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <main+0x82c>)
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7fe fe8f 	bl	80010f8 <LCD_WriteCString>
	  		  LCD_Position( 1, 0 );
 80023da:	2100      	movs	r1, #0
 80023dc:	2001      	movs	r0, #1
 80023de:	f7fe fea1 	bl	8001124 <LCD_Position>
	  		  LCD_WriteCString( "                " );
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <main+0x830>)
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe fe87 	bl	80010f8 <LCD_WriteCString>
	  		  break;
 80023ea:	46c0      	nop			; (mov r8, r8)
		  }
		  }
		  if ((System == 0x11) && (Menu < 9)) {										// zobrazuje zmenu hodnot
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <main+0x77c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b11      	cmp	r3, #17
 80023f2:	d108      	bne.n	8002406 <main+0x772>
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <main+0x7a0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d804      	bhi.n	8002406 <main+0x772>
			  LCD_WriteCString( "^" );
 80023fc:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <main+0x834>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fe fe7a 	bl	80010f8 <LCD_WriteCString>
		  } else {
			  LCD_WriteCString( " " );
		  }
		  break;
 8002404:	e180      	b.n	8002708 <main+0xa74>
			  LCD_WriteCString( " " );
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <main+0x78c>)
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe fe75 	bl	80010f8 <LCD_WriteCString>
		  break;
 800240e:	e17b      	b.n	8002708 <main+0xa74>
 8002410:	20000040 	.word	0x20000040
 8002414:	08005cb0 	.word	0x08005cb0
 8002418:	08005a8c 	.word	0x08005a8c
 800241c:	200001ec 	.word	0x200001ec
 8002420:	08005a98 	.word	0x08005a98
 8002424:	20000008 	.word	0x20000008
 8002428:	08005a9c 	.word	0x08005a9c
 800242c:	20000200 	.word	0x20000200
 8002430:	08005aa0 	.word	0x08005aa0
 8002434:	20000041 	.word	0x20000041
 8002438:	08005cc4 	.word	0x08005cc4
 800243c:	08005aa4 	.word	0x08005aa4
 8002440:	20000002 	.word	0x20000002
 8002444:	08005ab8 	.word	0x08005ab8
 8002448:	08005ac0 	.word	0x08005ac0
 800244c:	20000004 	.word	0x20000004
 8002450:	08005ad4 	.word	0x08005ad4
 8002454:	20000006 	.word	0x20000006
 8002458:	08005ae8 	.word	0x08005ae8
 800245c:	2000000a 	.word	0x2000000a
 8002460:	08005afc 	.word	0x08005afc
 8002464:	2000000c 	.word	0x2000000c
 8002468:	08005b10 	.word	0x08005b10
 800246c:	08005b18 	.word	0x08005b18
 8002470:	2000000e 	.word	0x2000000e
 8002474:	08005b2c 	.word	0x08005b2c
 8002478:	08005b38 	.word	0x08005b38
 800247c:	20000000 	.word	0x20000000
 8002480:	08005b4c 	.word	0x08005b4c
 8002484:	08005b58 	.word	0x08005b58
 8002488:	20000010 	.word	0x20000010
 800248c:	08005b6c 	.word	0x08005b6c
 8002490:	20000012 	.word	0x20000012
 8002494:	08005b80 	.word	0x08005b80
 8002498:	200001f8 	.word	0x200001f8
 800249c:	08005b94 	.word	0x08005b94
 80024a0:	200001fc 	.word	0x200001fc
 80024a4:	08005b98 	.word	0x08005b98
 80024a8:	20000050 	.word	0x20000050
 80024ac:	08005bac 	.word	0x08005bac
 80024b0:	2000004c 	.word	0x2000004c
 80024b4:	08005bc0 	.word	0x08005bc0
 80024b8:	200001f0 	.word	0x200001f0
 80024bc:	08005bd4 	.word	0x08005bd4
 80024c0:	08005be4 	.word	0x08005be4
 80024c4:	08005bf8 	.word	0x08005bf8
 80024c8:	08005c0c 	.word	0x08005c0c
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Zobrazeni na displeji na konci MENU       * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  case 2: {
		  LCD_Position( 0, 0 );
 80024cc:	2100      	movs	r1, #0
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fe28 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "   W R I T E    " );
 80024d4:	4b93      	ldr	r3, [pc, #588]	; (8002724 <main+0xa90>)
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7fe fe0e 	bl	80010f8 <LCD_WriteCString>
		  LCD_Position( 1, 0 );
 80024dc:	2100      	movs	r1, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fe20 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "   E E P R O M  " );
 80024e4:	4b90      	ldr	r3, [pc, #576]	; (8002728 <main+0xa94>)
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fe fe06 	bl	80010f8 <LCD_WriteCString>
		  LL_mDelay( 500 );
 80024ec:	23fa      	movs	r3, #250	; 0xfa
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	0018      	movs	r0, r3
 80024f2:	f003 fa2f 	bl	8005954 <LL_mDelay>
		  LCD_Clear();
 80024f6:	f7fe fe6f 	bl	80011d8 <LCD_Clear>
		  System = 0;
 80024fa:	4a8c      	ldr	r2, [pc, #560]	; (800272c <main+0xa98>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	7013      	strb	r3, [r2, #0]

		  EepromBuffer[ 0] = TemperatureMin >> 8;										// zapise promenne do EEPROM
 8002500:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <main+0xa9c>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b29b      	uxth	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4a8a      	ldr	r2, [pc, #552]	; (8002734 <main+0xaa0>)
 800250c:	7013      	strb	r3, [r2, #0]
		  EepromBuffer[ 1] = (uint8_t) (TemperatureMin);
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <main+0xa9c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4a87      	ldr	r2, [pc, #540]	; (8002734 <main+0xaa0>)
 8002516:	7053      	strb	r3, [r2, #1]
		  EepromBuffer[ 2] = TemperatureMax >> 8;
 8002518:	4b87      	ldr	r3, [pc, #540]	; (8002738 <main+0xaa4>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b29b      	uxth	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4a84      	ldr	r2, [pc, #528]	; (8002734 <main+0xaa0>)
 8002524:	7093      	strb	r3, [r2, #2]
		  EepromBuffer[ 3] = (uint8_t) (TemperatureMax);
 8002526:	4b84      	ldr	r3, [pc, #528]	; (8002738 <main+0xaa4>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4a81      	ldr	r2, [pc, #516]	; (8002734 <main+0xaa0>)
 800252e:	70d3      	strb	r3, [r2, #3]
		  EepromBuffer[ 4] = TemperatureSet0 >> 8;
 8002530:	4b82      	ldr	r3, [pc, #520]	; (800273c <main+0xaa8>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	b29b      	uxth	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <main+0xaa0>)
 800253c:	7113      	strb	r3, [r2, #4]
		  EepromBuffer[ 5] = (uint8_t) (TemperatureSet0);
 800253e:	4b7f      	ldr	r3, [pc, #508]	; (800273c <main+0xaa8>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4a7b      	ldr	r2, [pc, #492]	; (8002734 <main+0xaa0>)
 8002546:	7153      	strb	r3, [r2, #5]
		  EepromBuffer[ 6] = StandbyTemperature >> 8;
 8002548:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <main+0xaac>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4a78      	ldr	r2, [pc, #480]	; (8002734 <main+0xaa0>)
 8002554:	7193      	strb	r3, [r2, #6]
		  EepromBuffer[ 7] = (uint8_t) (StandbyTemperature);
 8002556:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <main+0xaac>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4a75      	ldr	r2, [pc, #468]	; (8002734 <main+0xaa0>)
 800255e:	71d3      	strb	r3, [r2, #7]
		  EepromBuffer[ 8] = StandbyDifference >> 8;
 8002560:	4b78      	ldr	r3, [pc, #480]	; (8002744 <main+0xab0>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <main+0xaa0>)
 800256c:	7213      	strb	r3, [r2, #8]
		  EepromBuffer[ 9] = (uint8_t) (StandbyDifference);
 800256e:	4b75      	ldr	r3, [pc, #468]	; (8002744 <main+0xab0>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4a6f      	ldr	r2, [pc, #444]	; (8002734 <main+0xaa0>)
 8002576:	7253      	strb	r3, [r2, #9]
		  EepromBuffer[10] = StandbyTimerMax >> 8;
 8002578:	4b73      	ldr	r3, [pc, #460]	; (8002748 <main+0xab4>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <main+0xaa0>)
 8002584:	7293      	strb	r3, [r2, #10]
		  EepromBuffer[11] = (uint8_t) (StandbyTimerMax);
 8002586:	4b70      	ldr	r3, [pc, #448]	; (8002748 <main+0xab4>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4a69      	ldr	r2, [pc, #420]	; (8002734 <main+0xaa0>)
 800258e:	72d3      	strb	r3, [r2, #11]
		  EepromBuffer[12] = MeanMax >> 8;
 8002590:	4b6e      	ldr	r3, [pc, #440]	; (800274c <main+0xab8>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4a66      	ldr	r2, [pc, #408]	; (8002734 <main+0xaa0>)
 800259c:	7313      	strb	r3, [r2, #12]
		  EepromBuffer[13] = (uint8_t) (MeanMax);
 800259e:	4b6b      	ldr	r3, [pc, #428]	; (800274c <main+0xab8>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4a63      	ldr	r2, [pc, #396]	; (8002734 <main+0xaa0>)
 80025a6:	7353      	strb	r3, [r2, #13]
		  EepromBuffer[14] = Const1 >> 8;
 80025a8:	4b69      	ldr	r3, [pc, #420]	; (8002750 <main+0xabc>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4a60      	ldr	r2, [pc, #384]	; (8002734 <main+0xaa0>)
 80025b4:	7393      	strb	r3, [r2, #14]
		  EepromBuffer[15] = (uint8_t) (Const1);
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <main+0xabc>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <main+0xaa0>)
 80025be:	73d3      	strb	r3, [r2, #15]
		  EepromBuffer[16] = Const2 >> 8;
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <main+0xac0>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <main+0xaa0>)
 80025cc:	7413      	strb	r3, [r2, #16]
		  EepromBuffer[17] = (uint8_t) (Const2);
 80025ce:	4b61      	ldr	r3, [pc, #388]	; (8002754 <main+0xac0>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <main+0xaa0>)
 80025d6:	7453      	strb	r3, [r2, #17]
		  EepromBuffer[18] = 0xA5;
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <main+0xaa0>)
 80025da:	23a5      	movs	r3, #165	; 0xa5
 80025dc:	7493      	strb	r3, [r2, #18]
		  EepromBuffer[19] = 0x62;
 80025de:	4a55      	ldr	r2, [pc, #340]	; (8002734 <main+0xaa0>)
 80025e0:	2362      	movs	r3, #98	; 0x62
 80025e2:	74d3      	strb	r3, [r2, #19]

		  EEPROM_SPI_INIT(&hspi2);
 80025e4:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <main+0xac4>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fe f832 	bl	8000650 <EEPROM_SPI_INIT>
		  EEPROM_SPI_WriteBuffer(EepromBuffer, (uint16_t)0x03, (uint16_t)26 );
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <main+0xaa0>)
 80025ee:	221a      	movs	r2, #26
 80025f0:	2103      	movs	r1, #3
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fe f8be 	bl	8000774 <EEPROM_SPI_WriteBuffer>

		  break;
 80025f8:	e086      	b.n	8002708 <main+0xa74>
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Zobrazeni na displeji v rezimu Standby    * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  case 3: {
		  LCD_Position( 1, 0 );														// Standby zobrazeni a zadana teplota
 80025fa:	2100      	movs	r1, #0
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe fd91 	bl	8001124 <LCD_Position>
		  LCD_WriteCString( "Tsold = " );
 8002602:	4b56      	ldr	r3, [pc, #344]	; (800275c <main+0xac8>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7fe fd77 	bl	80010f8 <LCD_WriteCString>
		  LCD_PrTemp( TemperatureMeasure );
 800260a:	4b55      	ldr	r3, [pc, #340]	; (8002760 <main+0xacc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	0018      	movs	r0, r3
 8002612:	f7fe fc3d 	bl	8000e90 <LCD_PrTemp>
		  LCD_WriteCString( " " );
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <main+0xad0>)
 8002618:	0018      	movs	r0, r3
 800261a:	f7fe fd6d 	bl	80010f8 <LCD_WriteCString>
		  LCD_Position( 0, 0 );
 800261e:	2100      	movs	r1, #0
 8002620:	2000      	movs	r0, #0
 8002622:	f7fe fd7f 	bl	8001124 <LCD_Position>
		  LCD_PrTemp( TemperatureSet );
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <main+0xad4>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	f7fe fc30 	bl	8000e90 <LCD_PrTemp>
		  LCD_WriteCString( "* * Standby * * " );
 8002630:	4b4e      	ldr	r3, [pc, #312]	; (800276c <main+0xad8>)
 8002632:	0018      	movs	r0, r3
 8002634:	f7fe fd60 	bl	80010f8 <LCD_WriteCString>
		  TemperatureSet = TemperatureSetStandby;
 8002638:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <main+0xadc>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <main+0xad4>)
 800263e:	8013      	strh	r3, [r2, #0]
		  break;
 8002640:	e062      	b.n	8002708 <main+0xa74>
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */
	  /* * * Zobrazeni chyby teplomeru                 * * */
	  /* * * * * * * * * * * * * * * * * * * * * * * * * * */

	  case 4: {																		// zobrazeni kdyz je chyba teplomeru
		  switch(Temperature[3] & 0x0F) {
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <main+0xae0>)
 8002644:	78db      	ldrb	r3, [r3, #3]
 8002646:	001a      	movs	r2, r3
 8002648:	230f      	movs	r3, #15
 800264a:	4013      	ands	r3, r2
 800264c:	2b04      	cmp	r3, #4
 800264e:	d02b      	beq.n	80026a8 <main+0xa14>
 8002650:	dc3d      	bgt.n	80026ce <main+0xa3a>
 8002652:	2b01      	cmp	r3, #1
 8002654:	d002      	beq.n	800265c <main+0x9c8>
 8002656:	2b02      	cmp	r3, #2
 8002658:	d013      	beq.n	8002682 <main+0x9ee>
 800265a:	e038      	b.n	80026ce <main+0xa3a>
		  case 1: {
			  LCD_Clear();
 800265c:	f7fe fdbc 	bl	80011d8 <LCD_Clear>
			  LCD_Position( 0, 0 );
 8002660:	2100      	movs	r1, #0
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fd5e 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "!  E R R O R ! !" );
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <main+0xae4>)
 800266a:	0018      	movs	r0, r3
 800266c:	f7fe fd44 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 8002670:	2100      	movs	r1, #0
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fd56 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "Open circuit!   " );
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <main+0xae8>)
 800267a:	0018      	movs	r0, r3
 800267c:	f7fe fd3c 	bl	80010f8 <LCD_WriteCString>
			  break;
 8002680:	e037      	b.n	80026f2 <main+0xa5e>
		  }
		  case 2: {
			  LCD_Clear();
 8002682:	f7fe fda9 	bl	80011d8 <LCD_Clear>
			  LCD_Position( 0, 0 );
 8002686:	2100      	movs	r1, #0
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe fd4b 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "!  E R R O R ! !" );
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <main+0xae4>)
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe fd31 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 8002696:	2100      	movs	r1, #0
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe fd43 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "Short to GND!   " );
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <main+0xaec>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7fe fd29 	bl	80010f8 <LCD_WriteCString>
			  break;
 80026a6:	e024      	b.n	80026f2 <main+0xa5e>
		  }
		  case 4: {
			  LCD_Clear();
 80026a8:	f7fe fd96 	bl	80011d8 <LCD_Clear>
			  LCD_Position( 0, 0 );
 80026ac:	2100      	movs	r1, #0
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fd38 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "!  E R R O R ! !" );
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <main+0xae4>)
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fe fd1e 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 80026bc:	2100      	movs	r1, #0
 80026be:	2001      	movs	r0, #1
 80026c0:	f7fe fd30 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "Short to Vcc!   " );
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <main+0xaf0>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fe fd16 	bl	80010f8 <LCD_WriteCString>
			  break;
 80026cc:	e011      	b.n	80026f2 <main+0xa5e>
		  }
		  default: {
			  LCD_Clear();
 80026ce:	f7fe fd83 	bl	80011d8 <LCD_Clear>
			  LCD_Position( 0, 0 );
 80026d2:	2100      	movs	r1, #0
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fd25 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "!  E R R O R ! !" );
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <main+0xae4>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe fd0b 	bl	80010f8 <LCD_WriteCString>
			  LCD_Position( 1, 0 );
 80026e2:	2100      	movs	r1, #0
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe fd1d 	bl	8001124 <LCD_Position>
			  LCD_WriteCString( "* * * * * * * * " );
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <main+0xaf4>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe fd03 	bl	80010f8 <LCD_WriteCString>
		  }
		  }
		  Beep( 2000, 100);
 80026f2:	23fa      	movs	r3, #250	; 0xfa
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	2164      	movs	r1, #100	; 0x64
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 f87b 	bl	80027f4 <Beep>
		  LL_mDelay( 1000 );
 80026fe:	23fa      	movs	r3, #250	; 0xfa
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	0018      	movs	r0, r3
 8002704:	f003 f926 	bl	8005954 <LL_mDelay>
	  }
	  }
	  if(CounterTemperature == 1) {														// pocitadlo, ktere hlida dosazeni pozadovane teploty
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <main+0xaf8>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d001      	beq.n	8002714 <main+0xa80>
 8002710:	f7ff fba2 	bl	8001e58 <main+0x1c4>
		  CounterTemperature = 2;
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <main+0xaf8>)
 8002716:	2302      	movs	r3, #2
 8002718:	8013      	strh	r3, [r2, #0]
		  MusicUp();
 800271a:	f000 f949 	bl	80029b0 <MusicUp>
	  if((TimerStart > 4000) && (TimerStart < 5000)) TemperatureSet = TemperatureSet0;	// nastavi pozadovanou teplotu 4 sekundy od startu
 800271e:	f7ff fb9b 	bl	8001e58 <main+0x1c4>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	08005c10 	.word	0x08005c10
 8002728:	08005c24 	.word	0x08005c24
 800272c:	20000040 	.word	0x20000040
 8002730:	20000002 	.word	0x20000002
 8002734:	20000204 	.word	0x20000204
 8002738:	20000004 	.word	0x20000004
 800273c:	20000006 	.word	0x20000006
 8002740:	2000000a 	.word	0x2000000a
 8002744:	2000000c 	.word	0x2000000c
 8002748:	2000000e 	.word	0x2000000e
 800274c:	20000000 	.word	0x20000000
 8002750:	20000010 	.word	0x20000010
 8002754:	20000012 	.word	0x20000012
 8002758:	20000288 	.word	0x20000288
 800275c:	08005a8c 	.word	0x08005a8c
 8002760:	200001ec 	.word	0x200001ec
 8002764:	08005a98 	.word	0x08005a98
 8002768:	20000008 	.word	0x20000008
 800276c:	08005c38 	.word	0x08005c38
 8002770:	200001f4 	.word	0x200001f4
 8002774:	20000048 	.word	0x20000048
 8002778:	08005c4c 	.word	0x08005c4c
 800277c:	08005c60 	.word	0x08005c60
 8002780:	08005c74 	.word	0x08005c74
 8002784:	08005c88 	.word	0x08005c88
 8002788:	08005c9c 	.word	0x08005c9c
 800278c:	20000202 	.word	0x20000202

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8002794:	2001      	movs	r0, #1
 8002796:	f7ff f9e7 	bl	8001b68 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	f7ff f9f8 	bl	8001b90 <LL_FLASH_GetLatency>
 80027a0:	0003      	movs	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d1fa      	bne.n	800279c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI48_Enable();
 80027a6:	f7ff f973 	bl	8001a90 <LL_RCC_HSI48_Enable>

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	f7ff f97e 	bl	8001aac <LL_RCC_HSI48_IsReady>
 80027b0:	0003      	movs	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d1fa      	bne.n	80027ac <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff f9ac 	bl	8001b14 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff f9bd 	bl	8001b3c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI48);
 80027c2:	2003      	movs	r0, #3
 80027c4:	f7ff f986 	bl	8001ad4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI48)
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	f7ff f997 	bl	8001afc <LL_RCC_GetSysClkSource>
 80027ce:	0003      	movs	r3, r0
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d1fa      	bne.n	80027ca <SystemClock_Config+0x3a>
  {

  }
  LL_SetSystemCoreClock(48000000);
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <SystemClock_Config+0x60>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f003 f8de 	bl	8005998 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80027dc:	2003      	movs	r0, #3
 80027de:	f001 f8bf 	bl	8003960 <HAL_InitTick>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80027e6:	f000 f90f 	bl	8002a08 <Error_Handler>
  }
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	02dc6c00 	.word	0x02dc6c00

080027f4 <Beep>:

/* USER CODE BEGIN 4 */
void Beep( uint32_t Tone, uint16_t Time) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	000a      	movs	r2, r1
 80027fe:	1cbb      	adds	r3, r7, #2
 8002800:	801a      	strh	r2, [r3, #0]
	Tone = 1000000 / Tone;
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4811      	ldr	r0, [pc, #68]	; (800284c <Beep+0x58>)
 8002806:	f7fd fc7f 	bl	8000108 <__udivsi3>
 800280a:	0003      	movs	r3, r0
 800280c:	607b      	str	r3, [r7, #4]
	LL_TIM_EnableCounter(TIM2);
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	0018      	movs	r0, r3
 8002814:	f7ff f9e4 	bl	8001be0 <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(TIM2);
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	05db      	lsls	r3, r3, #23
 800281c:	0018      	movs	r0, r3
 800281e:	f7ff fa11 	bl	8001c44 <LL_TIM_EnableAllOutputs>
	LL_TIM_SetAutoReload(TIM2, Tone);
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff f9e6 	bl	8001bfc <LL_TIM_SetAutoReload>
	LL_TIM_OC_SetCompareCH1(TIM2, 200);
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	05db      	lsls	r3, r3, #23
 8002834:	21c8      	movs	r1, #200	; 0xc8
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff f9ec 	bl	8001c14 <LL_TIM_OC_SetCompareCH1>
	TimerBeep = Time;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <Beep+0x5c>)
 800283e:	1cba      	adds	r2, r7, #2
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	801a      	strh	r2, [r3, #0]
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	000f4240 	.word	0x000f4240
 8002850:	20000042 	.word	0x20000042

08002854 <Music>:

void Music( void ) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	  Beep( TONE_H1, TIME_2a );
 8002858:	23be      	movs	r3, #190	; 0xbe
 800285a:	005a      	lsls	r2, r3, #1
 800285c:	23f7      	movs	r3, #247	; 0xf7
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ffc6 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_2 );
 8002868:	23c8      	movs	r3, #200	; 0xc8
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	0018      	movs	r0, r3
 800286e:	f003 f871 	bl	8005954 <LL_mDelay>
	  Beep( TONE_A1, TIME_3a );
 8002872:	23dc      	movs	r3, #220	; 0xdc
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	21b4      	movs	r1, #180	; 0xb4
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff ffbb 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_3 );
 800287e:	20c8      	movs	r0, #200	; 0xc8
 8002880:	f003 f868 	bl	8005954 <LL_mDelay>
	  Beep( TONE_A1, TIME_2a );
 8002884:	23be      	movs	r3, #190	; 0xbe
 8002886:	005a      	lsls	r2, r3, #1
 8002888:	23dc      	movs	r3, #220	; 0xdc
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	0011      	movs	r1, r2
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ffb0 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_2 );
 8002894:	23c8      	movs	r3, #200	; 0xc8
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	0018      	movs	r0, r3
 800289a:	f003 f85b 	bl	8005954 <LL_mDelay>
	  Beep( TONE_G1, TIME_3a );
 800289e:	23c4      	movs	r3, #196	; 0xc4
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	21b4      	movs	r1, #180	; 0xb4
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff ffa5 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_3 );
 80028aa:	20c8      	movs	r0, #200	; 0xc8
 80028ac:	f003 f852 	bl	8005954 <LL_mDelay>
	  Beep( TONE_G1, TIME_2a );
 80028b0:	23be      	movs	r3, #190	; 0xbe
 80028b2:	005a      	lsls	r2, r3, #1
 80028b4:	23c4      	movs	r3, #196	; 0xc4
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff ff9a 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_2 );
 80028c0:	23c8      	movs	r3, #200	; 0xc8
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	0018      	movs	r0, r3
 80028c6:	f003 f845 	bl	8005954 <LL_mDelay>
	  Beep( TONE_Fx1, TIME_3a );
 80028ca:	2374      	movs	r3, #116	; 0x74
 80028cc:	33ff      	adds	r3, #255	; 0xff
 80028ce:	21b4      	movs	r1, #180	; 0xb4
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff ff8f 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_3 );
 80028d6:	20c8      	movs	r0, #200	; 0xc8
 80028d8:	f003 f83c 	bl	8005954 <LL_mDelay>
	  Beep( TONE_A1, TIME_2a );
 80028dc:	23be      	movs	r3, #190	; 0xbe
 80028de:	005a      	lsls	r2, r3, #1
 80028e0:	23dc      	movs	r3, #220	; 0xdc
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff ff84 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_2 );
 80028ec:	23c8      	movs	r3, #200	; 0xc8
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	0018      	movs	r0, r3
 80028f2:	f003 f82f 	bl	8005954 <LL_mDelay>
	  Beep( TONE_G1, TIME_3a );
 80028f6:	23c4      	movs	r3, #196	; 0xc4
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	21b4      	movs	r1, #180	; 0xb4
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff79 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_3 );
 8002902:	20c8      	movs	r0, #200	; 0xc8
 8002904:	f003 f826 	bl	8005954 <LL_mDelay>
	  Beep( TONE_G1, TIME_2a );
 8002908:	23be      	movs	r3, #190	; 0xbe
 800290a:	005a      	lsls	r2, r3, #1
 800290c:	23c4      	movs	r3, #196	; 0xc4
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff ff6e 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_2 );
 8002918:	23c8      	movs	r3, #200	; 0xc8
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	0018      	movs	r0, r3
 800291e:	f003 f819 	bl	8005954 <LL_mDelay>
	  Beep( TONE_Fx1, TIME_3a );
 8002922:	2374      	movs	r3, #116	; 0x74
 8002924:	33ff      	adds	r3, #255	; 0xff
 8002926:	21b4      	movs	r1, #180	; 0xb4
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ff63 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_3 );
 800292e:	20c8      	movs	r0, #200	; 0xc8
 8002930:	f003 f810 	bl	8005954 <LL_mDelay>
	  Beep( TONE_E1, TIME_1a );
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <Music+0x100>)
 8002936:	23a5      	movs	r3, #165	; 0xa5
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	0011      	movs	r1, r2
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff ff59 	bl	80027f4 <Beep>
	  LL_mDelay( TIME_1 );
 8002942:	2396      	movs	r3, #150	; 0x96
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	0018      	movs	r0, r3
 8002948:	f003 f804 	bl	8005954 <LL_mDelay>
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	0000049c 	.word	0x0000049c

08002958 <MusicEnd>:

void MusicEnd(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	  Beep( TONE_C4, 50 );
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MusicEnd+0x4c>)
 800295e:	2132      	movs	r1, #50	; 0x32
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff ff47 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 8002966:	203c      	movs	r0, #60	; 0x3c
 8002968:	f002 fff4 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C3, 50 );
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MusicEnd+0x50>)
 800296e:	2132      	movs	r1, #50	; 0x32
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff ff3f 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 8002976:	203c      	movs	r0, #60	; 0x3c
 8002978:	f002 ffec 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C2, 50 );
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MusicEnd+0x54>)
 800297e:	2132      	movs	r1, #50	; 0x32
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff ff37 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 8002986:	203c      	movs	r0, #60	; 0x3c
 8002988:	f002 ffe4 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C1, 50 );
 800298c:	2383      	movs	r3, #131	; 0x83
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2132      	movs	r1, #50	; 0x32
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff2e 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 8002998:	203c      	movs	r0, #60	; 0x3c
 800299a:	f002 ffdb 	bl	8005954 <LL_mDelay>
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	0000082d 	.word	0x0000082d
 80029a8:	00000417 	.word	0x00000417
 80029ac:	0000020b 	.word	0x0000020b

080029b0 <MusicUp>:

void MusicUp(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	  Beep( TONE_C1, 50 );
 80029b4:	2383      	movs	r3, #131	; 0x83
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2132      	movs	r1, #50	; 0x32
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7ff ff1a 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 80029c0:	203c      	movs	r0, #60	; 0x3c
 80029c2:	f002 ffc7 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C2, 50 );
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <MusicUp+0x4c>)
 80029c8:	2132      	movs	r1, #50	; 0x32
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff ff12 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 80029d0:	203c      	movs	r0, #60	; 0x3c
 80029d2:	f002 ffbf 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C3, 50 );
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MusicUp+0x50>)
 80029d8:	2132      	movs	r1, #50	; 0x32
 80029da:	0018      	movs	r0, r3
 80029dc:	f7ff ff0a 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 80029e0:	203c      	movs	r0, #60	; 0x3c
 80029e2:	f002 ffb7 	bl	8005954 <LL_mDelay>
	  Beep( TONE_C4, 50 );
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <MusicUp+0x54>)
 80029e8:	2132      	movs	r1, #50	; 0x32
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff ff02 	bl	80027f4 <Beep>
	  LL_mDelay( 60 );
 80029f0:	203c      	movs	r0, #60	; 0x3c
 80029f2:	f002 ffaf 	bl	8005954 <LL_mDelay>
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	0000020b 	.word	0x0000020b
 8002a00:	00000417 	.word	0x00000417
 8002a04:	0000082d 	.word	0x0000082d

08002a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <Error_Handler+0x8>
	...

08002a14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <MX_SPI1_Init+0x7c>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a20:	2282      	movs	r2, #130	; 0x82
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	00d2      	lsls	r2, r2, #3
 8002a2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a30:	22e0      	movs	r2, #224	; 0xe0
 8002a32:	00d2      	lsls	r2, r2, #3
 8002a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a70:	2208      	movs	r2, #8
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <MX_SPI1_Init+0x78>)
 8002a76:	0018      	movs	r0, r3
 8002a78:	f001 fa30 	bl	8003edc <HAL_SPI_Init>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002a80:	f7ff ffc2 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	20000224 	.word	0x20000224
 8002a90:	40013000 	.word	0x40013000

08002a94 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <MX_SPI2_Init+0x78>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aa0:	2282      	movs	r2, #130	; 0x82
 8002aa2:	0052      	lsls	r2, r2, #1
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aae:	22e0      	movs	r2, #224	; 0xe0
 8002ab0:	00d2      	lsls	r2, r2, #3
 8002ab2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aca:	2220      	movs	r2, #32
 8002acc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aee:	2208      	movs	r2, #8
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002af4:	0018      	movs	r0, r3
 8002af6:	f001 f9f1 	bl	8003edc <HAL_SPI_Init>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f7ff ff83 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000288 	.word	0x20000288
 8002b0c:	40003800 	.word	0x40003800

08002b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b08d      	sub	sp, #52	; 0x34
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	241c      	movs	r4, #28
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	2314      	movs	r3, #20
 8002b20:	001a      	movs	r2, r3
 8002b22:	2100      	movs	r1, #0
 8002b24:	f002 ff6a 	bl	80059fc <memset>
  if(spiHandle->Instance==SPI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_SPI_MspInit+0x14c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d133      	bne.n	8002b9a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0149      	lsls	r1, r1, #5
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	619a      	str	r2, [r3, #24]
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0289      	lsls	r1, r1, #10
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	4013      	ands	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b6a:	0021      	movs	r1, r4
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2260      	movs	r2, #96	; 0x60
 8002b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2202      	movs	r2, #2
 8002b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2203      	movs	r2, #3
 8002b82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	187a      	adds	r2, r7, r1
 8002b8c:	2390      	movs	r3, #144	; 0x90
 8002b8e:	05db      	lsls	r3, r3, #23
 8002b90:	0011      	movs	r1, r2
 8002b92:	0018      	movs	r0, r3
 8002b94:	f001 f80c 	bl	8003bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b98:	e05b      	b.n	8002c52 <HAL_SPI_MspInit+0x142>
  else if(spiHandle->Instance==SPI2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_SPI_MspInit+0x154>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d156      	bne.n	8002c52 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	01c9      	lsls	r1, r1, #7
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	61da      	str	r2, [r3, #28]
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	01db      	lsls	r3, r3, #7
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	0309      	lsls	r1, r1, #12
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	02c9      	lsls	r1, r1, #11
 8002be6:	430a      	orrs	r2, r1
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_SPI_MspInit+0x150>)
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	02db      	lsls	r3, r3, #11
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bf8:	241c      	movs	r4, #28
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2202      	movs	r2, #2
 8002c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	2203      	movs	r2, #3
 8002c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	2201      	movs	r2, #1
 8002c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_SPI_MspInit+0x158>)
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	0010      	movs	r0, r2
 8002c20:	f000 ffc6 	bl	8003bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c24:	0021      	movs	r1, r4
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	00d2      	lsls	r2, r2, #3
 8002c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2202      	movs	r2, #2
 8002c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2205      	movs	r2, #5
 8002c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <HAL_SPI_MspInit+0x15c>)
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	0010      	movs	r0, r2
 8002c4e:	f000 ffaf 	bl	8003bb0 <HAL_GPIO_Init>
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b00d      	add	sp, #52	; 0x34
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40013000 	.word	0x40013000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40003800 	.word	0x40003800
 8002c68:	48000800 	.word	0x48000800
 8002c6c:	48000400 	.word	0x48000400

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	619a      	str	r2, [r3, #24]
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0549      	lsls	r1, r1, #21
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_MspInit+0x44>)
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	055b      	lsls	r3, r3, #21
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	425a      	negs	r2, r3
 8002cce:	4153      	adcs	r3, r2
 8002cd0:	b2db      	uxtb	r3, r3
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	615a      	str	r2, [r3, #20]
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40010400 	.word	0x40010400

08002cfc <LL_TIM_DisableCounter>:
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <LL_TIM_OC_SetCompareCH1>:
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <LL_TIM_DisableAllOutputs+0x1c>)
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	ffff7fff 	.word	0xffff7fff

08002d54 <LL_GPIO_IsInputPinSet>:
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4013      	ands	r3, r2
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	425a      	negs	r2, r3
 8002d6c:	4153      	adcs	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <NMI_Handler+0x4>

08002d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <HardFault_Handler+0x4>

08002d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d98:	b5b0      	push	{r4, r5, r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(TimerStart<10000) TimerStart++;															// pocita milisekundy od startu
 8002d9c:	4b89      	ldr	r3, [pc, #548]	; (8002fc4 <SysTick_Handler+0x22c>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	4a89      	ldr	r2, [pc, #548]	; (8002fc8 <SysTick_Handler+0x230>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d805      	bhi.n	8002db2 <SysTick_Handler+0x1a>
 8002da6:	4b87      	ldr	r3, [pc, #540]	; (8002fc4 <SysTick_Handler+0x22c>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <SysTick_Handler+0x22c>)
 8002db0:	801a      	strh	r2, [r3, #0]
	if(TimerSec<1000) TimerSec++; else TimerSec = 0;											// pocita sekundy
 8002db2:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <SysTick_Handler+0x234>)
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	23fa      	movs	r3, #250	; 0xfa
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d206      	bcs.n	8002dcc <SysTick_Handler+0x34>
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <SysTick_Handler+0x234>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <SysTick_Handler+0x234>)
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	e002      	b.n	8002dd2 <SysTick_Handler+0x3a>
 8002dcc:	4b7f      	ldr	r3, [pc, #508]	; (8002fcc <SysTick_Handler+0x234>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	801a      	strh	r2, [r3, #0]
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program ovladani piezomenice              * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */


	if(TimerBeep>0) {																			// pocita milisekundy kdy ma bezet PWM pro piezomenic
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <SysTick_Handler+0x238>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <SysTick_Handler+0x6a>
		TimerBeep--;
 8002dda:	4b7d      	ldr	r3, [pc, #500]	; (8002fd0 <SysTick_Handler+0x238>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <SysTick_Handler+0x238>)
 8002de4:	801a      	strh	r2, [r3, #0]
		if(TimerBeep==0) {
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <SysTick_Handler+0x238>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <SysTick_Handler+0x6a>
			LL_TIM_DisableAllOutputs(TIM2);														// konec tonu, zastavi se timer
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7ff ff9e 	bl	8002d34 <LL_TIM_DisableAllOutputs>
			LL_TIM_DisableCounter(TIM2);
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	05db      	lsls	r3, r3, #23
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff ff7d 	bl	8002cfc <LL_TIM_DisableCounter>

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program regulatoru teploty                * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */

	Difference = TemperatureSet - TemperatureMeasure;
 8002e02:	4b74      	ldr	r3, [pc, #464]	; (8002fd4 <SysTick_Handler+0x23c>)
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <SysTick_Handler+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <SysTick_Handler+0x244>)
 8002e14:	801a      	strh	r2, [r3, #0]
	if((Difference > 100) || (Difference <-100 )) DifferenceIntegral = 0;
 8002e16:	4b71      	ldr	r3, [pc, #452]	; (8002fdc <SysTick_Handler+0x244>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	dc04      	bgt.n	8002e2a <SysTick_Handler+0x92>
 8002e20:	4b6e      	ldr	r3, [pc, #440]	; (8002fdc <SysTick_Handler+0x244>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	5e9b      	ldrsh	r3, [r3, r2]
 8002e26:	3364      	adds	r3, #100	; 0x64
 8002e28:	da02      	bge.n	8002e30 <SysTick_Handler+0x98>
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
	if((Difference >-100) && (Difference <   0 ) && ( DifferenceIntegral > -400000 )) DifferenceIntegral--;
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <SysTick_Handler+0x244>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	5e9b      	ldrsh	r3, [r3, r2]
 8002e36:	3363      	adds	r3, #99	; 0x63
 8002e38:	db0e      	blt.n	8002e58 <SysTick_Handler+0xc0>
 8002e3a:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <SysTick_Handler+0x244>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da09      	bge.n	8002e58 <SysTick_Handler+0xc0>
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <SysTick_Handler+0x24c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	db04      	blt.n	8002e58 <SysTick_Handler+0xc0>
 8002e4e:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e56:	601a      	str	r2, [r3, #0]
	if((Difference >   0) && (Difference < 100 ) && ( DifferenceIntegral <  400000 )) DifferenceIntegral++;
 8002e58:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <SysTick_Handler+0x244>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dd0e      	ble.n	8002e80 <SysTick_Handler+0xe8>
 8002e62:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <SysTick_Handler+0x244>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	5e9b      	ldrsh	r3, [r3, r2]
 8002e68:	2b63      	cmp	r3, #99	; 0x63
 8002e6a:	dc09      	bgt.n	8002e80 <SysTick_Handler+0xe8>
 8002e6c:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5d      	ldr	r2, [pc, #372]	; (8002fe8 <SysTick_Handler+0x250>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	dc04      	bgt.n	8002e80 <SysTick_Handler+0xe8>
 8002e76:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <SysTick_Handler+0x248>)
 8002e7e:	601a      	str	r2, [r3, #0]
	if(Difference < 0) Difference = 0;
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <SysTick_Handler+0x244>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	5e9b      	ldrsh	r3, [r3, r2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da02      	bge.n	8002e90 <SysTick_Handler+0xf8>
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <SysTick_Handler+0x244>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	801a      	strh	r2, [r3, #0]
	SolderPWM = (uint16_t) ((Difference * Const1 / 100) + (DifferenceIntegral * Const2 / 10000));
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <SysTick_Handler+0x244>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	5e9b      	ldrsh	r3, [r3, r2]
 8002e96:	001a      	movs	r2, r3
 8002e98:	4b54      	ldr	r3, [pc, #336]	; (8002fec <SysTick_Handler+0x254>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	4353      	muls	r3, r2
 8002e9e:	2164      	movs	r1, #100	; 0x64
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fd f9bb 	bl	800021c <__divsi3>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	b29c      	uxth	r4, r3
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <SysTick_Handler+0x258>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	001a      	movs	r2, r3
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <SysTick_Handler+0x248>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4353      	muls	r3, r2
 8002eb6:	494f      	ldr	r1, [pc, #316]	; (8002ff4 <SysTick_Handler+0x25c>)
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fd f9af 	bl	800021c <__divsi3>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	18e3      	adds	r3, r4, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	4b4b      	ldr	r3, [pc, #300]	; (8002ff8 <SysTick_Handler+0x260>)
 8002eca:	801a      	strh	r2, [r3, #0]
	if(SolderPWM < 0) SolderPWM = 0;
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <SysTick_Handler+0x260>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da02      	bge.n	8002edc <SysTick_Handler+0x144>
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <SysTick_Handler+0x260>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]
	if((SolderPWM > 1000) || ( Difference > 400)) SolderPWM = 1000;
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <SysTick_Handler+0x260>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	5e9a      	ldrsh	r2, [r3, r2]
 8002ee2:	23fa      	movs	r3, #250	; 0xfa
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dc06      	bgt.n	8002ef8 <SysTick_Handler+0x160>
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <SysTick_Handler+0x244>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	5e9a      	ldrsh	r2, [r3, r2]
 8002ef0:	23c8      	movs	r3, #200	; 0xc8
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dd03      	ble.n	8002f00 <SysTick_Handler+0x168>
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <SysTick_Handler+0x260>)
 8002efa:	22fa      	movs	r2, #250	; 0xfa
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	801a      	strh	r2, [r3, #0]

	if(System != 4) LL_TIM_OC_SetCompareCH1(TIM1, SolderPWM);
 8002f00:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <SysTick_Handler+0x264>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d008      	beq.n	8002f1a <SysTick_Handler+0x182>
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <SysTick_Handler+0x260>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <SysTick_Handler+0x268>)
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff ff00 	bl	8002d1a <LL_TIM_OC_SetCompareCH1>

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program prepnuti do rezimu Standby        * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */

	if((Difference < 10) && (Difference > -10) && (CounterTemperature == 0) && (TimerStart > 8000)) {
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <SysTick_Handler+0x244>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	dc11      	bgt.n	8002f48 <SysTick_Handler+0x1b0>
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <SysTick_Handler+0x244>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	5e9b      	ldrsh	r3, [r3, r2]
 8002f2a:	3309      	adds	r3, #9
 8002f2c:	db0c      	blt.n	8002f48 <SysTick_Handler+0x1b0>
 8002f2e:	4b35      	ldr	r3, [pc, #212]	; (8003004 <SysTick_Handler+0x26c>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <SysTick_Handler+0x1b0>
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <SysTick_Handler+0x22c>)
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	23fa      	movs	r3, #250	; 0xfa
 8002f3c:	015b      	lsls	r3, r3, #5
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d902      	bls.n	8002f48 <SysTick_Handler+0x1b0>
		CounterTemperature = 1;
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <SysTick_Handler+0x26c>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	801a      	strh	r2, [r3, #0]
	}

	if((Difference < 10) && (Difference > -10) && (TimerStart > 8000) && (TimerSec == 500)) {
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <SysTick_Handler+0x244>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	dc17      	bgt.n	8002f82 <SysTick_Handler+0x1ea>
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <SysTick_Handler+0x244>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	5e9b      	ldrsh	r3, [r3, r2]
 8002f58:	3309      	adds	r3, #9
 8002f5a:	db12      	blt.n	8002f82 <SysTick_Handler+0x1ea>
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <SysTick_Handler+0x22c>)
 8002f5e:	881a      	ldrh	r2, [r3, #0]
 8002f60:	23fa      	movs	r3, #250	; 0xfa
 8002f62:	015b      	lsls	r3, r3, #5
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d90c      	bls.n	8002f82 <SysTick_Handler+0x1ea>
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <SysTick_Handler+0x234>)
 8002f6a:	881a      	ldrh	r2, [r3, #0]
 8002f6c:	23fa      	movs	r3, #250	; 0xfa
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d106      	bne.n	8002f82 <SysTick_Handler+0x1ea>
		TimerStandby++;
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <SysTick_Handler+0x270>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <SysTick_Handler+0x270>)
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e002      	b.n	8002f88 <SysTick_Handler+0x1f0>
	} else {
		TimerStandby = 0;
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <SysTick_Handler+0x270>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	801a      	strh	r2, [r3, #0]
	}
	if((TimerStandby == StandbyTimerMax) && (System == 0)) {
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <SysTick_Handler+0x270>)
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <SysTick_Handler+0x274>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d111      	bne.n	8002fb8 <SysTick_Handler+0x220>
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <SysTick_Handler+0x264>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <SysTick_Handler+0x220>
		TimerStandby = 0;
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <SysTick_Handler+0x270>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
		System = 3;
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <SysTick_Handler+0x264>)
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
		TemperatureSetStandby = TemperatureSet;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <SysTick_Handler+0x23c>)
 8002faa:	881a      	ldrh	r2, [r3, #0]
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <SysTick_Handler+0x278>)
 8002fae:	801a      	strh	r2, [r3, #0]
		TemperatureSet = StandbyTemperature;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <SysTick_Handler+0x27c>)
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <SysTick_Handler+0x23c>)
 8002fb6:	801a      	strh	r2, [r3, #0]
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fd06 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20000044 	.word	0x20000044
 8002fc8:	0000270f 	.word	0x0000270f
 8002fcc:	20000046 	.word	0x20000046
 8002fd0:	20000042 	.word	0x20000042
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	200001ec 	.word	0x200001ec
 8002fdc:	200001f8 	.word	0x200001f8
 8002fe0:	200001fc 	.word	0x200001fc
 8002fe4:	fff9e581 	.word	0xfff9e581
 8002fe8:	00061a7f 	.word	0x00061a7f
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	20000012 	.word	0x20000012
 8002ff4:	00002710 	.word	0x00002710
 8002ff8:	20000200 	.word	0x20000200
 8002ffc:	20000040 	.word	0x20000040
 8003000:	40012c00 	.word	0x40012c00
 8003004:	20000202 	.word	0x20000202
 8003008:	200001f6 	.word	0x200001f6
 800300c:	2000000e 	.word	0x2000000e
 8003010:	200001f4 	.word	0x200001f4
 8003014:	2000000a 	.word	0x2000000a

08003018 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 800301c:	2020      	movs	r0, #32
 800301e:	f7ff fe4b 	bl	8002cb8 <LL_EXTI_IsActiveFlag_0_31>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d039      	beq.n	800309a <EXTI4_15_IRQHandler+0x82>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8003026:	2020      	movs	r0, #32
 8003028:	f7ff fe5a 	bl	8002ce0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * preruseni tlacitka rotacniho koderu       * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
    if(TimerStart>3000) {
 800302c:	4bbb      	ldr	r3, [pc, #748]	; (800331c <EXTI4_15_IRQHandler+0x304>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	4abb      	ldr	r2, [pc, #748]	; (8003320 <EXTI4_15_IRQHandler+0x308>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d931      	bls.n	800309a <EXTI4_15_IRQHandler+0x82>
    	switch(System) {
 8003036:	4bbb      	ldr	r3, [pc, #748]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b11      	cmp	r3, #17
 800303c:	d827      	bhi.n	800308e <EXTI4_15_IRQHandler+0x76>
 800303e:	009a      	lsls	r2, r3, #2
 8003040:	4bb9      	ldr	r3, [pc, #740]	; (8003328 <EXTI4_15_IRQHandler+0x310>)
 8003042:	18d3      	adds	r3, r2, r3
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	469f      	mov	pc, r3
    		case 0: {
    			System = 1;							// pri stisku z normalniho rezimu na rezim MENU
 8003048:	4bb6      	ldr	r3, [pc, #728]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
    			break;
 800304e:	e01e      	b.n	800308e <EXTI4_15_IRQHandler+0x76>
    		}
    		case 1: {
    			if(Menu==13) System = 2;			// v MENU na konci, polozka 13 jde na rezim ukladani do EEPROM
 8003050:	4bb6      	ldr	r3, [pc, #728]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b0d      	cmp	r3, #13
 8003056:	d102      	bne.n	800305e <EXTI4_15_IRQHandler+0x46>
 8003058:	4bb2      	ldr	r3, [pc, #712]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
    			if(Menu < 9) System = 0x11;
 800305e:	4bb3      	ldr	r3, [pc, #716]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d812      	bhi.n	800308c <EXTI4_15_IRQHandler+0x74>
 8003066:	4baf      	ldr	r3, [pc, #700]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 8003068:	2211      	movs	r2, #17
 800306a:	701a      	strb	r2, [r3, #0]
    			break;
 800306c:	e00e      	b.n	800308c <EXTI4_15_IRQHandler+0x74>
    		}
    		case 2: {
    			break;								// z rezimu ukladani do EEPROM vyjde sam do normalniho rezimu
    		}
    		case 3: {
    			System = 0;
 800306e:	4bad      	ldr	r3, [pc, #692]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
    			TemperatureSet = TemperatureSetStandby;
 8003074:	4bae      	ldr	r3, [pc, #696]	; (8003330 <EXTI4_15_IRQHandler+0x318>)
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	4bae      	ldr	r3, [pc, #696]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 800307a:	801a      	strh	r2, [r3, #0]
    			CounterTemperature = 0;
 800307c:	4bae      	ldr	r3, [pc, #696]	; (8003338 <EXTI4_15_IRQHandler+0x320>)
 800307e:	2200      	movs	r2, #0
 8003080:	801a      	strh	r2, [r3, #0]
    			break;
 8003082:	e004      	b.n	800308e <EXTI4_15_IRQHandler+0x76>
    		}
    		case 0x11: {							// rezim zmeny jednolivych hodnot v MENU
    			System = 1;
 8003084:	4ba7      	ldr	r3, [pc, #668]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
    			break;
 800308a:	e000      	b.n	800308e <EXTI4_15_IRQHandler+0x76>
    			break;
 800308c:	46c0      	nop			; (mov r8, r8)
    		}
    	}
    	Beep( 2000, 10 );
 800308e:	23fa      	movs	r3, #250	; 0xfa
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	210a      	movs	r1, #10
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fbad 	bl	80027f4 <Beep>
    }
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 800309a:	2040      	movs	r0, #64	; 0x40
 800309c:	f7ff fe0c 	bl	8002cb8 <LL_EXTI_IsActiveFlag_0_31>
 80030a0:	1e03      	subs	r3, r0, #0
 80030a2:	d100      	bne.n	80030a6 <EXTI4_15_IRQHandler+0x8e>
 80030a4:	e1ab      	b.n	80033fe <EXTI4_15_IRQHandler+0x3e6>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80030a6:	2040      	movs	r0, #64	; 0x40
 80030a8:	f7ff fe1a 	bl	8002ce0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * preruseni pinu rotacniho koderu smerem vpravo     * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    if (!LL_GPIO_IsInputPinSet(Encoder_1_GPIO_Port, Encoder_1_Pin)) {
 80030ac:	4ba3      	ldr	r3, [pc, #652]	; (800333c <EXTI4_15_IRQHandler+0x324>)
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fe4f 	bl	8002d54 <LL_GPIO_IsInputPinSet>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d000      	beq.n	80030bc <EXTI4_15_IRQHandler+0xa4>
 80030ba:	e0b8      	b.n	800322e <EXTI4_15_IRQHandler+0x216>
    	switch(System) {
 80030bc:	4b99      	ldr	r3, [pc, #612]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b11      	cmp	r3, #17
 80030c2:	d025      	beq.n	8003110 <EXTI4_15_IRQHandler+0xf8>
 80030c4:	dd00      	ble.n	80030c8 <EXTI4_15_IRQHandler+0xb0>
 80030c6:	e194      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <EXTI4_15_IRQHandler+0xba>
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d010      	beq.n	80030f2 <EXTI4_15_IRQHandler+0xda>
 80030d0:	e18f      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		case 0: {
    			if (TemperatureSet < TemperatureMax) TemperatureSet += 10;		// pridava teplotu v normalnim rezimu
 80030d2:	4b98      	ldr	r3, [pc, #608]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	4b9a      	ldr	r3, [pc, #616]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d205      	bcs.n	80030ea <EXTI4_15_IRQHandler+0xd2>
 80030de:	4b95      	ldr	r3, [pc, #596]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	330a      	adds	r3, #10
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	4b93      	ldr	r3, [pc, #588]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 80030e8:	801a      	strh	r2, [r3, #0]
    			CounterTemperature = 0;
 80030ea:	4b93      	ldr	r3, [pc, #588]	; (8003338 <EXTI4_15_IRQHandler+0x320>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	801a      	strh	r2, [r3, #0]
    			break;
 80030f0:	e17f      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		}
    		case 1: {
    			if (Menu < 13) Menu++;											// chodi v MENU
 80030f2:	4b8e      	ldr	r3, [pc, #568]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d806      	bhi.n	8003108 <EXTI4_15_IRQHandler+0xf0>
 80030fa:	4b8c      	ldr	r3, [pc, #560]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b8a      	ldr	r3, [pc, #552]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003104:	701a      	strb	r2, [r3, #0]
    			else Menu = 0;
    			break;
 8003106:	e174      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    			else Menu = 0;
 8003108:	4b88      	ldr	r3, [pc, #544]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    			break;
 800310e:	e170      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		}
    		case 0x11: {														// meni hodnoty promennych v MENU
    			switch(Menu) {
 8003110:	4b86      	ldr	r3, [pc, #536]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d900      	bls.n	800311a <EXTI4_15_IRQHandler+0x102>
 8003118:	e168      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	4b89      	ldr	r3, [pc, #548]	; (8003344 <EXTI4_15_IRQHandler+0x32c>)
 800311e:	18d3      	adds	r3, r2, r3
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	469f      	mov	pc, r3
    				case 0: {
    					if (TemperatureMin < 4000) TemperatureMin++;
 8003124:	4b88      	ldr	r3, [pc, #544]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	23fa      	movs	r3, #250	; 0xfa
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	429a      	cmp	r2, r3
 800312e:	d300      	bcc.n	8003132 <EXTI4_15_IRQHandler+0x11a>
 8003130:	e06b      	b.n	800320a <EXTI4_15_IRQHandler+0x1f2>
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	4b83      	ldr	r3, [pc, #524]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 800313c:	801a      	strh	r2, [r3, #0]
    					break;
 800313e:	e064      	b.n	800320a <EXTI4_15_IRQHandler+0x1f2>
    				}
    				case 1: {
    					if (TemperatureMax < 4000) TemperatureMax++;
 8003140:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	23fa      	movs	r3, #250	; 0xfa
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	429a      	cmp	r2, r3
 800314a:	d300      	bcc.n	800314e <EXTI4_15_IRQHandler+0x136>
 800314c:	e05f      	b.n	800320e <EXTI4_15_IRQHandler+0x1f6>
 800314e:	4b7c      	ldr	r3, [pc, #496]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 8003158:	801a      	strh	r2, [r3, #0]
    					break;
 800315a:	e058      	b.n	800320e <EXTI4_15_IRQHandler+0x1f6>
    				}
    				case 2: {
    					if (TemperatureSet0 < 4000) TemperatureSet0++;
 800315c:	4b7b      	ldr	r3, [pc, #492]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	23fa      	movs	r3, #250	; 0xfa
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	429a      	cmp	r2, r3
 8003166:	d254      	bcs.n	8003212 <EXTI4_15_IRQHandler+0x1fa>
 8003168:	4b78      	ldr	r3, [pc, #480]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b76      	ldr	r3, [pc, #472]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 8003172:	801a      	strh	r2, [r3, #0]
    					break;
 8003174:	e04d      	b.n	8003212 <EXTI4_15_IRQHandler+0x1fa>
    				}
    				case 3: {
    					if (StandbyTemperature < 4000) StandbyTemperature++;
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	23fa      	movs	r3, #250	; 0xfa
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	429a      	cmp	r2, r3
 8003180:	d249      	bcs.n	8003216 <EXTI4_15_IRQHandler+0x1fe>
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b71      	ldr	r3, [pc, #452]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 800318c:	801a      	strh	r2, [r3, #0]
    					break;
 800318e:	e042      	b.n	8003216 <EXTI4_15_IRQHandler+0x1fe>
    				}
    				case 4: {
    					if (StandbyDifference < 500) StandbyDifference++;
 8003190:	4b70      	ldr	r3, [pc, #448]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	23fa      	movs	r3, #250	; 0xfa
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	d23e      	bcs.n	800321a <EXTI4_15_IRQHandler+0x202>
 800319c:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 80031a6:	801a      	strh	r2, [r3, #0]
    					break;
 80031a8:	e037      	b.n	800321a <EXTI4_15_IRQHandler+0x202>
    				}
    				case 5: {
    					if (StandbyTimerMax < 500) StandbyTimerMax++;
 80031aa:	4b6b      	ldr	r3, [pc, #428]	; (8003358 <EXTI4_15_IRQHandler+0x340>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	23fa      	movs	r3, #250	; 0xfa
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d233      	bcs.n	800321e <EXTI4_15_IRQHandler+0x206>
 80031b6:	4b68      	ldr	r3, [pc, #416]	; (8003358 <EXTI4_15_IRQHandler+0x340>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b66      	ldr	r3, [pc, #408]	; (8003358 <EXTI4_15_IRQHandler+0x340>)
 80031c0:	801a      	strh	r2, [r3, #0]
    					break;
 80031c2:	e02c      	b.n	800321e <EXTI4_15_IRQHandler+0x206>
    				}
    				case 6: {
    					if (MeanMax < 100) MeanMax++;
 80031c4:	4b65      	ldr	r3, [pc, #404]	; (800335c <EXTI4_15_IRQHandler+0x344>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b63      	cmp	r3, #99	; 0x63
 80031ca:	d82a      	bhi.n	8003222 <EXTI4_15_IRQHandler+0x20a>
 80031cc:	4b63      	ldr	r3, [pc, #396]	; (800335c <EXTI4_15_IRQHandler+0x344>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	4b61      	ldr	r3, [pc, #388]	; (800335c <EXTI4_15_IRQHandler+0x344>)
 80031d6:	801a      	strh	r2, [r3, #0]
    					break;
 80031d8:	e023      	b.n	8003222 <EXTI4_15_IRQHandler+0x20a>
    				}
    				case 7: {
    					if (Const1 < 5000) Const1++;
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <EXTI4_15_IRQHandler+0x348>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	4a61      	ldr	r2, [pc, #388]	; (8003364 <EXTI4_15_IRQHandler+0x34c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d820      	bhi.n	8003226 <EXTI4_15_IRQHandler+0x20e>
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <EXTI4_15_IRQHandler+0x348>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <EXTI4_15_IRQHandler+0x348>)
 80031ee:	801a      	strh	r2, [r3, #0]
    					break;
 80031f0:	e019      	b.n	8003226 <EXTI4_15_IRQHandler+0x20e>
    				}
    				case 8: {
    					if (Const2 < 5000) Const2++;
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <EXTI4_15_IRQHandler+0x350>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <EXTI4_15_IRQHandler+0x34c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d816      	bhi.n	800322a <EXTI4_15_IRQHandler+0x212>
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <EXTI4_15_IRQHandler+0x350>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <EXTI4_15_IRQHandler+0x350>)
 8003206:	801a      	strh	r2, [r3, #0]
    				    break;
 8003208:	e00f      	b.n	800322a <EXTI4_15_IRQHandler+0x212>
    					break;
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	e0ee      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	e0ec      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	e0ea      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	e0e8      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	e0e6      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	e0e4      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	e0e2      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    					break;
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	e0e0      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    				    break;
 800322a:	46c0      	nop			; (mov r8, r8)
    				}
    			}
    			break;
 800322c:	e0de      	b.n	80033ec <EXTI4_15_IRQHandler+0x3d4>
    	}
    } else {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    	/* * * preruseni pinu rotacniho koderu smerem vlevo      * * */
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    	switch(System) {
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <EXTI4_15_IRQHandler+0x30c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b11      	cmp	r3, #17
 8003234:	d025      	beq.n	8003282 <EXTI4_15_IRQHandler+0x26a>
 8003236:	dd00      	ble.n	800323a <EXTI4_15_IRQHandler+0x222>
 8003238:	e0db      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <EXTI4_15_IRQHandler+0x22c>
 800323e:	2b01      	cmp	r3, #1
 8003240:	d010      	beq.n	8003264 <EXTI4_15_IRQHandler+0x24c>
 8003242:	e0d6      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		case 0: {
    			if (TemperatureSet > TemperatureMin) TemperatureSet -= 10;
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d905      	bls.n	800325c <EXTI4_15_IRQHandler+0x244>
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	3b0a      	subs	r3, #10
 8003256:	b29a      	uxth	r2, r3
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <EXTI4_15_IRQHandler+0x31c>)
 800325a:	801a      	strh	r2, [r3, #0]
    			CounterTemperature = 0;
 800325c:	4b36      	ldr	r3, [pc, #216]	; (8003338 <EXTI4_15_IRQHandler+0x320>)
 800325e:	2200      	movs	r2, #0
 8003260:	801a      	strh	r2, [r3, #0]
    			break;
 8003262:	e0c6      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		}
    		case 1: {
    			if (Menu > 0) Menu--;
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <EXTI4_15_IRQHandler+0x262>
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003276:	701a      	strb	r2, [r3, #0]
    			else Menu = 12;
    			break;
 8003278:	e0bb      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    			else Menu = 12;
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 800327c:	220c      	movs	r2, #12
 800327e:	701a      	strb	r2, [r3, #0]
    			break;
 8003280:	e0b7      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    		}
    		case 0x11: {
    			switch(Menu) {
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <EXTI4_15_IRQHandler+0x314>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d900      	bls.n	800328c <EXTI4_15_IRQHandler+0x274>
 800328a:	e0b1      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <EXTI4_15_IRQHandler+0x354>)
 8003290:	18d3      	adds	r3, r2, r3
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	469f      	mov	pc, r3
    				case 0: {
    					if (TemperatureMin > 400) TemperatureMin--;
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	23c8      	movs	r3, #200	; 0xc8
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	429a      	cmp	r2, r3
 80032a0:	d800      	bhi.n	80032a4 <EXTI4_15_IRQHandler+0x28c>
 80032a2:	e091      	b.n	80033c8 <EXTI4_15_IRQHandler+0x3b0>
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <EXTI4_15_IRQHandler+0x330>)
 80032ae:	801a      	strh	r2, [r3, #0]
    					break;
 80032b0:	e08a      	b.n	80033c8 <EXTI4_15_IRQHandler+0x3b0>
    				}
    				case 1: {
    					if (TemperatureMax > 1000) TemperatureMax--;
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	23fa      	movs	r3, #250	; 0xfa
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d800      	bhi.n	80032c0 <EXTI4_15_IRQHandler+0x2a8>
 80032be:	e085      	b.n	80033cc <EXTI4_15_IRQHandler+0x3b4>
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <EXTI4_15_IRQHandler+0x328>)
 80032ca:	801a      	strh	r2, [r3, #0]
    					break;
 80032cc:	e07e      	b.n	80033cc <EXTI4_15_IRQHandler+0x3b4>
    				}
    				case 2: {
    					if (TemperatureSet0 > 400) TemperatureSet0--;
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	23c8      	movs	r3, #200	; 0xc8
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d800      	bhi.n	80032dc <EXTI4_15_IRQHandler+0x2c4>
 80032da:	e079      	b.n	80033d0 <EXTI4_15_IRQHandler+0x3b8>
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <EXTI4_15_IRQHandler+0x334>)
 80032e6:	801a      	strh	r2, [r3, #0]
    					break;
 80032e8:	e072      	b.n	80033d0 <EXTI4_15_IRQHandler+0x3b8>
    				}
    				case 3: {
    					if (StandbyTemperature > 200) StandbyTemperature--;
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	2bc8      	cmp	r3, #200	; 0xc8
 80032f0:	d800      	bhi.n	80032f4 <EXTI4_15_IRQHandler+0x2dc>
 80032f2:	e06f      	b.n	80033d4 <EXTI4_15_IRQHandler+0x3bc>
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <EXTI4_15_IRQHandler+0x338>)
 80032fe:	801a      	strh	r2, [r3, #0]
    					break;
 8003300:	e068      	b.n	80033d4 <EXTI4_15_IRQHandler+0x3bc>
    				}
    				case 4: {
    					if (StandbyDifference > 0) StandbyDifference--;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d100      	bne.n	800330c <EXTI4_15_IRQHandler+0x2f4>
 800330a:	e065      	b.n	80033d8 <EXTI4_15_IRQHandler+0x3c0>
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <EXTI4_15_IRQHandler+0x33c>)
 8003316:	801a      	strh	r2, [r3, #0]
    					break;
 8003318:	e05e      	b.n	80033d8 <EXTI4_15_IRQHandler+0x3c0>
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	20000044 	.word	0x20000044
 8003320:	00000bb8 	.word	0x00000bb8
 8003324:	20000040 	.word	0x20000040
 8003328:	08005cfc 	.word	0x08005cfc
 800332c:	20000041 	.word	0x20000041
 8003330:	200001f4 	.word	0x200001f4
 8003334:	20000008 	.word	0x20000008
 8003338:	20000202 	.word	0x20000202
 800333c:	48000800 	.word	0x48000800
 8003340:	20000004 	.word	0x20000004
 8003344:	08005d44 	.word	0x08005d44
 8003348:	20000002 	.word	0x20000002
 800334c:	20000006 	.word	0x20000006
 8003350:	2000000a 	.word	0x2000000a
 8003354:	2000000c 	.word	0x2000000c
 8003358:	2000000e 	.word	0x2000000e
 800335c:	20000000 	.word	0x20000000
 8003360:	20000010 	.word	0x20000010
 8003364:	00001387 	.word	0x00001387
 8003368:	20000012 	.word	0x20000012
 800336c:	08005d68 	.word	0x08005d68
    				}
    				case 5: {
    					if (StandbyTimerMax > 10) StandbyTimerMax--;
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <EXTI4_15_IRQHandler+0x3ec>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	2b0a      	cmp	r3, #10
 8003376:	d931      	bls.n	80033dc <EXTI4_15_IRQHandler+0x3c4>
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <EXTI4_15_IRQHandler+0x3ec>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <EXTI4_15_IRQHandler+0x3ec>)
 8003382:	801a      	strh	r2, [r3, #0]
    					break;
 8003384:	e02a      	b.n	80033dc <EXTI4_15_IRQHandler+0x3c4>
    				}
    				case 6: {
    					if (MeanMax > 4) MeanMax--;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <EXTI4_15_IRQHandler+0x3f0>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d928      	bls.n	80033e0 <EXTI4_15_IRQHandler+0x3c8>
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <EXTI4_15_IRQHandler+0x3f0>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <EXTI4_15_IRQHandler+0x3f0>)
 8003398:	801a      	strh	r2, [r3, #0]
    					break;
 800339a:	e021      	b.n	80033e0 <EXTI4_15_IRQHandler+0x3c8>
    				}
    				case 7: {
    					if (Const1 > 0) Const1--;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <EXTI4_15_IRQHandler+0x3f4>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01f      	beq.n	80033e4 <EXTI4_15_IRQHandler+0x3cc>
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <EXTI4_15_IRQHandler+0x3f4>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <EXTI4_15_IRQHandler+0x3f4>)
 80033ae:	801a      	strh	r2, [r3, #0]
    					break;
 80033b0:	e018      	b.n	80033e4 <EXTI4_15_IRQHandler+0x3cc>
    				}
    				case 8: {
    					if (Const2 > 0) Const2--;
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <EXTI4_15_IRQHandler+0x3f8>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <EXTI4_15_IRQHandler+0x3d0>
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <EXTI4_15_IRQHandler+0x3f8>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <EXTI4_15_IRQHandler+0x3f8>)
 80033c4:	801a      	strh	r2, [r3, #0]
    					break;
 80033c6:	e00f      	b.n	80033e8 <EXTI4_15_IRQHandler+0x3d0>
    					break;
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	e011      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	e00f      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	e00d      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	e00b      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	e009      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	e007      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	e005      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	e003      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    					break;
 80033e8:	46c0      	nop			; (mov r8, r8)
    				}
    			}
    			break;
 80033ea:	e001      	b.n	80033f0 <EXTI4_15_IRQHandler+0x3d8>
    			break;
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	e000      	b.n	80033f2 <EXTI4_15_IRQHandler+0x3da>
    			break;
 80033f0:	46c0      	nop			; (mov r8, r8)
    		}
    	}
    }
    Beep( 2000, 10 );
 80033f2:	23fa      	movs	r3, #250	; 0xfa
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	210a      	movs	r1, #10
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff f9fb 	bl	80027f4 <Beep>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	2000000e 	.word	0x2000000e
 8003408:	20000000 	.word	0x20000000
 800340c:	20000010 	.word	0x20000010
 8003410:	20000012 	.word	0x20000012

08003414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <LL_AHB1_GRP1_EnableClock>:
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <LL_AHB1_GRP1_EnableClock+0x28>)
 800342a:	6959      	ldr	r1, [r3, #20]
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <LL_AHB1_GRP1_EnableClock+0x28>)
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	430a      	orrs	r2, r1
 8003432:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <LL_AHB1_GRP1_EnableClock+0x28>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <LL_APB1_GRP1_EnableClock>:
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <LL_APB1_GRP1_EnableClock+0x28>)
 8003456:	69d9      	ldr	r1, [r3, #28]
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <LL_APB1_GRP1_EnableClock+0x28>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <LL_APB1_GRP1_EnableClock+0x28>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <LL_APB1_GRP2_EnableClock>:
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <LL_APB1_GRP2_EnableClock+0x28>)
 8003482:	6999      	ldr	r1, [r3, #24]
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <LL_APB1_GRP2_EnableClock+0x28>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <LL_APB1_GRP2_EnableClock+0x28>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <LL_TIM_EnableARRPreload>:
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <LL_TIM_OC_DisableFast>:
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d01e      	beq.n	800350e <LL_TIM_OC_DisableFast+0x4e>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d019      	beq.n	800350a <LL_TIM_OC_DisableFast+0x4a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d014      	beq.n	8003506 <LL_TIM_OC_DisableFast+0x46>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d00f      	beq.n	8003502 <LL_TIM_OC_DisableFast+0x42>
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d008      	beq.n	80034fe <LL_TIM_OC_DisableFast+0x3e>
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d101      	bne.n	80034fa <LL_TIM_OC_DisableFast+0x3a>
 80034f6:	2305      	movs	r3, #5
 80034f8:	e00a      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 80034fa:	2306      	movs	r3, #6
 80034fc:	e008      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_TIM_OC_DisableFast+0x50>
 800350e:	2300      	movs	r3, #0
 8003510:	200f      	movs	r0, #15
 8003512:	183a      	adds	r2, r7, r0
 8003514:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3318      	adds	r3, #24
 800351a:	0019      	movs	r1, r3
 800351c:	183b      	adds	r3, r7, r0
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <LL_TIM_OC_DisableFast+0x8c>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	18cb      	adds	r3, r1, r3
 8003526:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	183a      	adds	r2, r7, r0
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <LL_TIM_OC_DisableFast+0x90>)
 8003532:	5c8a      	ldrb	r2, [r1, r2]
 8003534:	0011      	movs	r1, r2
 8003536:	2204      	movs	r2, #4
 8003538:	408a      	lsls	r2, r1
 800353a:	43d2      	mvns	r2, r2
 800353c:	401a      	ands	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	08005d8c 	.word	0x08005d8c
 8003550:	08005d94 	.word	0x08005d94

08003554 <LL_TIM_OC_EnablePreload>:
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d01e      	beq.n	80035a2 <LL_TIM_OC_EnablePreload+0x4e>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d019      	beq.n	800359e <LL_TIM_OC_EnablePreload+0x4a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d014      	beq.n	800359a <LL_TIM_OC_EnablePreload+0x46>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d00f      	beq.n	8003596 <LL_TIM_OC_EnablePreload+0x42>
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	429a      	cmp	r2, r3
 800357e:	d008      	beq.n	8003592 <LL_TIM_OC_EnablePreload+0x3e>
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	429a      	cmp	r2, r3
 8003588:	d101      	bne.n	800358e <LL_TIM_OC_EnablePreload+0x3a>
 800358a:	2305      	movs	r3, #5
 800358c:	e00a      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 800358e:	2306      	movs	r3, #6
 8003590:	e008      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 8003592:	2304      	movs	r3, #4
 8003594:	e006      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 8003596:	2303      	movs	r3, #3
 8003598:	e004      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_TIM_OC_EnablePreload+0x50>
 80035a2:	2300      	movs	r3, #0
 80035a4:	200f      	movs	r0, #15
 80035a6:	183a      	adds	r2, r7, r0
 80035a8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3318      	adds	r3, #24
 80035ae:	0019      	movs	r1, r3
 80035b0:	183b      	adds	r3, r7, r0
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <LL_TIM_OC_EnablePreload+0x88>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	18cb      	adds	r3, r1, r3
 80035ba:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	183b      	adds	r3, r7, r0
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4906      	ldr	r1, [pc, #24]	; (80035e0 <LL_TIM_OC_EnablePreload+0x8c>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	0019      	movs	r1, r3
 80035ca:	2308      	movs	r3, #8
 80035cc:	408b      	lsls	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	08005d8c 	.word	0x08005d8c
 80035e0:	08005d94 	.word	0x08005d94

080035e4 <LL_TIM_SetClockSource>:
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <LL_TIM_SetClockSource+0x24>)
 80035f4:	401a      	ands	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	ffffbff8 	.word	0xffffbff8

0800360c <LL_TIM_SetTriggerOutput>:
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2270      	movs	r2, #112	; 0x70
 800361c:	4393      	bics	r3, r2
 800361e:	001a      	movs	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <LL_TIM_DisableMasterSlaveMode>:
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	4393      	bics	r3, r2
 8003640:	001a      	movs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b09b      	sub	sp, #108	; 0x6c
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003656:	2654      	movs	r6, #84	; 0x54
 8003658:	19bb      	adds	r3, r7, r6
 800365a:	0018      	movs	r0, r3
 800365c:	2314      	movs	r3, #20
 800365e:	001a      	movs	r2, r3
 8003660:	2100      	movs	r1, #0
 8003662:	f002 f9cb 	bl	80059fc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003666:	2434      	movs	r4, #52	; 0x34
 8003668:	193b      	adds	r3, r7, r4
 800366a:	0018      	movs	r0, r3
 800366c:	2320      	movs	r3, #32
 800366e:	001a      	movs	r2, r3
 8003670:	2100      	movs	r1, #0
 8003672:	f002 f9c3 	bl	80059fc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003676:	251c      	movs	r5, #28
 8003678:	197b      	adds	r3, r7, r5
 800367a:	0018      	movs	r0, r3
 800367c:	2318      	movs	r3, #24
 800367e:	001a      	movs	r2, r3
 8003680:	2100      	movs	r1, #0
 8003682:	f002 f9bb 	bl	80059fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	0018      	movs	r0, r3
 800368a:	2318      	movs	r3, #24
 800368c:	001a      	movs	r2, r3
 800368e:	2100      	movs	r1, #0
 8003690:	f002 f9b4 	bl	80059fc <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff feed 	bl	8003478 <LL_APB1_GRP2_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 800369e:	19bb      	adds	r3, r7, r6
 80036a0:	2230      	movs	r2, #48	; 0x30
 80036a2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80036a4:	0031      	movs	r1, r6
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	4a44      	ldr	r2, [pc, #272]	; (80037c0 <MX_TIM1_Init+0x170>)
 80036b0:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <MX_TIM1_Init+0x174>)
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f001 fe0b 	bl	80052e0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <MX_TIM1_Init+0x174>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fee9 	bl	80034a4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80036d2:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <MX_TIM1_Init+0x174>)
 80036d4:	2100      	movs	r1, #0
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ff84 	bl	80035e4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <MX_TIM1_Init+0x174>)
 80036de:	2101      	movs	r1, #1
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ff37 	bl	8003554 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80036e6:	0021      	movs	r1, r4
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2260      	movs	r2, #96	; 0x60
 80036ec:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	2201      	movs	r2, #1
 80036f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2202      	movs	r2, #2
 8003704:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2200      	movs	r2, #0
 800370a:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2200      	movs	r2, #0
 8003710:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2200      	movs	r2, #0
 8003716:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003718:	187b      	adds	r3, r7, r1
 800371a:	482a      	ldr	r0, [pc, #168]	; (80037c4 <MX_TIM1_Init+0x174>)
 800371c:	001a      	movs	r2, r3
 800371e:	2101      	movs	r1, #1
 8003720:	f001 fe60 	bl	80053e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <MX_TIM1_Init+0x174>)
 8003726:	2101      	movs	r1, #1
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff fec9 	bl	80034c0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <MX_TIM1_Init+0x174>)
 8003730:	2100      	movs	r1, #0
 8003732:	0018      	movs	r0, r3
 8003734:	f7ff ff6a 	bl	800360c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <MX_TIM1_Init+0x174>)
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff ff78 	bl	8003630 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003740:	0029      	movs	r1, r5
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2200      	movs	r2, #0
 800375e:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003760:	187b      	adds	r3, r7, r1
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	0192      	lsls	r2, r2, #6
 8003766:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	615a      	str	r2, [r3, #20]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800376e:	187b      	adds	r3, r7, r1
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <MX_TIM1_Init+0x174>)
 8003772:	0019      	movs	r1, r3
 8003774:	0010      	movs	r0, r2
 8003776:	f001 fe8f 	bl	8005498 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	029b      	lsls	r3, r3, #10
 800377e:	0018      	movs	r0, r3
 8003780:	f7ff fe4e 	bl	8003420 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = Heating_Pin;
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	0052      	lsls	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2202      	movs	r2, #2
 8003790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	2202      	movs	r2, #2
 80037a8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(Heating_GPIO_Port, &GPIO_InitStruct);
 80037aa:	1d3a      	adds	r2, r7, #4
 80037ac:	2390      	movs	r3, #144	; 0x90
 80037ae:	05db      	lsls	r3, r3, #23
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f001 fcd6 	bl	8005164 <LL_GPIO_Init>

}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b01b      	add	sp, #108	; 0x6c
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c0:	0000ffff 	.word	0x0000ffff
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	b094      	sub	sp, #80	; 0x50
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037ce:	253c      	movs	r5, #60	; 0x3c
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	0018      	movs	r0, r3
 80037d4:	2314      	movs	r3, #20
 80037d6:	001a      	movs	r2, r3
 80037d8:	2100      	movs	r1, #0
 80037da:	f002 f90f 	bl	80059fc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80037de:	241c      	movs	r4, #28
 80037e0:	193b      	adds	r3, r7, r4
 80037e2:	0018      	movs	r0, r3
 80037e4:	2320      	movs	r3, #32
 80037e6:	001a      	movs	r2, r3
 80037e8:	2100      	movs	r1, #0
 80037ea:	f002 f907 	bl	80059fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	0018      	movs	r0, r3
 80037f2:	2318      	movs	r3, #24
 80037f4:	001a      	movs	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f002 f900 	bl	80059fc <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80037fc:	2001      	movs	r0, #1
 80037fe:	f7ff fe25 	bl	800344c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8003802:	197b      	adds	r3, r7, r5
 8003804:	2230      	movs	r2, #48	; 0x30
 8003806:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003808:	197b      	adds	r3, r7, r5
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 800380e:	197b      	adds	r3, r7, r5
 8003810:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <MX_TIM2_Init+0x118>)
 8003812:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003814:	197b      	adds	r3, r7, r5
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800381a:	197a      	adds	r2, r7, r5
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	05db      	lsls	r3, r3, #23
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f001 fd5c 	bl	80052e0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	05db      	lsls	r3, r3, #23
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fe39 	bl	80034a4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	05db      	lsls	r3, r3, #23
 8003836:	2100      	movs	r1, #0
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff fed3 	bl	80035e4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	05db      	lsls	r3, r3, #23
 8003842:	2101      	movs	r1, #1
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff fe85 	bl	8003554 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800384a:	0021      	movs	r1, r4
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2260      	movs	r2, #96	; 0x60
 8003850:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2201      	movs	r2, #1
 8003856:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800386a:	187a      	adds	r2, r7, r1
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	2101      	movs	r1, #1
 8003872:	0018      	movs	r0, r3
 8003874:	f001 fdb6 	bl	80053e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	05db      	lsls	r3, r3, #23
 800387c:	2101      	movs	r1, #1
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fe1e 	bl	80034c0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	05db      	lsls	r3, r3, #23
 8003888:	2100      	movs	r1, #0
 800388a:	0018      	movs	r0, r3
 800388c:	f7ff febe 	bl	800360c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff fecb 	bl	8003630 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	029b      	lsls	r3, r3, #10
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff fdbe 	bl	8003420 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	0212      	lsls	r2, r2, #8
 80038aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2202      	movs	r2, #2
 80038b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	2202      	movs	r2, #2
 80038c8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80038ca:	1d3a      	adds	r2, r7, #4
 80038cc:	2390      	movs	r3, #144	; 0x90
 80038ce:	05db      	lsls	r3, r3, #23
 80038d0:	0011      	movs	r1, r2
 80038d2:	0018      	movs	r0, r3
 80038d4:	f001 fc46 	bl	8005164 <LL_GPIO_Init>

}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b014      	add	sp, #80	; 0x50
 80038de:	bdb0      	pop	{r4, r5, r7, pc}
 80038e0:	0000ffff 	.word	0x0000ffff

080038e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038e4:	480d      	ldr	r0, [pc, #52]	; (800391c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e8:	480d      	ldr	r0, [pc, #52]	; (8003920 <LoopForever+0x6>)
  ldr r1, =_edata
 80038ea:	490e      	ldr	r1, [pc, #56]	; (8003924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <LoopForever+0xe>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f0:	e002      	b.n	80038f8 <LoopCopyDataInit>

080038f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f6:	3304      	adds	r3, #4

080038f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038fc:	d3f9      	bcc.n	80038f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003900:	4c0b      	ldr	r4, [pc, #44]	; (8003930 <LoopForever+0x16>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003904:	e001      	b.n	800390a <LoopFillZerobss>

08003906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003908:	3204      	adds	r2, #4

0800390a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800390c:	d3fb      	bcc.n	8003906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800390e:	f7ff fd81 	bl	8003414 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003912:	f002 f84f 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003916:	f7fe f9bd 	bl	8001c94 <main>

0800391a <LoopForever>:

LoopForever:
    b LoopForever
 800391a:	e7fe      	b.n	800391a <LoopForever>
  ldr   r0, =_estack
 800391c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003924:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003928:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 800392c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003930:	200002f0 	.word	0x200002f0

08003934 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003934:	e7fe      	b.n	8003934 <ADC1_COMP_IRQHandler>
	...

08003938 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_Init+0x24>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_Init+0x24>)
 8003942:	2110      	movs	r1, #16
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003948:	2003      	movs	r0, #3
 800394a:	f000 f809 	bl	8003960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800394e:	f7ff f98f 	bl	8002c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_InitTick+0x5c>)
 800396a:	681c      	ldr	r4, [r3, #0]
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_InitTick+0x60>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	0019      	movs	r1, r3
 8003972:	23fa      	movs	r3, #250	; 0xfa
 8003974:	0098      	lsls	r0, r3, #2
 8003976:	f7fc fbc7 	bl	8000108 <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	0019      	movs	r1, r3
 800397e:	0020      	movs	r0, r4
 8003980:	f7fc fbc2 	bl	8000108 <__udivsi3>
 8003984:	0003      	movs	r3, r0
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f905 	bl	8003b96 <HAL_SYSTICK_Config>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e00f      	b.n	80039b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d80b      	bhi.n	80039b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	2301      	movs	r3, #1
 800399e:	425b      	negs	r3, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f8e2 	bl	8003b6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_InitTick+0x64>)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b003      	add	sp, #12
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	20000014 	.word	0x20000014
 80039c0:	2000001c 	.word	0x2000001c
 80039c4:	20000018 	.word	0x20000018

080039c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	001a      	movs	r2, r3
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	18d2      	adds	r2, r2, r3
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_IncTick+0x20>)
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	2000001c 	.word	0x2000001c
 80039e8:	200002ec 	.word	0x200002ec

080039ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_GetTick+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	200002ec 	.word	0x200002ec

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff fff0 	bl	80039ec <HAL_GetTick>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d005      	beq.n	8003a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_Delay+0x44>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	001a      	movs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	f7ff ffe0 	bl	80039ec <HAL_GetTick>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d8f7      	bhi.n	8003a28 <HAL_Delay+0x28>
  {
  }
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	2000001c 	.word	0x2000001c

08003a48 <__NVIC_SetPriority>:
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	0002      	movs	r2, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5c:	d828      	bhi.n	8003ab0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a5e:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <__NVIC_SetPriority+0xd4>)
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	33c0      	adds	r3, #192	; 0xc0
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	589b      	ldr	r3, [r3, r2]
 8003a6e:	1dfa      	adds	r2, r7, #7
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	0011      	movs	r1, r2
 8003a74:	2203      	movs	r2, #3
 8003a76:	400a      	ands	r2, r1
 8003a78:	00d2      	lsls	r2, r2, #3
 8003a7a:	21ff      	movs	r1, #255	; 0xff
 8003a7c:	4091      	lsls	r1, r2
 8003a7e:	000a      	movs	r2, r1
 8003a80:	43d2      	mvns	r2, r2
 8003a82:	401a      	ands	r2, r3
 8003a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	019b      	lsls	r3, r3, #6
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	0018      	movs	r0, r3
 8003a94:	2303      	movs	r3, #3
 8003a96:	4003      	ands	r3, r0
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a9c:	481f      	ldr	r0, [pc, #124]	; (8003b1c <__NVIC_SetPriority+0xd4>)
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	33c0      	adds	r3, #192	; 0xc0
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	501a      	str	r2, [r3, r0]
}
 8003aae:	e031      	b.n	8003b14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <__NVIC_SetPriority+0xd8>)
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	230f      	movs	r3, #15
 8003aba:	400b      	ands	r3, r1
 8003abc:	3b08      	subs	r3, #8
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3306      	adds	r3, #6
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1dfa      	adds	r2, r7, #7
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	0011      	movs	r1, r2
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	00d2      	lsls	r2, r2, #3
 8003ad6:	21ff      	movs	r1, #255	; 0xff
 8003ad8:	4091      	lsls	r1, r2
 8003ada:	000a      	movs	r2, r1
 8003adc:	43d2      	mvns	r2, r2
 8003ade:	401a      	ands	r2, r3
 8003ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	22ff      	movs	r2, #255	; 0xff
 8003ae8:	401a      	ands	r2, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	0018      	movs	r0, r3
 8003af0:	2303      	movs	r3, #3
 8003af2:	4003      	ands	r3, r0
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003af8:	4809      	ldr	r0, [pc, #36]	; (8003b20 <__NVIC_SetPriority+0xd8>)
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	001c      	movs	r4, r3
 8003b00:	230f      	movs	r3, #15
 8003b02:	4023      	ands	r3, r4
 8003b04:	3b08      	subs	r3, #8
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	3306      	adds	r3, #6
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18c3      	adds	r3, r0, r3
 8003b10:	3304      	adds	r3, #4
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b003      	add	sp, #12
 8003b1a:	bd90      	pop	{r4, r7, pc}
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1e5a      	subs	r2, r3, #1
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	045b      	lsls	r3, r3, #17
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d301      	bcc.n	8003b3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e010      	b.n	8003b5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <SysTick_Config+0x44>)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	3a01      	subs	r2, #1
 8003b42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b44:	2301      	movs	r3, #1
 8003b46:	425b      	negs	r3, r3
 8003b48:	2103      	movs	r1, #3
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7ff ff7c 	bl	8003a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Config+0x44>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <SysTick_Config+0x44>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	210f      	movs	r1, #15
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	1c02      	adds	r2, r0, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff ff5d 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7ff ffbf 	bl	8003b24 <SysTick_Config>
 8003ba6:	0003      	movs	r3, r0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bbe:	e155      	b.n	8003e6c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4091      	lsls	r1, r2
 8003bca:	000a      	movs	r2, r1
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d100      	bne.n	8003bd8 <HAL_GPIO_Init+0x28>
 8003bd6:	e146      	b.n	8003e66 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	0013      	movs	r3, r2
 8003c00:	43da      	mvns	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	409a      	lsls	r2, r3
 8003c12:	0013      	movs	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	401a      	ands	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	409a      	lsls	r2, r3
 8003c44:	0013      	movs	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2203      	movs	r2, #3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	0013      	movs	r3, r2
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	0013      	movs	r3, r2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2203      	movs	r2, #3
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d123      	bne.n	8003ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	58d3      	ldr	r3, [r2, r3]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2207      	movs	r2, #7
 8003cac:	4013      	ands	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	0013      	movs	r3, r2
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2107      	movs	r1, #7
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	0013      	movs	r3, r2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	6939      	ldr	r1, [r7, #16]
 8003ce0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	401a      	ands	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	0013      	movs	r3, r2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	23c0      	movs	r3, #192	; 0xc0
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d100      	bne.n	8003d24 <HAL_GPIO_Init+0x174>
 8003d22:	e0a0      	b.n	8003e66 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_GPIO_Init+0x2d4>)
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <HAL_GPIO_Init+0x2d4>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]
 8003d30:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_GPIO_Init+0x2d4>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2201      	movs	r2, #1
 8003d36:	4013      	ands	r3, r2
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d3c:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	589b      	ldr	r3, [r3, r2]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	4013      	ands	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	409a      	lsls	r2, r3
 8003d56:	0013      	movs	r3, r2
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	2390      	movs	r3, #144	; 0x90
 8003d64:	05db      	lsls	r3, r3, #23
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d019      	beq.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_GPIO_Init+0x2dc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0x1ea>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a46      	ldr	r2, [pc, #280]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_GPIO_Init+0x1e6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a45      	ldr	r2, [pc, #276]	; (8003e94 <HAL_GPIO_Init+0x2e4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <HAL_GPIO_Init+0x1e2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a44      	ldr	r2, [pc, #272]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_GPIO_Init+0x1de>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e008      	b.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d8e:	2305      	movs	r3, #5
 8003d90:	e006      	b.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d92:	2303      	movs	r3, #3
 8003d94:	e004      	b.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	2103      	movs	r1, #3
 8003da4:	400a      	ands	r2, r1
 8003da6:	0092      	lsls	r2, r2, #2
 8003da8:	4093      	lsls	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003db0:	4935      	ldr	r1, [pc, #212]	; (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3302      	adds	r3, #2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	025b      	lsls	r3, r3, #9
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43da      	mvns	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e12:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	035b      	lsls	r3, r3, #13
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	039b      	lsls	r3, r3, #14
 8003e54:	4013      	ands	r3, r2
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	40da      	lsrs	r2, r3
 8003e74:	1e13      	subs	r3, r2, #0
 8003e76:	d000      	beq.n	8003e7a <HAL_GPIO_Init+0x2ca>
 8003e78:	e6a2      	b.n	8003bc0 <HAL_GPIO_Init+0x10>
  } 
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	48000400 	.word	0x48000400
 8003e90:	48000800 	.word	0x48000800
 8003e94:	48000c00 	.word	0x48000c00
 8003e98:	48001000 	.word	0x48001000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	0008      	movs	r0, r1
 8003eaa:	0011      	movs	r1, r2
 8003eac:	1cbb      	adds	r3, r7, #2
 8003eae:	1c02      	adds	r2, r0, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	1c7b      	adds	r3, r7, #1
 8003eb4:	1c0a      	adds	r2, r1, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb8:	1c7b      	adds	r3, r7, #1
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ec0:	1cbb      	adds	r3, r7, #2
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec8:	e003      	b.n	8003ed2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b002      	add	sp, #8
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0a8      	b.n	8004040 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	2382      	movs	r3, #130	; 0x82
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d009      	beq.n	8003f16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	61da      	str	r2, [r3, #28]
 8003f08:	e005      	b.n	8003f16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	225d      	movs	r2, #93	; 0x5d
 8003f20:	5c9b      	ldrb	r3, [r3, r2]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	225c      	movs	r2, #92	; 0x5c
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fe fdec 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	225d      	movs	r2, #93	; 0x5d
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	438a      	bics	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	23e0      	movs	r3, #224	; 0xe0
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d902      	bls.n	8003f62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e002      	b.n	8003f68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	015b      	lsls	r3, r3, #5
 8003f66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	23f0      	movs	r3, #240	; 0xf0
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d008      	beq.n	8003f86 <HAL_SPI_Init+0xaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	23e0      	movs	r3, #224	; 0xe0
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d002      	beq.n	8003f86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	2382      	movs	r3, #130	; 0x82
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	401a      	ands	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	2384      	movs	r3, #132	; 0x84
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	400b      	ands	r3, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2101      	movs	r1, #1
 8003fac:	400b      	ands	r3, r1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6999      	ldr	r1, [r3, #24]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	400b      	ands	r3, r1
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2138      	movs	r1, #56	; 0x38
 8003fc2:	400b      	ands	r3, r1
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	400b      	ands	r3, r1
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	2204      	movs	r2, #4
 8003fec:	401a      	ands	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	2108      	movs	r1, #8
 8003ffe:	400b      	ands	r3, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68d9      	ldr	r1, [r3, #12]
 8004006:	23f0      	movs	r3, #240	; 0xf0
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	400b      	ands	r3, r1
 800400c:	431a      	orrs	r2, r3
 800400e:	0011      	movs	r1, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	401a      	ands	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4907      	ldr	r1, [pc, #28]	; (8004048 <HAL_SPI_Init+0x16c>)
 800402c:	400a      	ands	r2, r1
 800402e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	225d      	movs	r2, #93	; 0x5d
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	b004      	add	sp, #16
 8004046:	bd80      	pop	{r7, pc}
 8004048:	fffff7ff 	.word	0xfffff7ff

0800404c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800405c:	231f      	movs	r3, #31
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	225c      	movs	r2, #92	; 0x5c
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_SPI_Transmit+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e140      	b.n	80042f4 <HAL_SPI_Transmit+0x2a8>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	225c      	movs	r2, #92	; 0x5c
 8004076:	2101      	movs	r1, #1
 8004078:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407a:	f7ff fcb7 	bl	80039ec <HAL_GetTick>
 800407e:	0003      	movs	r3, r0
 8004080:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004082:	2316      	movs	r3, #22
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	1dba      	adds	r2, r7, #6
 8004088:	8812      	ldrh	r2, [r2, #0]
 800408a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	225d      	movs	r2, #93	; 0x5d
 8004090:	5c9b      	ldrb	r3, [r3, r2]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d004      	beq.n	80040a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004098:	231f      	movs	r3, #31
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
    goto error;
 80040a0:	e11d      	b.n	80042de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_SPI_Transmit+0x64>
 80040a8:	1dbb      	adds	r3, r7, #6
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80040b0:	231f      	movs	r3, #31
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80040b8:	e111      	b.n	80042de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	225d      	movs	r2, #93	; 0x5d
 80040be:	2103      	movs	r1, #3
 80040c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1dba      	adds	r2, r7, #6
 80040d2:	8812      	ldrh	r2, [r2, #0]
 80040d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1dba      	adds	r2, r7, #6
 80040da:	8812      	ldrh	r2, [r2, #0]
 80040dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2244      	movs	r2, #68	; 0x44
 80040e8:	2100      	movs	r1, #0
 80040ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2246      	movs	r2, #70	; 0x46
 80040f0:	2100      	movs	r1, #0
 80040f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	429a      	cmp	r2, r3
 800410a:	d110      	bne.n	800412e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	438a      	bics	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	01c9      	lsls	r1, r1, #7
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2240      	movs	r2, #64	; 0x40
 8004136:	4013      	ands	r3, r2
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d007      	beq.n	800414c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	23e0      	movs	r3, #224	; 0xe0
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	429a      	cmp	r2, r3
 8004156:	d94e      	bls.n	80041f6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_SPI_Transmit+0x11e>
 8004160:	2316      	movs	r3, #22
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d13f      	bne.n	80041ea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800418e:	e02c      	b.n	80041ea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d112      	bne.n	80041c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	1c9a      	adds	r2, r3, #2
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c2:	e012      	b.n	80041ea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c4:	f7ff fc12 	bl	80039ec <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d802      	bhi.n	80041da <HAL_SPI_Transmit+0x18e>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x194>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	231f      	movs	r3, #31
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	2203      	movs	r2, #3
 80041e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80041e8:	e079      	b.n	80042de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1cd      	bne.n	8004190 <HAL_SPI_Transmit+0x144>
 80041f4:	e04f      	b.n	8004296 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <HAL_SPI_Transmit+0x1bc>
 80041fe:	2316      	movs	r3, #22
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d141      	bne.n	800428c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800422e:	e02d      	b.n	800428c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d113      	bne.n	8004266 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004264:	e012      	b.n	800428c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004266:	f7ff fbc1 	bl	80039ec <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d802      	bhi.n	800427c <HAL_SPI_Transmit+0x230>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	d102      	bne.n	8004282 <HAL_SPI_Transmit+0x236>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d104      	bne.n	800428c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004282:	231f      	movs	r3, #31
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2203      	movs	r2, #3
 8004288:	701a      	strb	r2, [r3, #0]
          goto error;
 800428a:	e028      	b.n	80042de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1cc      	bne.n	8004230 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 fcd9 	bl	8004c54 <SPI_EndRxTxTransaction>
 80042a2:	1e03      	subs	r3, r0, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80042d2:	231f      	movs	r3, #31
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e000      	b.n	80042de <HAL_SPI_Transmit+0x292>
  }

error:
 80042dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225d      	movs	r2, #93	; 0x5d
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	225c      	movs	r2, #92	; 0x5c
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80042ee:	231f      	movs	r3, #31
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b008      	add	sp, #32
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	1dbb      	adds	r3, r7, #6
 800430a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800430c:	2317      	movs	r3, #23
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	2382      	movs	r3, #130	; 0x82
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	429a      	cmp	r2, r3
 800431e:	d113      	bne.n	8004348 <HAL_SPI_Receive+0x4c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	225d      	movs	r2, #93	; 0x5d
 800432c:	2104      	movs	r1, #4
 800432e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881c      	ldrh	r4, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	0023      	movs	r3, r4
 8004340:	f000 f928 	bl	8004594 <HAL_SPI_TransmitReceive>
 8004344:	0003      	movs	r3, r0
 8004346:	e11c      	b.n	8004582 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	225c      	movs	r2, #92	; 0x5c
 800434c:	5c9b      	ldrb	r3, [r3, r2]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_SPI_Receive+0x5a>
 8004352:	2302      	movs	r3, #2
 8004354:	e115      	b.n	8004582 <HAL_SPI_Receive+0x286>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	225c      	movs	r2, #92	; 0x5c
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435e:	f7ff fb45 	bl	80039ec <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	225d      	movs	r2, #93	; 0x5d
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d004      	beq.n	800437c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004372:	2317      	movs	r3, #23
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
    goto error;
 800437a:	e0f7      	b.n	800456c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_SPI_Receive+0x8e>
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800438a:	2317      	movs	r3, #23
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    goto error;
 8004392:	e0eb      	b.n	800456c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	225d      	movs	r2, #93	; 0x5d
 8004398:	2104      	movs	r1, #4
 800439a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1dba      	adds	r2, r7, #6
 80043ac:	2144      	movs	r1, #68	; 0x44
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1dba      	adds	r2, r7, #6
 80043b6:	2146      	movs	r1, #70	; 0x46
 80043b8:	8812      	ldrh	r2, [r2, #0]
 80043ba:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	23e0      	movs	r3, #224	; 0xe0
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d908      	bls.n	80043f8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4966      	ldr	r1, [pc, #408]	; (800458c <HAL_SPI_Receive+0x290>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e008      	b.n	800440a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	0149      	lsls	r1, r1, #5
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	429a      	cmp	r2, r3
 8004414:	d10f      	bne.n	8004436 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	438a      	bics	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4957      	ldr	r1, [pc, #348]	; (8004590 <HAL_SPI_Receive+0x294>)
 8004432:	400a      	ands	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2240      	movs	r2, #64	; 0x40
 800443e:	4013      	ands	r3, r2
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d007      	beq.n	8004454 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2140      	movs	r1, #64	; 0x40
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	23e0      	movs	r3, #224	; 0xe0
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	429a      	cmp	r2, r3
 800445e:	d900      	bls.n	8004462 <HAL_SPI_Receive+0x166>
 8004460:	e069      	b.n	8004536 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004462:	e031      	b.n	80044c8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2201      	movs	r2, #1
 800446c:	4013      	ands	r3, r2
 800446e:	2b01      	cmp	r3, #1
 8004470:	d117      	bne.n	80044a2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	001a      	movs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2246      	movs	r2, #70	; 0x46
 8004492:	5a9b      	ldrh	r3, [r3, r2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b299      	uxth	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2246      	movs	r2, #70	; 0x46
 800449e:	5299      	strh	r1, [r3, r2]
 80044a0:	e012      	b.n	80044c8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7ff faa3 	bl	80039ec <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d802      	bhi.n	80044b8 <HAL_SPI_Receive+0x1bc>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	d102      	bne.n	80044be <HAL_SPI_Receive+0x1c2>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80044be:	2317      	movs	r3, #23
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
          goto error;
 80044c6:	e051      	b.n	800456c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2246      	movs	r2, #70	; 0x46
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1c7      	bne.n	8004464 <HAL_SPI_Receive+0x168>
 80044d4:	e035      	b.n	8004542 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d115      	bne.n	8004510 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	b292      	uxth	r2, r2
 80044f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	1c9a      	adds	r2, r3, #2
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2246      	movs	r2, #70	; 0x46
 8004500:	5a9b      	ldrh	r3, [r3, r2]
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b299      	uxth	r1, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2246      	movs	r2, #70	; 0x46
 800450c:	5299      	strh	r1, [r3, r2]
 800450e:	e012      	b.n	8004536 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004510:	f7ff fa6c 	bl	80039ec <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d802      	bhi.n	8004526 <HAL_SPI_Receive+0x22a>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	d102      	bne.n	800452c <HAL_SPI_Receive+0x230>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800452c:	2317      	movs	r3, #23
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2203      	movs	r2, #3
 8004532:	701a      	strb	r2, [r3, #0]
          goto error;
 8004534:	e01a      	b.n	800456c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2246      	movs	r2, #70	; 0x46
 800453a:	5a9b      	ldrh	r3, [r3, r2]
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1c9      	bne.n	80044d6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fb25 	bl	8004b98 <SPI_EndRxTransaction>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004560:	2317      	movs	r3, #23
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e000      	b.n	800456c <HAL_SPI_Receive+0x270>
  }

error :
 800456a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	225d      	movs	r2, #93	; 0x5d
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	225c      	movs	r2, #92	; 0x5c
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800457c:	2317      	movs	r3, #23
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b007      	add	sp, #28
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	ffffefff 	.word	0xffffefff
 8004590:	ffffbfff 	.word	0xffffbfff

08004594 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	001a      	movs	r2, r3
 80045a2:	1cbb      	adds	r3, r7, #2
 80045a4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045a6:	2301      	movs	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045aa:	2323      	movs	r3, #35	; 0x23
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	225c      	movs	r2, #92	; 0x5c
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x2c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e1b5      	b.n	800492c <HAL_SPI_TransmitReceive+0x398>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	225c      	movs	r2, #92	; 0x5c
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c8:	f7ff fa10 	bl	80039ec <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d0:	201b      	movs	r0, #27
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	215d      	movs	r1, #93	; 0x5d
 80045d8:	5c52      	ldrb	r2, [r2, r1]
 80045da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045e2:	2312      	movs	r3, #18
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	1cba      	adds	r2, r7, #2
 80045e8:	8812      	ldrh	r2, [r2, #0]
 80045ea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045ec:	183b      	adds	r3, r7, r0
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d011      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x84>
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	2382      	movs	r3, #130	; 0x82
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d107      	bne.n	800460e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_SPI_TransmitReceive+0x7a>
 8004606:	183b      	adds	r3, r7, r0
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d004      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800460e:	2323      	movs	r3, #35	; 0x23
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2202      	movs	r2, #2
 8004614:	701a      	strb	r2, [r3, #0]
    goto error;
 8004616:	e17e      	b.n	8004916 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <HAL_SPI_TransmitReceive+0x98>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_SPI_TransmitReceive+0x98>
 8004624:	1cbb      	adds	r3, r7, #2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800462c:	2323      	movs	r3, #35	; 0x23
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
    goto error;
 8004634:	e16f      	b.n	8004916 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	225d      	movs	r2, #93	; 0x5d
 800463a:	5c9b      	ldrb	r3, [r3, r2]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	225d      	movs	r2, #93	; 0x5d
 8004646:	2105      	movs	r1, #5
 8004648:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1cba      	adds	r2, r7, #2
 800465a:	2146      	movs	r1, #70	; 0x46
 800465c:	8812      	ldrh	r2, [r2, #0]
 800465e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1cba      	adds	r2, r7, #2
 8004664:	2144      	movs	r1, #68	; 0x44
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1cba      	adds	r2, r7, #2
 8004674:	8812      	ldrh	r2, [r2, #0]
 8004676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1cba      	adds	r2, r7, #2
 800467c:	8812      	ldrh	r2, [r2, #0]
 800467e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	23e0      	movs	r3, #224	; 0xe0
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	429a      	cmp	r2, r3
 8004696:	d908      	bls.n	80046aa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	49a4      	ldr	r1, [pc, #656]	; (8004934 <HAL_SPI_TransmitReceive+0x3a0>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	e008      	b.n	80046bc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	0149      	lsls	r1, r1, #5
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d007      	beq.n	80046da <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	23e0      	movs	r3, #224	; 0xe0
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d800      	bhi.n	80046e8 <HAL_SPI_TransmitReceive+0x154>
 80046e6:	e07f      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x168>
 80046f0:	2312      	movs	r3, #18
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d000      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x168>
 80046fa:	e069      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	881a      	ldrh	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	1c9a      	adds	r2, r3, #2
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004720:	e056      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d11b      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x1d4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x1d4>
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b01      	cmp	r3, #1
 800473e:	d113      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	881a      	ldrh	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	1c9a      	adds	r2, r3, #2
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2201      	movs	r2, #1
 8004770:	4013      	ands	r3, r2
 8004772:	2b01      	cmp	r3, #1
 8004774:	d11c      	bne.n	80047b0 <HAL_SPI_TransmitReceive+0x21c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2246      	movs	r2, #70	; 0x46
 800477a:	5a9b      	ldrh	r3, [r3, r2]
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	b292      	uxth	r2, r2
 800478e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2246      	movs	r2, #70	; 0x46
 800479e:	5a9b      	ldrh	r3, [r3, r2]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b299      	uxth	r1, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2246      	movs	r2, #70	; 0x46
 80047aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ac:	2301      	movs	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047b0:	f7ff f91c 	bl	80039ec <HAL_GetTick>
 80047b4:	0002      	movs	r2, r0
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047bc:	429a      	cmp	r2, r3
 80047be:	d807      	bhi.n	80047d0 <HAL_SPI_TransmitReceive+0x23c>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3301      	adds	r3, #1
 80047c4:	d004      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80047c6:	2323      	movs	r3, #35	; 0x23
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	2203      	movs	r2, #3
 80047cc:	701a      	strb	r2, [r3, #0]
        goto error;
 80047ce:	e0a2      	b.n	8004916 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1a3      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x18e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2246      	movs	r2, #70	; 0x46
 80047de:	5a9b      	ldrh	r3, [r3, r2]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d19d      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x18e>
 80047e6:	e085      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x268>
 80047f0:	2312      	movs	r3, #18
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d000      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x268>
 80047fa:	e070      	b.n	80048de <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004822:	e05c      	b.n	80048de <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d11c      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2d8>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_SPI_TransmitReceive+0x2d8>
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	2b01      	cmp	r3, #1
 8004840:	d114      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2201      	movs	r2, #1
 8004874:	4013      	ands	r3, r2
 8004876:	2b01      	cmp	r3, #1
 8004878:	d11e      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x324>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2246      	movs	r2, #70	; 0x46
 800487e:	5a9b      	ldrh	r3, [r3, r2]
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	001a      	movs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2246      	movs	r2, #70	; 0x46
 80048a6:	5a9b      	ldrh	r3, [r3, r2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b299      	uxth	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2246      	movs	r2, #70	; 0x46
 80048b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048b8:	f7ff f898 	bl	80039ec <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d802      	bhi.n	80048ce <HAL_SPI_TransmitReceive+0x33a>
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	3301      	adds	r3, #1
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x340>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80048d4:	2323      	movs	r3, #35	; 0x23
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2203      	movs	r2, #3
 80048da:	701a      	strb	r2, [r3, #0]
        goto error;
 80048dc:	e01b      	b.n	8004916 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d19d      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x290>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2246      	movs	r2, #70	; 0x46
 80048ec:	5a9b      	ldrh	r3, [r3, r2]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d197      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 f9aa 	bl	8004c54 <SPI_EndRxTxTransaction>
 8004900:	1e03      	subs	r3, r0, #0
 8004902:	d007      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004904:	2323      	movs	r3, #35	; 0x23
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
 8004912:	e000      	b.n	8004916 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004914:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	225d      	movs	r2, #93	; 0x5d
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	225c      	movs	r2, #92	; 0x5c
 8004922:	2100      	movs	r1, #0
 8004924:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004926:	2323      	movs	r3, #35	; 0x23
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	781b      	ldrb	r3, [r3, #0]
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b00a      	add	sp, #40	; 0x28
 8004932:	bd80      	pop	{r7, pc}
 8004934:	ffffefff 	.word	0xffffefff

08004938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004948:	f7ff f850 	bl	80039ec <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	18d3      	adds	r3, r2, r3
 8004956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004958:	f7ff f848 	bl	80039ec <HAL_GetTick>
 800495c:	0003      	movs	r3, r0
 800495e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004960:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	015b      	lsls	r3, r3, #5
 8004966:	0d1b      	lsrs	r3, r3, #20
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	4353      	muls	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496e:	e058      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	d055      	beq.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004976:	f7ff f839 	bl	80039ec <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	429a      	cmp	r2, r3
 8004984:	d902      	bls.n	800498c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d142      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	21e0      	movs	r1, #224	; 0xe0
 8004998:	438a      	bics	r2, r1
 800499a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2382      	movs	r3, #130	; 0x82
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d113      	bne.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2140      	movs	r1, #64	; 0x40
 80049cc:	438a      	bics	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	019b      	lsls	r3, r3, #6
 80049d8:	429a      	cmp	r2, r3
 80049da:	d110      	bne.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	491a      	ldr	r1, [pc, #104]	; (8004a50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	0189      	lsls	r1, r1, #6
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	225d      	movs	r2, #93	; 0x5d
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	225c      	movs	r2, #92	; 0x5c
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e017      	b.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	425a      	negs	r2, r3
 8004a32:	4153      	adcs	r3, r2
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	001a      	movs	r2, r3
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d197      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b008      	add	sp, #32
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000014 	.word	0x20000014
 8004a50:	ffffdfff 	.word	0xffffdfff

08004a54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a62:	2317      	movs	r3, #23
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a6a:	f7fe ffbf 	bl	80039ec <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a7a:	f7fe ffb7 	bl	80039ec <HAL_GetTick>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	0013      	movs	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	00da      	lsls	r2, r3, #3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	0d1b      	lsrs	r3, r3, #20
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	4353      	muls	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004aa0:	e068      	b.n	8004b74 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	23c0      	movs	r3, #192	; 0xc0
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d10a      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	2117      	movs	r1, #23
 8004aba:	187b      	adds	r3, r7, r1
 8004abc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004abe:	187b      	adds	r3, r7, r1
 8004ac0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	d055      	beq.n	8004b74 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ac8:	f7fe ff90 	bl	80039ec <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d902      	bls.n	8004ade <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d142      	bne.n	8004b64 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	21e0      	movs	r1, #224	; 0xe0
 8004aea:	438a      	bics	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	2382      	movs	r3, #130	; 0x82
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d113      	bne.n	8004b22 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d005      	beq.n	8004b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	438a      	bics	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d110      	bne.n	8004b50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004b3a:	400a      	ands	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2180      	movs	r1, #128	; 0x80
 8004b4a:	0189      	lsls	r1, r1, #6
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	225d      	movs	r2, #93	; 0x5d
 8004b54:	2101      	movs	r1, #1
 8004b56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	225c      	movs	r2, #92	; 0x5c
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e010      	b.n	8004b86 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d18e      	bne.n	8004aa2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b00a      	add	sp, #40	; 0x28
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	20000014 	.word	0x20000014
 8004b94:	ffffdfff 	.word	0xffffdfff

08004b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	2382      	movs	r3, #130	; 0x82
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d113      	bne.n	8004bd8 <SPI_EndRxTransaction+0x40>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d005      	beq.n	8004bc8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d107      	bne.n	8004bd8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2140      	movs	r1, #64	; 0x40
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	0013      	movs	r3, r2
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	f7ff fea7 	bl	8004938 <SPI_WaitFlagStateUntilTimeout>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d007      	beq.n	8004bfe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e026      	b.n	8004c4c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	2382      	movs	r3, #130	; 0x82
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d11f      	bne.n	8004c4a <SPI_EndRxTransaction+0xb2>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d005      	beq.n	8004c22 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d113      	bne.n	8004c4a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	23c0      	movs	r3, #192	; 0xc0
 8004c26:	00d9      	lsls	r1, r3, #3
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	0013      	movs	r3, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	f7ff ff0f 	bl	8004a54 <SPI_WaitFifoStateUntilTimeout>
 8004c36:	1e03      	subs	r3, r0, #0
 8004c38:	d007      	beq.n	8004c4a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3e:	2220      	movs	r2, #32
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e000      	b.n	8004c4c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	23c0      	movs	r3, #192	; 0xc0
 8004c64:	0159      	lsls	r1, r3, #5
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f7ff fef0 	bl	8004a54 <SPI_WaitFifoStateUntilTimeout>
 8004c74:	1e03      	subs	r3, r0, #0
 8004c76:	d007      	beq.n	8004c88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e027      	b.n	8004cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	0013      	movs	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	f7ff fe4f 	bl	8004938 <SPI_WaitFlagStateUntilTimeout>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d007      	beq.n	8004cae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e014      	b.n	8004cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	23c0      	movs	r3, #192	; 0xc0
 8004cb2:	00d9      	lsls	r1, r3, #3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	0013      	movs	r3, r2
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f7ff fec9 	bl	8004a54 <SPI_WaitFifoStateUntilTimeout>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d007      	beq.n	8004cd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	2220      	movs	r2, #32
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e000      	b.n	8004cd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b004      	add	sp, #16
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <LL_ADC_IsEnabled>:
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2201      	movs	r2, #1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	425a      	negs	r2, r3
 8004cf4:	4153      	adcs	r3, r2
 8004cf6:	b2db      	uxtb	r3, r3
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004d0a:	230f      	movs	r3, #15
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ffe3 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004d1a:	1e03      	subs	r3, r0, #0
 8004d1c:	d118      	bne.n	8004d50 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <LL_ADC_Init+0x68>)
 8004d24:	401a      	ands	r2, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4319      	orrs	r1, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	089a      	lsrs	r2, r3, #2
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]
 8004d4e:	e003      	b.n	8004d58 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004d58:	230f      	movs	r3, #15
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	ffff3fc7 	.word	0xffff3fc7

08004d6c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004d76:	230f      	movs	r3, #15
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7ff ffad 	bl	8004ce0 <LL_ADC_IsEnabled>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d115      	bne.n	8004db6 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <LL_ADC_REG_Init+0x60>)
 8004d90:	401a      	ands	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6819      	ldr	r1, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4319      	orrs	r1, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4319      	orrs	r1, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4319      	orrs	r1, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e003      	b.n	8004dbe <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004db6:	230f      	movs	r3, #15
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004dbe:	230f      	movs	r3, #15
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fffec23c 	.word	0xfffec23c

08004dd0 <LL_EXTI_EnableIT_0_31>:
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <LL_EXTI_EnableIT_0_31+0x1c>)
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <LL_EXTI_EnableIT_0_31+0x1c>)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b002      	add	sp, #8
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40010400 	.word	0x40010400

08004df0 <LL_EXTI_DisableIT_0_31>:
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <LL_EXTI_DisableIT_0_31+0x20>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	43d9      	mvns	r1, r3
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <LL_EXTI_DisableIT_0_31+0x20>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	40010400 	.word	0x40010400

08004e14 <LL_EXTI_EnableEvent_0_31>:
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40010400 	.word	0x40010400

08004e34 <LL_EXTI_DisableEvent_0_31>:
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	43d9      	mvns	r1, r3
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004e46:	400a      	ands	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b002      	add	sp, #8
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	40010400 	.word	0x40010400

08004e58 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010400 	.word	0x40010400

08004e78 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	43d9      	mvns	r1, r3
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	40010400 	.word	0x40010400

08004e9c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40010400 	.word	0x40010400

08004ebc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	60da      	str	r2, [r3, #12]
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b002      	add	sp, #8
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	40010400 	.word	0x40010400

08004ee0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	791b      	ldrb	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d100      	bne.n	8004efa <LL_EXTI_Init+0x1a>
 8004ef8:	e068      	b.n	8004fcc <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d100      	bne.n	8004f04 <LL_EXTI_Init+0x24>
 8004f02:	e06e      	b.n	8004fe2 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	795b      	ldrb	r3, [r3, #5]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d01b      	beq.n	8004f44 <LL_EXTI_Init+0x64>
 8004f0c:	dc25      	bgt.n	8004f5a <LL_EXTI_Init+0x7a>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <LL_EXTI_Init+0x38>
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d00b      	beq.n	8004f2e <LL_EXTI_Init+0x4e>
 8004f16:	e020      	b.n	8004f5a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff ff89 	bl	8004e34 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7ff ff52 	bl	8004dd0 <LL_EXTI_EnableIT_0_31>
          break;
 8004f2c:	e01a      	b.n	8004f64 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7ff ff5c 	bl	8004df0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7ff ff69 	bl	8004e14 <LL_EXTI_EnableEvent_0_31>
          break;
 8004f42:	e00f      	b.n	8004f64 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff ff41 	bl	8004dd0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f7ff ff5e 	bl	8004e14 <LL_EXTI_EnableEvent_0_31>
          break;
 8004f58:	e004      	b.n	8004f64 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
          break;
 8004f62:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	799b      	ldrb	r3, [r3, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03a      	beq.n	8004fe2 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	799b      	ldrb	r3, [r3, #6]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d01b      	beq.n	8004fac <LL_EXTI_Init+0xcc>
 8004f74:	dc25      	bgt.n	8004fc2 <LL_EXTI_Init+0xe2>
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <LL_EXTI_Init+0xa0>
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d00b      	beq.n	8004f96 <LL_EXTI_Init+0xb6>
 8004f7e:	e020      	b.n	8004fc2 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff ff99 	bl	8004ebc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff ff62 	bl	8004e58 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004f94:	e026      	b.n	8004fe4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7ff ff6c 	bl	8004e78 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7ff ff79 	bl	8004e9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004faa:	e01b      	b.n	8004fe4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff ff51 	bl	8004e58 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff ff6e 	bl	8004e9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004fc0:	e010      	b.n	8004fe4 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8004fc2:	230f      	movs	r3, #15
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
            break;
 8004fca:	e00b      	b.n	8004fe4 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7ff ff0d 	bl	8004df0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f7ff ff2a 	bl	8004e34 <LL_EXTI_DisableEvent_0_31>
 8004fe0:	e000      	b.n	8004fe4 <LL_EXTI_Init+0x104>
      }
 8004fe2:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <LL_GPIO_SetPinMode>:
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6819      	ldr	r1, [r3, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	435b      	muls	r3, r3
 8005006:	001a      	movs	r2, r3
 8005008:	0013      	movs	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	189b      	adds	r3, r3, r2
 800500e:	43db      	mvns	r3, r3
 8005010:	400b      	ands	r3, r1
 8005012:	001a      	movs	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	435b      	muls	r3, r3
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	434b      	muls	r3, r1
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bd80      	pop	{r7, pc}

0800502a <LL_GPIO_SetPinOutputType>:
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	43d2      	mvns	r2, r2
 800503e:	401a      	ands	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	434b      	muls	r3, r1
 8005046:	431a      	orrs	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	605a      	str	r2, [r3, #4]
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b004      	add	sp, #16
 8005052:	bd80      	pop	{r7, pc}

08005054 <LL_GPIO_SetPinSpeed>:
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	435b      	muls	r3, r3
 8005068:	001a      	movs	r2, r3
 800506a:	0013      	movs	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	189b      	adds	r3, r3, r2
 8005070:	43db      	mvns	r3, r3
 8005072:	400b      	ands	r3, r1
 8005074:	001a      	movs	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	435b      	muls	r3, r3
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	434b      	muls	r3, r1
 800507e:	431a      	orrs	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}

0800508c <LL_GPIO_SetPinPull>:
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	435b      	muls	r3, r3
 80050a0:	001a      	movs	r2, r3
 80050a2:	0013      	movs	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	43db      	mvns	r3, r3
 80050aa:	400b      	ands	r3, r1
 80050ac:	001a      	movs	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	435b      	muls	r3, r3
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	434b      	muls	r3, r1
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	60da      	str	r2, [r3, #12]
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b004      	add	sp, #16
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <LL_GPIO_SetAFPin_0_7>:
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a19      	ldr	r1, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	435b      	muls	r3, r3
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4353      	muls	r3, r2
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	435a      	muls	r2, r3
 80050e0:	0013      	movs	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	43db      	mvns	r3, r3
 80050e8:	400b      	ands	r3, r1
 80050ea:	001a      	movs	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	435b      	muls	r3, r3
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	434b      	muls	r3, r1
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	434b      	muls	r3, r1
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	434b      	muls	r3, r1
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b004      	add	sp, #16
 8005108:	bd80      	pop	{r7, pc}

0800510a <LL_GPIO_SetAFPin_8_15>:
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	0a12      	lsrs	r2, r2, #8
 8005122:	4353      	muls	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	0a12      	lsrs	r2, r2, #8
 8005128:	4353      	muls	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0a12      	lsrs	r2, r2, #8
 800512e:	435a      	muls	r2, r3
 8005130:	0013      	movs	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	43db      	mvns	r3, r3
 8005138:	400b      	ands	r3, r1
 800513a:	001a      	movs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	0a09      	lsrs	r1, r1, #8
 8005144:	434b      	muls	r3, r1
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	0a09      	lsrs	r1, r1, #8
 800514a:	434b      	muls	r3, r1
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	0a09      	lsrs	r1, r1, #8
 8005150:	434b      	muls	r3, r1
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	434b      	muls	r3, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}

08005164 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005172:	e048      	b.n	8005206 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2101      	movs	r1, #1
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4091      	lsls	r1, r2
 800517e:	000a      	movs	r2, r1
 8005180:	4013      	ands	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d03a      	beq.n	8005200 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <LL_GPIO_Init+0x36>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d10e      	bne.n	80051b8 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff ff56 	bl	8005054 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ff39 	bl	800502a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff ff63 	bl	800508c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d111      	bne.n	80051f2 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2bff      	cmp	r3, #255	; 0xff
 80051d2:	d807      	bhi.n	80051e4 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f7ff ff71 	bl	80050c4 <LL_GPIO_SetAFPin_0_7>
 80051e2:	e006      	b.n	80051f2 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7ff ff8c 	bl	800510a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f7ff fef9 	bl	8004ff2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	40da      	lsrs	r2, r3
 800520e:	1e13      	subs	r3, r2, #0
 8005210:	d1b0      	bne.n	8005174 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b004      	add	sp, #16
 800521a:	bd80      	pop	{r7, pc}

0800521c <LL_TIM_SetPrescaler>:
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}

08005234 <LL_TIM_SetAutoReload>:
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}

0800524c <LL_TIM_SetRepetitionCounter>:
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <LL_TIM_OC_SetCompareCH1>:
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}

0800527c <LL_TIM_OC_SetCompareCH2>:
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}

08005294 <LL_TIM_OC_SetCompareCH3>:
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}

080052ac <LL_TIM_OC_SetCompareCH4>:
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	2201      	movs	r2, #1
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	615a      	str	r2, [r3, #20]
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <LL_TIM_Init+0xe8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d008      	beq.n	800530a <LL_TIM_Init+0x2a>
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	05db      	lsls	r3, r3, #23
 80052fe:	429a      	cmp	r2, r3
 8005300:	d003      	beq.n	800530a <LL_TIM_Init+0x2a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a31      	ldr	r2, [pc, #196]	; (80053cc <LL_TIM_Init+0xec>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d107      	bne.n	800531a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2270      	movs	r2, #112	; 0x70
 800530e:	4393      	bics	r3, r2
 8005310:	001a      	movs	r2, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <LL_TIM_Init+0xe8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <LL_TIM_Init+0x74>
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	05db      	lsls	r3, r3, #23
 8005328:	429a      	cmp	r2, r3
 800532a:	d013      	beq.n	8005354 <LL_TIM_Init+0x74>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a27      	ldr	r2, [pc, #156]	; (80053cc <LL_TIM_Init+0xec>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <LL_TIM_Init+0x74>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <LL_TIM_Init+0xf0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <LL_TIM_Init+0x74>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <LL_TIM_Init+0xf4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <LL_TIM_Init+0x74>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <LL_TIM_Init+0xf8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <LL_TIM_Init+0x74>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a23      	ldr	r2, [pc, #140]	; (80053dc <LL_TIM_Init+0xfc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d106      	bne.n	8005362 <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <LL_TIM_Init+0x100>)
 8005358:	401a      	ands	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	0011      	movs	r1, r2
 8005370:	0018      	movs	r0, r3
 8005372:	f7ff ff5f 	bl	8005234 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	001a      	movs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0011      	movs	r1, r2
 8005380:	0018      	movs	r0, r3
 8005382:	f7ff ff4b 	bl	800521c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <LL_TIM_Init+0xe8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00b      	beq.n	80053a6 <LL_TIM_Init+0xc6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <LL_TIM_Init+0xf4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <LL_TIM_Init+0xc6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <LL_TIM_Init+0xf8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <LL_TIM_Init+0xc6>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a0e      	ldr	r2, [pc, #56]	; (80053dc <LL_TIM_Init+0xfc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d106      	bne.n	80053b4 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7ff ff4c 	bl	800524c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7ff ff84 	bl	80052c4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40002000 	.word	0x40002000
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	fffffcff 	.word	0xfffffcff

080053e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80053f0:	2317      	movs	r3, #23
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	015b      	lsls	r3, r3, #5
 80053fe:	429a      	cmp	r2, r3
 8005400:	d036      	beq.n	8005470 <LL_TIM_OC_Init+0x8c>
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	015b      	lsls	r3, r3, #5
 8005408:	429a      	cmp	r2, r3
 800540a:	d83c      	bhi.n	8005486 <LL_TIM_OC_Init+0xa2>
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	429a      	cmp	r2, r3
 8005414:	d021      	beq.n	800545a <LL_TIM_OC_Init+0x76>
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	429a      	cmp	r2, r3
 800541e:	d832      	bhi.n	8005486 <LL_TIM_OC_Init+0xa2>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d003      	beq.n	800542e <LL_TIM_OC_Init+0x4a>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b10      	cmp	r3, #16
 800542a:	d00b      	beq.n	8005444 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800542c:	e02b      	b.n	8005486 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800542e:	2317      	movs	r3, #23
 8005430:	18fc      	adds	r4, r7, r3
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	0011      	movs	r1, r2
 8005438:	0018      	movs	r0, r3
 800543a:	f000 f883 	bl	8005544 <OC1Config>
 800543e:	0003      	movs	r3, r0
 8005440:	7023      	strb	r3, [r4, #0]
      break;
 8005442:	e021      	b.n	8005488 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005444:	2317      	movs	r3, #23
 8005446:	18fc      	adds	r4, r7, r3
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	0011      	movs	r1, r2
 800544e:	0018      	movs	r0, r3
 8005450:	f000 f8fc 	bl	800564c <OC2Config>
 8005454:	0003      	movs	r3, r0
 8005456:	7023      	strb	r3, [r4, #0]
      break;
 8005458:	e016      	b.n	8005488 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800545a:	2317      	movs	r3, #23
 800545c:	18fc      	adds	r4, r7, r3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0011      	movs	r1, r2
 8005464:	0018      	movs	r0, r3
 8005466:	f000 f97b 	bl	8005760 <OC3Config>
 800546a:	0003      	movs	r3, r0
 800546c:	7023      	strb	r3, [r4, #0]
      break;
 800546e:	e00b      	b.n	8005488 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005470:	2317      	movs	r3, #23
 8005472:	18fc      	adds	r4, r7, r3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f9fa 	bl	8005874 <OC4Config>
 8005480:	0003      	movs	r3, r0
 8005482:	7023      	strb	r3, [r4, #0]
      break;
 8005484:	e000      	b.n	8005488 <LL_TIM_OC_Init+0xa4>
      break;
 8005486:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8005488:	2317      	movs	r3, #23
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	781b      	ldrb	r3, [r3, #0]
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b007      	add	sp, #28
 8005494:	bd90      	pop	{r4, r7, pc}
	...

08005498 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	4393      	bics	r3, r2
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	7b12      	ldrb	r2, [r2, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <LL_TIM_BDTR_Init+0x90>)
 80054b8:	401a      	ands	r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <LL_TIM_BDTR_Init+0x94>)
 80054c6:	401a      	ands	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a17      	ldr	r2, [pc, #92]	; (8005530 <LL_TIM_BDTR_Init+0x98>)
 80054d4:	401a      	ands	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <LL_TIM_BDTR_Init+0x9c>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	89d2      	ldrh	r2, [r2, #14]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a12      	ldr	r2, [pc, #72]	; (8005538 <LL_TIM_BDTR_Init+0xa0>)
 80054f0:	401a      	ands	r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a0f      	ldr	r2, [pc, #60]	; (800553c <LL_TIM_BDTR_Init+0xa4>)
 80054fe:	401a      	ands	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <LL_TIM_BDTR_Init+0xa8>)
 800550c:	401a      	ands	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800551c:	2300      	movs	r3, #0
}
 800551e:	0018      	movs	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	b004      	add	sp, #16
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	fffffcff 	.word	0xfffffcff
 800552c:	fffffbff 	.word	0xfffffbff
 8005530:	fffff7ff 	.word	0xfffff7ff
 8005534:	ffffefff 	.word	0xffffefff
 8005538:	ffffdfff 	.word	0xffffdfff
 800553c:	ffffbfff 	.word	0xffffbfff
 8005540:	ffff7fff 	.word	0xffff7fff

08005544 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	2201      	movs	r2, #1
 8005554:	4393      	bics	r3, r2
 8005556:	001a      	movs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2203      	movs	r2, #3
 8005572:	4393      	bics	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2270      	movs	r2, #112	; 0x70
 800557a:	4393      	bics	r3, r2
 800557c:	001a      	movs	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2202      	movs	r2, #2
 800558a:	4393      	bics	r3, r2
 800558c:	001a      	movs	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2201      	movs	r2, #1
 800559a:	4393      	bics	r3, r2
 800559c:	001a      	movs	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <OC1Config+0xf0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <OC1Config+0x82>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a21      	ldr	r2, [pc, #132]	; (8005638 <OC1Config+0xf4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <OC1Config+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <OC1Config+0xf8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <OC1Config+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <OC1Config+0xfc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d120      	bne.n	8005608 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4393      	bics	r3, r2
 80055cc:	001a      	movs	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2204      	movs	r2, #4
 80055dc:	4393      	bics	r3, r2
 80055de:	001a      	movs	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4a15      	ldr	r2, [pc, #84]	; (8005644 <OC1Config+0x100>)
 80055ee:	401a      	ands	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <OC1Config+0x104>)
 80055fc:	401a      	ands	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f7ff fe21 	bl	8005264 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005628:	2300      	movs	r3, #0
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b006      	add	sp, #24
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	fffffeff 	.word	0xfffffeff
 8005648:	fffffdff 	.word	0xfffffdff

0800564c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	2210      	movs	r2, #16
 800565c:	4393      	bics	r3, r2
 800565e:	001a      	movs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a31      	ldr	r2, [pc, #196]	; (8005740 <OC2Config+0xf4>)
 800567a:	4013      	ands	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a30      	ldr	r2, [pc, #192]	; (8005744 <OC2Config+0xf8>)
 8005682:	401a      	ands	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2220      	movs	r2, #32
 8005692:	4393      	bics	r3, r2
 8005694:	001a      	movs	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2210      	movs	r2, #16
 80056a4:	4393      	bics	r3, r2
 80056a6:	001a      	movs	r2, r3
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a24      	ldr	r2, [pc, #144]	; (8005748 <OC2Config+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <OC2Config+0x86>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a23      	ldr	r2, [pc, #140]	; (800574c <OC2Config+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <OC2Config+0x86>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <OC2Config+0x104>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <OC2Config+0x86>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a21      	ldr	r2, [pc, #132]	; (8005754 <OC2Config+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d121      	bne.n	8005716 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2280      	movs	r2, #128	; 0x80
 80056d6:	4393      	bics	r3, r2
 80056d8:	001a      	movs	r2, r3
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	019b      	lsls	r3, r3, #6
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	4393      	bics	r3, r2
 80056ea:	001a      	movs	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <OC2Config+0x10c>)
 80056fa:	401a      	ands	r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4a14      	ldr	r2, [pc, #80]	; (800575c <OC2Config+0x110>)
 800570a:	401a      	ands	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff fda6 	bl	800527c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	b006      	add	sp, #24
 800573e:	bd80      	pop	{r7, pc}
 8005740:	fffffcff 	.word	0xfffffcff
 8005744:	ffff8fff 	.word	0xffff8fff
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	fffffbff 	.word	0xfffffbff
 800575c:	fffff7ff 	.word	0xfffff7ff

08005760 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4a37      	ldr	r2, [pc, #220]	; (800584c <OC3Config+0xec>)
 8005770:	401a      	ands	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2203      	movs	r2, #3
 800578c:	4393      	bics	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2270      	movs	r2, #112	; 0x70
 8005794:	4393      	bics	r3, r2
 8005796:	001a      	movs	r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <OC3Config+0xf0>)
 80057a4:	401a      	ands	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <OC3Config+0xec>)
 80057b4:	401a      	ands	r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a24      	ldr	r2, [pc, #144]	; (8005854 <OC3Config+0xf4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <OC3Config+0x80>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a23      	ldr	r2, [pc, #140]	; (8005858 <OC3Config+0xf8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <OC3Config+0x80>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a22      	ldr	r2, [pc, #136]	; (800585c <OC3Config+0xfc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <OC3Config+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <OC3Config+0x100>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d11f      	bne.n	8005820 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4a20      	ldr	r2, [pc, #128]	; (8005864 <OC3Config+0x104>)
 80057e4:	401a      	ands	r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	029b      	lsls	r3, r3, #10
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <OC3Config+0x108>)
 80057f4:	401a      	ands	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4a1a      	ldr	r2, [pc, #104]	; (800586c <OC3Config+0x10c>)
 8005804:	401a      	ands	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <OC3Config+0x110>)
 8005814:	401a      	ands	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	015b      	lsls	r3, r3, #5
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0011      	movs	r1, r2
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff fd2d 	bl	8005294 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b006      	add	sp, #24
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	fffffeff 	.word	0xfffffeff
 8005850:	fffffdff 	.word	0xfffffdff
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	fffff7ff 	.word	0xfffff7ff
 8005868:	fffffbff 	.word	0xfffffbff
 800586c:	ffffefff 	.word	0xffffefff
 8005870:	ffffdfff 	.word	0xffffdfff

08005874 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <OC4Config+0xbc>)
 8005884:	401a      	ands	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a25      	ldr	r2, [pc, #148]	; (8005934 <OC4Config+0xc0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a24      	ldr	r2, [pc, #144]	; (8005938 <OC4Config+0xc4>)
 80058a8:	401a      	ands	r2, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <OC4Config+0xc8>)
 80058b8:	401a      	ands	r2, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	031b      	lsls	r3, r3, #12
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4a1a      	ldr	r2, [pc, #104]	; (8005930 <OC4Config+0xbc>)
 80058c8:	401a      	ands	r2, r3
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	031b      	lsls	r3, r3, #12
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <OC4Config+0xcc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00b      	beq.n	80058f4 <OC4Config+0x80>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a19      	ldr	r2, [pc, #100]	; (8005944 <OC4Config+0xd0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <OC4Config+0x80>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <OC4Config+0xd4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <OC4Config+0x80>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <OC4Config+0xd8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d107      	bne.n	8005904 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <OC4Config+0xdc>)
 80058f8:	401a      	ands	r2, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	019b      	lsls	r3, r3, #6
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0011      	movs	r1, r2
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff fcc7 	bl	80052ac <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005924:	2300      	movs	r3, #0
}
 8005926:	0018      	movs	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	b006      	add	sp, #24
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	ffffefff 	.word	0xffffefff
 8005934:	fffffcff 	.word	0xfffffcff
 8005938:	ffff8fff 	.word	0xffff8fff
 800593c:	ffffdfff 	.word	0xffffdfff
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800
 8005950:	ffffbfff 	.word	0xffffbfff

08005954 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <LL_mDelay+0x40>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005962:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	d00c      	beq.n	8005984 <LL_mDelay+0x30>
  {
    Delay++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3301      	adds	r3, #1
 800596e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8005970:	e008      	b.n	8005984 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <LL_mDelay+0x40>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	025b      	lsls	r3, r3, #9
 800597a:	4013      	ands	r3, r2
 800597c:	d002      	beq.n	8005984 <LL_mDelay+0x30>
    {
      Delay--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3b01      	subs	r3, #1
 8005982:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f3      	bne.n	8005972 <LL_mDelay+0x1e>
    }
  }
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}
 8005994:	e000e010 	.word	0xe000e010

08005998 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <LL_SetSystemCoreClock+0x18>)
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b002      	add	sp, #8
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	20000014 	.word	0x20000014

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	2600      	movs	r6, #0
 80059b8:	4d0c      	ldr	r5, [pc, #48]	; (80059ec <__libc_init_array+0x38>)
 80059ba:	4c0d      	ldr	r4, [pc, #52]	; (80059f0 <__libc_init_array+0x3c>)
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	2600      	movs	r6, #0
 80059c6:	f000 f821 	bl	8005a0c <_init>
 80059ca:	4d0a      	ldr	r5, [pc, #40]	; (80059f4 <__libc_init_array+0x40>)
 80059cc:	4c0a      	ldr	r4, [pc, #40]	; (80059f8 <__libc_init_array+0x44>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	00b3      	lsls	r3, r6, #2
 80059da:	58eb      	ldr	r3, [r5, r3]
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	00b3      	lsls	r3, r6, #2
 80059e4:	58eb      	ldr	r3, [r5, r3]
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08005da4 	.word	0x08005da4
 80059f0:	08005da4 	.word	0x08005da4
 80059f4:	08005da4 	.word	0x08005da4
 80059f8:	08005da8 	.word	0x08005da8

080059fc <memset>:
 80059fc:	0003      	movs	r3, r0
 80059fe:	1882      	adds	r2, r0, r2
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d100      	bne.n	8005a06 <memset+0xa>
 8005a04:	4770      	bx	lr
 8005a06:	7019      	strb	r1, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	e7f9      	b.n	8005a00 <memset+0x4>

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
