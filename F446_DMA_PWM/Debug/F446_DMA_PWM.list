
F446_DMA_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003688  08003688  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003690  08003690  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08003698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000032c  080039c4  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080039c4  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a40  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  00028d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ef8  00000000  00000000  0002bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b3e  00000000  00000000  0004fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77df  00000000  00000000  000596ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  00130ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000032c 	.word	0x2000032c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003640 	.word	0x08003640

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000330 	.word	0x20000330
 8000200:	08003640 	.word	0x08003640

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <__NVIC_GetPriorityGrouping+0x18>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	f003 0307 	and.w	r3, r3, #7
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	2b00      	cmp	r3, #0
 8000534:	db0b      	blt.n	800054e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 021f 	and.w	r2, r3, #31
 800053c:	4907      	ldr	r1, [pc, #28]	; (800055c <__NVIC_EnableIRQ+0x38>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	095b      	lsrs	r3, r3, #5
 8000544:	2001      	movs	r0, #1
 8000546:	fa00 f202 	lsl.w	r2, r0, r2
 800054a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000e100 	.word	0xe000e100

08000560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	db0a      	blt.n	800058a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	490c      	ldr	r1, [pc, #48]	; (80005ac <__NVIC_SetPriority+0x4c>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	0112      	lsls	r2, r2, #4
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	440b      	add	r3, r1
 8000584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000588:	e00a      	b.n	80005a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <__NVIC_SetPriority+0x50>)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	3b04      	subs	r3, #4
 8000598:	0112      	lsls	r2, r2, #4
 800059a:	b2d2      	uxtb	r2, r2
 800059c:	440b      	add	r3, r1
 800059e:	761a      	strb	r2, [r3, #24]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000e100 	.word	0xe000e100
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	f1c3 0307 	rsb	r3, r3, #7
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	bf28      	it	cs
 80005d2:	2304      	movcs	r3, #4
 80005d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3304      	adds	r3, #4
 80005da:	2b06      	cmp	r3, #6
 80005dc:	d902      	bls.n	80005e4 <NVIC_EncodePriority+0x30>
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3b03      	subs	r3, #3
 80005e2:	e000      	b.n	80005e6 <NVIC_EncodePriority+0x32>
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43da      	mvns	r2, r3
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	401a      	ands	r2, r3
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43d9      	mvns	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	4313      	orrs	r3, r2
         );
}
 800060e:	4618      	mov	r0, r3
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <LL_DMA_EnableStream+0x3c>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <LL_DMA_EnableStream+0x3c>)
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	440a      	add	r2, r1
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	440a      	add	r2, r1
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	08003658 	.word	0x08003658

0800065c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LL_DMA_SetDataTransferDirection+0x44>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800067c:	4908      	ldr	r1, [pc, #32]	; (80006a0 <LL_DMA_SetDataTransferDirection+0x44>)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	440b      	add	r3, r1
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	440b      	add	r3, r1
 800068a:	4619      	mov	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	600b      	str	r3, [r1, #0]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08003658 	.word	0x08003658

080006a4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LL_DMA_SetMode+0x44>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80006c4:	4908      	ldr	r1, [pc, #32]	; (80006e8 <LL_DMA_SetMode+0x44>)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	440b      	add	r3, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	440b      	add	r3, r1
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	08003658 	.word	0x08003658

080006ec <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LL_DMA_SetPeriphIncMode+0x44>)
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800070c:	4908      	ldr	r1, [pc, #32]	; (8000730 <LL_DMA_SetPeriphIncMode+0x44>)
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	440b      	add	r3, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	440b      	add	r3, r1
 800071a:	4619      	mov	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4313      	orrs	r3, r2
 8000720:	600b      	str	r3, [r1, #0]
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	08003658 	.word	0x08003658

08000734 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LL_DMA_SetMemoryIncMode+0x44>)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <LL_DMA_SetMemoryIncMode+0x44>)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	440b      	add	r3, r1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	440b      	add	r3, r1
 8000762:	4619      	mov	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	600b      	str	r3, [r1, #0]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	08003658 	.word	0x08003658

0800077c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LL_DMA_SetPeriphSize+0x44>)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800079c:	4908      	ldr	r1, [pc, #32]	; (80007c0 <LL_DMA_SetPeriphSize+0x44>)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	440b      	add	r3, r1
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	440b      	add	r3, r1
 80007aa:	4619      	mov	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	600b      	str	r3, [r1, #0]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	08003658 	.word	0x08003658

080007c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LL_DMA_SetMemorySize+0x44>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4413      	add	r3, r2
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80007e4:	4908      	ldr	r1, [pc, #32]	; (8000808 <LL_DMA_SetMemorySize+0x44>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	440b      	add	r3, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	440b      	add	r3, r1
 80007f2:	4619      	mov	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	600b      	str	r3, [r1, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	08003658 	.word	0x08003658

0800080c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800082c:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	440b      	add	r3, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	440b      	add	r3, r1
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	600b      	str	r3, [r1, #0]
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	08003658 	.word	0x08003658

08000854 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LL_DMA_SetDataLength+0x44>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	041b      	lsls	r3, r3, #16
 8000874:	4908      	ldr	r1, [pc, #32]	; (8000898 <LL_DMA_SetDataLength+0x44>)
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	440a      	add	r2, r1
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	4611      	mov	r1, r2
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	440a      	add	r2, r1
 8000882:	4611      	mov	r1, r2
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4313      	orrs	r3, r2
 8000888:	604b      	str	r3, [r1, #4]
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	08003658 	.word	0x08003658

0800089c <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LL_DMA_SetChannelSelection+0x44>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80008bc:	4908      	ldr	r1, [pc, #32]	; (80008e0 <LL_DMA_SetChannelSelection+0x44>)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	440b      	add	r3, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	440b      	add	r3, r1
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	600b      	str	r3, [r1, #0]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	08003658 	.word	0x08003658

080008e4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <LL_DMA_DisableFifoMode+0x3c>)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <LL_DMA_DisableFifoMode+0x3c>)
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	440a      	add	r2, r1
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	4611      	mov	r1, r2
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	440a      	add	r2, r1
 800090c:	f023 0304 	bic.w	r3, r3, #4
 8000910:	6153      	str	r3, [r2, #20]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08003658 	.word	0x08003658

08000924 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <LL_DMA_SetMemoryAddress+0x2c>)
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	08003658 	.word	0x08003658

08000954 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <LL_DMA_SetPeriphAddress+0x2c>)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6093      	str	r3, [r2, #8]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	08003658 	.word	0x08003658

08000984 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f043 0201 	orr.w	r2, r3, #1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d01c      	beq.n	8000a4a <LL_TIM_OC_DisableFast+0x4a>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d017      	beq.n	8000a46 <LL_TIM_OC_DisableFast+0x46>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b10      	cmp	r3, #16
 8000a1a:	d012      	beq.n	8000a42 <LL_TIM_OC_DisableFast+0x42>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b40      	cmp	r3, #64	; 0x40
 8000a20:	d00d      	beq.n	8000a3e <LL_TIM_OC_DisableFast+0x3e>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a28:	d007      	beq.n	8000a3a <LL_TIM_OC_DisableFast+0x3a>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a30:	d101      	bne.n	8000a36 <LL_TIM_OC_DisableFast+0x36>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e00a      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e008      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <LL_TIM_OC_DisableFast+0x4c>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3318      	adds	r3, #24
 8000a52:	4619      	mov	r1, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LL_TIM_OC_DisableFast+0x84>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	440b      	add	r3, r1
 8000a5c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	4908      	ldr	r1, [pc, #32]	; (8000a88 <LL_TIM_OC_DisableFast+0x88>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	408b      	lsls	r3, r1
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	401a      	ands	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	601a      	str	r2, [r3, #0]

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	08003660 	.word	0x08003660
 8000a88:	08003668 	.word	0x08003668

08000a8c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d01c      	beq.n	8000ad6 <LL_TIM_OC_EnablePreload+0x4a>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d017      	beq.n	8000ad2 <LL_TIM_OC_EnablePreload+0x46>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d012      	beq.n	8000ace <LL_TIM_OC_EnablePreload+0x42>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b40      	cmp	r3, #64	; 0x40
 8000aac:	d00d      	beq.n	8000aca <LL_TIM_OC_EnablePreload+0x3e>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab4:	d007      	beq.n	8000ac6 <LL_TIM_OC_EnablePreload+0x3a>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000abc:	d101      	bne.n	8000ac2 <LL_TIM_OC_EnablePreload+0x36>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e00a      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	e008      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e006      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000aca:	2303      	movs	r3, #3
 8000acc:	e004      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e002      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <LL_TIM_OC_EnablePreload+0x4c>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3318      	adds	r3, #24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LL_TIM_OC_EnablePreload+0x80>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <LL_TIM_OC_EnablePreload+0x84>)
 8000af2:	5ccb      	ldrb	r3, [r1, r3]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2308      	movs	r3, #8
 8000af8:	408b      	lsls	r3, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	08003660 	.word	0x08003660
 8000b10:	08003668 	.word	0x08003668

08000b14 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b26:	f023 0307 	bic.w	r3, r3, #7
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	609a      	str	r2, [r3, #8]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	605a      	str	r2, [r3, #4]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	609a      	str	r2, [r3, #8]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_TIM_EnableDMAReq_UPDATE>:
  * @rmtoll DIER         UDE           LL_TIM_EnableDMAReq_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60da      	str	r2, [r3, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	615a      	str	r2, [r3, #20]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <LL_SYSCFG_SetEXTISource+0x58>)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3302      	adds	r3, #2
 8000c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	0c1b      	lsrs	r3, r3, #16
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	ea02 0103 	and.w	r1, r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	0c1b      	lsrs	r3, r3, #16
 8000c14:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	fa93 f3a3 	rbit	r3, r3
 8000c1c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	fab3 f383 	clz	r3, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	fa03 f202 	lsl.w	r2, r3, r2
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <LL_SYSCFG_SetEXTISource+0x58>)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	430a      	orrs	r2, r1
 8000c36:	3302      	adds	r3, #2
 8000c38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40013800 	.word	0x40013800

08000c4c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	613b      	str	r3, [r7, #16]
  return result;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2103      	movs	r1, #3
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	fa93 f3a3 	rbit	r3, r3
 8000c86:	61bb      	str	r3, [r7, #24]
  return result;
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b089      	sub	sp, #36	; 0x24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	613b      	str	r3, [r7, #16]
  return result;
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	401a      	ands	r2, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	60da      	str	r2, [r3, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3724      	adds	r7, #36	; 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40023800 	.word	0x40023800

08000d38 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40023800 	.word	0x40023800

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f000 fada 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f83c 	bl	8000dec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config( 180000 );
 8000d74:	4819      	ldr	r0, [pc, #100]	; (8000ddc <main+0x74>)
 8000d76:	f000 fc44 	bl	8001602 <HAL_SYSTICK_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7a:	f000 f9f7 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7e:	f000 f9dd 	bl	800113c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d82:	f000 f98b 	bl	800109c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d86:	f000 f8a3 	bl	8000ed0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d8a:	f000 f917 	bl	8000fbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8000d8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d92:	f7ff fdf7 	bl	8000984 <LL_TIM_EnableCounter>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000d96:	2101      	movs	r1, #1
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <main+0x78>)
 8000d9a:	f7ff fc3f 	bl	800061c <LL_DMA_EnableStream>
  LL_TIM_EnableDMAReq_UPDATE(TIM6);
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <main+0x7c>)
 8000da0:	f7ff fef0 	bl	8000b84 <LL_TIM_EnableDMAReq_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <main+0x7c>)
 8000da6:	f7ff fded 	bl	8000984 <LL_TIM_EnableCounter>
  LL_TIM_SetAutoReload(TIM6, 2500);
 8000daa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <main+0x7c>)
 8000db0:	f7ff fe18 	bl	80009e4 <LL_TIM_SetAutoReload>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Pokus = Pokus - 1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <main+0x80>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <main+0x80>)
 8000dbe:	801a      	strh	r2, [r3, #0]
    if(Pokus==0) Pokus = 1000;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <main+0x80>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d103      	bne.n	8000dd0 <main+0x68>
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <main+0x80>)
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	801a      	strh	r2, [r3, #0]
    HAL_Delay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f000 fb18 	bl	8001408 <HAL_Delay>
    Pokus = Pokus - 1;
 8000dd8:	e7ec      	b.n	8000db4 <main+0x4c>
 8000dda:	bf00      	nop
 8000ddc:	0002bf20 	.word	0x0002bf20
 8000de0:	40026000 	.word	0x40026000
 8000de4:	40001000 	.word	0x40001000
 8000de8:	20000348 	.word	0x20000348

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fc18 	bl	8003630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <SystemClock_Config+0xdc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <SystemClock_Config+0xe0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e50:	2310      	movs	r3, #16
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e54:	2302      	movs	r3, #2
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e60:	23b4      	movs	r3, #180	; 0xb4
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 ff37 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e80:	f000 f9ac 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e84:	f000 fbca 	bl	800161c <HAL_PWREx_EnableOverDrive>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e8e:	f000 f9a5 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2302      	movs	r3, #2
 8000e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2105      	movs	r1, #5
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fc03 	bl	80016bc <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ebc:	f000 f98e 	bl	80011dc <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3750      	adds	r7, #80	; 0x50
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2220      	movs	r2, #32
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fb9e 	bl	8003630 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ff17 	bl	8000d38 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 179;
 8000f0a:	23b3      	movs	r3, #179	; 0xb3
 8000f0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 999;
 8000f12:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f26:	f001 fdf9 	bl	8002b1c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000f2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2e:	f7ff fd49 	bl	80009c4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f32:	2100      	movs	r1, #0
 8000f34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f38:	f7ff fdec 	bl	8000b14 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f42:	f7ff fda3 	bl	8000a8c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f46:	2360      	movs	r3, #96	; 0x60
 8000f48:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f66:	f001 fe73 	bl	8002c50 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f70:	f7ff fd46 	bl	8000a00 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f74:	2100      	movs	r1, #0
 8000f76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f7a:	f7ff fde0 	bl	8000b3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f82:	f7ff fdef 	bl	8000b64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff febe 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM2_Init+0xe8>)
 8000faa:	f001 fb59 	bl	8002660 <LL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000

08000fbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f7ff feb1 	bl	8000d38 <LL_APB1_GRP1_EnableClock>

  /* TIM6 DMA Init */

  /* TIM6_UP Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_7);
 8000fd6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000fda:	2101      	movs	r1, #1
 8000fdc:	482b      	ldr	r0, [pc, #172]	; (800108c <MX_TIM6_Init+0xd0>)
 8000fde:	f7ff fc5d 	bl	800089c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_TIM6_Init+0xd0>)
 8000fe8:	f7ff fb38 	bl	800065c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4826      	ldr	r0, [pc, #152]	; (800108c <MX_TIM6_Init+0xd0>)
 8000ff2:	f7ff fc0b 	bl	800080c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4823      	ldr	r0, [pc, #140]	; (800108c <MX_TIM6_Init+0xd0>)
 8000ffe:	f7ff fb51 	bl	80006a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	4821      	ldr	r0, [pc, #132]	; (800108c <MX_TIM6_Init+0xd0>)
 8001008:	f7ff fb70 	bl	80006ec <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 800100c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001010:	2101      	movs	r1, #1
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <MX_TIM6_Init+0xd0>)
 8001014:	f7ff fb8e 	bl	8000734 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800101c:	2101      	movs	r1, #1
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <MX_TIM6_Init+0xd0>)
 8001020:	f7ff fbac 	bl	800077c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001028:	2101      	movs	r1, #1
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM6_Init+0xd0>)
 800102c:	f7ff fbca 	bl	80007c4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8001030:	2101      	movs	r1, #1
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <MX_TIM6_Init+0xd0>)
 8001034:	f7ff fc56 	bl	80008e4 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN TIM6_Init 1 */
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)sinusovka);
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM6_Init+0xd4>)
 800103a:	461a      	mov	r2, r3
 800103c:	2101      	movs	r1, #1
 800103e:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_TIM6_Init+0xd0>)
 8001040:	f7ff fc70 	bl	8000924 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, sizeof(sinusovka)/sizeof(sinusovka[0]));
 8001044:	22c8      	movs	r2, #200	; 0xc8
 8001046:	2101      	movs	r1, #1
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <MX_TIM6_Init+0xd0>)
 800104a:	f7ff fc03 	bl	8000854 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)(&(TIM2->CCR1)));
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_TIM6_Init+0xd8>)
 8001050:	2101      	movs	r1, #1
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_TIM6_Init+0xd0>)
 8001054:	f7ff fc7e 	bl	8000954 <LL_DMA_SetPeriphAddress>

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 179;
 8001058:	23b3      	movs	r3, #179	; 0xb3
 800105a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4999;
 8001060:	f241 3387 	movw	r3, #4999	; 0x1387
 8001064:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_TIM6_Init+0xdc>)
 800106c:	f001 fd56 	bl	8002b1c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <MX_TIM6_Init+0xdc>)
 8001072:	f7ff fc97 	bl	80009a4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001076:	2100      	movs	r1, #0
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM6_Init+0xdc>)
 800107a:	f7ff fd60 	bl	8000b3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_TIM6_Init+0xdc>)
 8001080:	f7ff fd70 	bl	8000b64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40026000 	.word	0x40026000
 8001090:	20000000 	.word	0x20000000
 8001094:	40000034 	.word	0x40000034
 8001098:	40001000 	.word	0x40001000

0800109c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	615a      	str	r2, [r3, #20]
 80010b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80010c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010ca:	f7ff fe35 	bl	8000d38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fe1a 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d4:	230c      	movs	r3, #12
 80010d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010d8:	2302      	movs	r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <MX_USART2_UART_Init+0x98>)
 80010f2:	f001 fab5 	bl	8002660 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010fa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001108:	230c      	movs	r3, #12
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_USART2_UART_Init+0x9c>)
 800111c:	f002 f9e4 	bl	80034e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x9c>)
 8001122:	f7ff fd4f 	bl	8000bc4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_USART2_UART_Init+0x9c>)
 8001128:	f7ff fd3c 	bl	8000ba4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3738      	adds	r7, #56	; 0x38
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020000 	.word	0x40020000
 8001138:	40004400 	.word	0x40004400

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001140:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001144:	f7ff fde0 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001148:	f7ff f9de 	bl	8000508 <__NVIC_GetPriorityGrouping>
 800114c:	4603      	mov	r3, r0
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fa2e 	bl	80005b4 <NVIC_EncodePriority>
 8001158:	4603      	mov	r3, r0
 800115a:	4619      	mov	r1, r3
 800115c:	200c      	movs	r0, #12
 800115e:	f7ff f9ff 	bl	8000560 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001162:	200c      	movs	r0, #12
 8001164:	f7ff f9de 	bl	8000524 <__NVIC_EnableIRQ>

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff fdc4 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001180:	2080      	movs	r0, #128	; 0x80
 8001182:	f7ff fdc1 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fdbe 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff fdbb 	bl	8000d08 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001192:	4910      	ldr	r1, [pc, #64]	; (80011d4 <MX_GPIO_Init+0x68>)
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fd2b 	bl	8000bf0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	603b      	str	r3, [r7, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	713b      	strb	r3, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	717b      	strb	r3, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011a8:	2302      	movs	r3, #2
 80011aa:	71bb      	strb	r3, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80011ac:	463b      	mov	r3, r7
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 f8d0 	bl	8002354 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <MX_GPIO_Init+0x6c>)
 80011bc:	f7ff fd75 	bl	8000caa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0x6c>)
 80011c8:	f7ff fd40 	bl	8000c4c <LL_GPIO_SetPinMode>

}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	00f00003 	.word	0x00f00003
 80011d8:	40020800 	.word	0x40020800

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_MspInit+0x4c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x4c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 f9c4 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Pokus++;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Handler+0x18>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <SysTick_Handler+0x18>)
 800128e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 f89a 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000348 	.word	0x20000348

0800129c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fa:	f7ff ffd7 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f002 f973 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff fd31 	bl	8000d68 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8001314:	08003698 	.word	0x08003698
  ldr r2, =_sbss
 8001318:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 800131c:	20000350 	.word	0x20000350

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f931 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff ff46 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f93b 	bl	8001602 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f911 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000320 	.word	0x20000320
 80013c0:	20000328 	.word	0x20000328
 80013c4:	20000324 	.word	0x20000324

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000328 	.word	0x20000328
 80013ec:	2000034c 	.word	0x2000034c

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000034c 	.word	0x2000034c

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000328 	.word	0x20000328

08001450 <__NVIC_SetPriorityGrouping>:
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_SetPriority>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff47 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff5c 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffb0 	bl	8001570 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001648:	f7ff fed2 	bl	80013f0 <HAL_GetTick>
 800164c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800164e:	e009      	b.n	8001664 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001650:	f7ff fece 	bl	80013f0 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800165e:	d901      	bls.n	8001664 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e01f      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d1ee      	bne.n	8001650 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff feba 	bl	80013f0 <HAL_GetTick>
 800167c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800167e:	e009      	b.n	8001694 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001680:	f7ff feb6 	bl	80013f0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168e:	d901      	bls.n	8001694 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e007      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a0:	d1ee      	bne.n	8001680 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	420e0040 	.word	0x420e0040
 80016b4:	40007000 	.word	0x40007000
 80016b8:	420e0044 	.word	0x420e0044

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d90c      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d044      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e067      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fe20 	bl	80013f0 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fe1c 	bl	80013f0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d20c      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fd80 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	08003670 	.word	0x08003670
 8001880:	20000320 	.word	0x20000320
 8001884:	20000324 	.word	0x20000324

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b0ae      	sub	sp, #184	; 0xb8
 800188e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ae:	4bcb      	ldr	r3, [pc, #812]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	f200 8206 	bhi.w	8001cc8 <HAL_RCC_GetSysClockFreq+0x440>
 80018bc:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	080018f9 	.word	0x080018f9
 80018c8:	08001cc9 	.word	0x08001cc9
 80018cc:	08001cc9 	.word	0x08001cc9
 80018d0:	08001cc9 	.word	0x08001cc9
 80018d4:	08001901 	.word	0x08001901
 80018d8:	08001cc9 	.word	0x08001cc9
 80018dc:	08001cc9 	.word	0x08001cc9
 80018e0:	08001cc9 	.word	0x08001cc9
 80018e4:	08001909 	.word	0x08001909
 80018e8:	08001cc9 	.word	0x08001cc9
 80018ec:	08001cc9 	.word	0x08001cc9
 80018f0:	08001cc9 	.word	0x08001cc9
 80018f4:	08001af9 	.word	0x08001af9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4bb9      	ldr	r3, [pc, #740]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x358>)
 80018fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80018fe:	e1e7      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4bb8      	ldr	r3, [pc, #736]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001906:	e1e3      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4bb4      	ldr	r3, [pc, #720]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001914:	4bb1      	ldr	r3, [pc, #708]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d071      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	4bae      	ldr	r3, [pc, #696]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	2200      	movs	r2, #0
 8001928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800192c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001946:	4622      	mov	r2, r4
 8001948:	462b      	mov	r3, r5
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0159      	lsls	r1, r3, #5
 8001954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001958:	0150      	lsls	r0, r2, #5
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4621      	mov	r1, r4
 8001960:	1a51      	subs	r1, r2, r1
 8001962:	6439      	str	r1, [r7, #64]	; 0x40
 8001964:	4629      	mov	r1, r5
 8001966:	eb63 0301 	sbc.w	r3, r3, r1
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001978:	4649      	mov	r1, r9
 800197a:	018b      	lsls	r3, r1, #6
 800197c:	4641      	mov	r1, r8
 800197e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001982:	4641      	mov	r1, r8
 8001984:	018a      	lsls	r2, r1, #6
 8001986:	4641      	mov	r1, r8
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	63b9      	str	r1, [r7, #56]	; 0x38
 800198c:	4649      	mov	r1, r9
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019a0:	4649      	mov	r1, r9
 80019a2:	00cb      	lsls	r3, r1, #3
 80019a4:	4641      	mov	r1, r8
 80019a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019aa:	4641      	mov	r1, r8
 80019ac:	00ca      	lsls	r2, r1, #3
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	4622      	mov	r2, r4
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ba:	462b      	mov	r3, r5
 80019bc:	460a      	mov	r2, r1
 80019be:	eb42 0303 	adc.w	r3, r2, r3
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d0:	4629      	mov	r1, r5
 80019d2:	024b      	lsls	r3, r1, #9
 80019d4:	4621      	mov	r1, r4
 80019d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019da:	4621      	mov	r1, r4
 80019dc:	024a      	lsls	r2, r1, #9
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80019f4:	f7fe fc06 	bl	8000204 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a02:	e067      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a04:	4b75      	ldr	r3, [pc, #468]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a1e:	2300      	movs	r3, #0
 8001a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a26:	4622      	mov	r2, r4
 8001a28:	462b      	mov	r3, r5
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0159      	lsls	r1, r3, #5
 8001a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a38:	0150      	lsls	r0, r2, #5
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a58:	4649      	mov	r1, r9
 8001a5a:	018b      	lsls	r3, r1, #6
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a62:	4641      	mov	r1, r8
 8001a64:	018a      	lsls	r2, r1, #6
 8001a66:	4641      	mov	r1, r8
 8001a68:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a86:	4692      	mov	sl, r2
 8001a88:	469b      	mov	fp, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	eb1a 0303 	adds.w	r3, sl, r3
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	462b      	mov	r3, r5
 8001a94:	eb4b 0303 	adc.w	r3, fp, r3
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	028b      	lsls	r3, r1, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	028a      	lsls	r2, r1, #10
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001abc:	2200      	movs	r2, #0
 8001abe:	673b      	str	r3, [r7, #112]	; 0x70
 8001ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8001ac2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ac6:	f7fe fb9d 	bl	8000204 <__aeabi_uldivmod>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4613      	mov	r3, r2
 8001ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad4:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001af6:	e0eb      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d06b      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	2200      	movs	r2, #0
 8001b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b22:	663b      	str	r3, [r7, #96]	; 0x60
 8001b24:	2300      	movs	r3, #0
 8001b26:	667b      	str	r3, [r7, #100]	; 0x64
 8001b28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	462b      	mov	r3, r5
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	0159      	lsls	r1, r3, #5
 8001b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3e:	0150      	lsls	r0, r2, #5
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4621      	mov	r1, r4
 8001b46:	1a51      	subs	r1, r2, r1
 8001b48:	61b9      	str	r1, [r7, #24]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b5e:	4659      	mov	r1, fp
 8001b60:	018b      	lsls	r3, r1, #6
 8001b62:	4651      	mov	r1, sl
 8001b64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b68:	4651      	mov	r1, sl
 8001b6a:	018a      	lsls	r2, r1, #6
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	ebb2 0801 	subs.w	r8, r2, r1
 8001b72:	4659      	mov	r1, fp
 8001b74:	eb63 0901 	sbc.w	r9, r3, r1
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	4699      	mov	r9, r3
 8001b90:	4623      	mov	r3, r4
 8001b92:	eb18 0303 	adds.w	r3, r8, r3
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	462b      	mov	r3, r5
 8001b9a:	eb49 0303 	adc.w	r3, r9, r3
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bac:	4629      	mov	r1, r5
 8001bae:	024b      	lsls	r3, r1, #9
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	024a      	lsls	r2, r1, #9
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bcc:	f7fe fb1a 	bl	8000204 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bda:	e065      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x420>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8001bfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c02:	4642      	mov	r2, r8
 8001c04:	464b      	mov	r3, r9
 8001c06:	f04f 0000 	mov.w	r0, #0
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	0159      	lsls	r1, r3, #5
 8001c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c14:	0150      	lsls	r0, r2, #5
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	1a51      	subs	r1, r2, r1
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	4649      	mov	r1, r9
 8001c22:	eb63 0301 	sbc.w	r3, r3, r1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c34:	4659      	mov	r1, fp
 8001c36:	018b      	lsls	r3, r1, #6
 8001c38:	4651      	mov	r1, sl
 8001c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3e:	4651      	mov	r1, sl
 8001c40:	018a      	lsls	r2, r1, #6
 8001c42:	4651      	mov	r1, sl
 8001c44:	1a54      	subs	r4, r2, r1
 8001c46:	4659      	mov	r1, fp
 8001c48:	eb63 0501 	sbc.w	r5, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	00eb      	lsls	r3, r5, #3
 8001c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5a:	00e2      	lsls	r2, r4, #3
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	461d      	mov	r5, r3
 8001c60:	4643      	mov	r3, r8
 8001c62:	18e3      	adds	r3, r4, r3
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	464b      	mov	r3, r9
 8001c68:	eb45 0303 	adc.w	r3, r5, r3
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c90:	2200      	movs	r2, #0
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c9a:	f7fe fab3 	bl	8000204 <__aeabi_uldivmod>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0f1b      	lsrs	r3, r3, #28
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cc6:	e003      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	37b8      	adds	r7, #184	; 0xb8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	00f42400 	.word	0x00f42400

08001ce8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e28d      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8083 	beq.w	8001e0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d08:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d019      	beq.n	8001d48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d14:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d20:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2c:	d00c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d112      	bne.n	8001d60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d46:	d10b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	4b84      	ldr	r3, [pc, #528]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d05b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x124>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d157      	bne.n	8001e0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e25a      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x90>
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xcc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xb4>
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a72      	ldr	r2, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xcc>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6b      	ldr	r2, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb18 	bl	80013f0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fb14 	bl	80013f0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e21f      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xdc>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb04 	bl	80013f0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fb00 	bl	80013f0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e20b      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x104>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06f      	beq.n	8001efa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e1a:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d017      	beq.n	8001e56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e26:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x186>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1d3      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4937      	ldr	r1, [pc, #220]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_OscConfig+0x278>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff faad 	bl	80013f0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff faa9 	bl	80013f0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1b4      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4925      	ldr	r1, [pc, #148]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_OscConfig+0x278>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fa8c 	bl	80013f0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff fa88 	bl	80013f0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e193      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d036      	beq.n	8001f74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff fa6c 	bl	80013f0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fa68 	bl	80013f0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e173      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x234>
 8001f3a:	e01b      	b.n	8001f74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff fa55 	bl	80013f0 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	e00e      	b.n	8001f68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fa51 	bl	80013f0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d907      	bls.n	8001f68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e15c      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	42470000 	.word	0x42470000
 8001f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ea      	bne.n	8001f4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8097 	beq.w	80020b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	4b83      	ldr	r3, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b79      	ldr	r3, [pc, #484]	; (8002198 <HAL_RCC_OscConfig+0x4b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x4b0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x4b0>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa11 	bl	80013f0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fa0d 	bl	80013f0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e118      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x4b0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x31e>
 8001ff8:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x358>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x340>
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x358>
 8002028:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	f023 0304 	bic.w	r3, r3, #4
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d015      	beq.n	8002074 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f9d2 	bl	80013f0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7ff f9ce 	bl	80013f0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0d7      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0ee      	beq.n	8002050 <HAL_RCC_OscConfig+0x368>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f9bc 	bl	80013f0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f9b8 	bl	80013f0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0c1      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002092:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ee      	bne.n	800207c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ad 	beq.w	8002214 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d060      	beq.n	8002188 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d145      	bne.n	800215a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_OscConfig+0x4b4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff f98c 	bl	80013f0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f988 	bl	80013f0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e093      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	071b      	lsls	r3, r3, #28
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x4b4>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f95d 	bl	80013f0 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff f959 	bl	80013f0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e064      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x452>
 8002158:	e05c      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x4b4>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f946 	bl	80013f0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff f942 	bl	80013f0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e04d      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x480>
 8002186:	e045      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e040      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000
 800219c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_RCC_OscConfig+0x538>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d030      	beq.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d129      	bne.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d122      	bne.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d8:	4293      	cmp	r3, r2
 80021da:	d119      	bne.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	3b01      	subs	r3, #1
 80021ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d10f      	bne.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <LL_EXTI_EnableIT_0_31+0x20>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <LL_EXTI_EnableIT_0_31+0x20>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40013c00 	.word	0x40013c00

08002248 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <LL_EXTI_DisableIT_0_31+0x24>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	43db      	mvns	r3, r3
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <LL_EXTI_DisableIT_0_31+0x24>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40013c00 	.word	0x40013c00

08002270 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <LL_EXTI_EnableEvent_0_31+0x20>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <LL_EXTI_EnableEvent_0_31+0x20>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]

}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40013c00 	.word	0x40013c00

08002294 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40013c00 	.word	0x40013c00

080022bc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4904      	ldr	r1, [pc, #16]	; (80022dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40013c00 	.word	0x40013c00

080022e0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4904      	ldr	r1, [pc, #16]	; (8002304 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]

}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40013c00 	.word	0x40013c00

08002308 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40013c00 	.word	0x40013c00

0800232c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	43db      	mvns	r3, r3
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800233e:	4013      	ands	r3, r2
 8002340:	60cb      	str	r3, [r1, #12]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40013c00 	.word	0x40013c00

08002354 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	791b      	ldrb	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d065      	beq.n	8002434 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d06c      	beq.n	800244a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	795b      	ldrb	r3, [r3, #5]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d01c      	beq.n	80023b2 <LL_EXTI_Init+0x5e>
 8002378:	2b02      	cmp	r3, #2
 800237a:	dc25      	bgt.n	80023c8 <LL_EXTI_Init+0x74>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <LL_EXTI_Init+0x32>
 8002380:	2b01      	cmp	r3, #1
 8002382:	d00b      	beq.n	800239c <LL_EXTI_Init+0x48>
 8002384:	e020      	b.n	80023c8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff82 	bl	8002294 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff45 	bl	8002224 <LL_EXTI_EnableIT_0_31>
          break;
 800239a:	e018      	b.n	80023ce <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff51 	bl	8002248 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff60 	bl	8002270 <LL_EXTI_EnableEvent_0_31>
          break;
 80023b0:	e00d      	b.n	80023ce <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff34 	bl	8002224 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff55 	bl	8002270 <LL_EXTI_EnableEvent_0_31>
          break;
 80023c6:	e002      	b.n	80023ce <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
          break;
 80023cc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	799b      	ldrb	r3, [r3, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d039      	beq.n	800244a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	799b      	ldrb	r3, [r3, #6]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d01c      	beq.n	8002418 <LL_EXTI_Init+0xc4>
 80023de:	2b03      	cmp	r3, #3
 80023e0:	dc25      	bgt.n	800242e <LL_EXTI_Init+0xda>
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d002      	beq.n	80023ec <LL_EXTI_Init+0x98>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d00b      	beq.n	8002402 <LL_EXTI_Init+0xae>
 80023ea:	e020      	b.n	800242e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff9b 	bl	800232c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff5e 	bl	80022bc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002400:	e024      	b.n	800244c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff6a 	bl	80022e0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff79 	bl	8002308 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002416:	e019      	b.n	800244c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff4d 	bl	80022bc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff6e 	bl	8002308 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800242c:	e00e      	b.n	800244c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
            break;
 8002432:	e00b      	b.n	800244c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff05 	bl	8002248 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff26 	bl	8002294 <LL_EXTI_DisableEvent_0_31>
 8002448:	e000      	b.n	800244c <LL_EXTI_Init+0xf8>
      }
 800244a:	bf00      	nop
  }
  return status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <LL_GPIO_SetPinMode>:
{
 8002456:	b480      	push	{r7}
 8002458:	b089      	sub	sp, #36	; 0x24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	613b      	str	r3, [r7, #16]
  return result;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2103      	movs	r1, #3
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	61bb      	str	r3, [r7, #24]
  return result;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3724      	adds	r7, #36	; 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_GPIO_SetPinOutputType>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	401a      	ands	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_GPIO_SetPinSpeed>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	613b      	str	r3, [r7, #16]
  return result;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2103      	movs	r1, #3
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	61bb      	str	r3, [r7, #24]
  return result;
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_GPIO_SetPinPull>:
{
 8002542:	b480      	push	{r7}
 8002544:	b089      	sub	sp, #36	; 0x24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	613b      	str	r3, [r7, #16]
  return result;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2103      	movs	r1, #3
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	61bb      	str	r3, [r7, #24]
  return result;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	60da      	str	r2, [r3, #12]
}
 8002594:	bf00      	nop
 8002596:	3724      	adds	r7, #36	; 0x24
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	613b      	str	r3, [r7, #16]
  return result;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	210f      	movs	r1, #15
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	61bb      	str	r3, [r7, #24]
  return result;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80025f2:	bf00      	nop
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025fe:	b480      	push	{r7}
 8002600:	b089      	sub	sp, #36	; 0x24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	613b      	str	r3, [r7, #16]
  return result;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	210f      	movs	r1, #15
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	61bb      	str	r3, [r7, #24]
  return result;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002654:	bf00      	nop
 8002656:	3724      	adds	r7, #36	; 0x24
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	613b      	str	r3, [r7, #16]
  return result;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800268a:	e050      	b.n	800272e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d042      	beq.n	8002728 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d003      	beq.n	80026b2 <LL_GPIO_Init+0x52>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d10d      	bne.n	80026ce <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	461a      	mov	r2, r3
 80026b8:	69b9      	ldr	r1, [r7, #24]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ff12 	bl	80024e4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	461a      	mov	r2, r3
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fef3 	bl	80024b4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	461a      	mov	r2, r3
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff33 	bl	8002542 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11a      	bne.n	800271a <LL_GPIO_Init+0xba>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	60bb      	str	r3, [r7, #8]
  return result;
 80026f0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	d807      	bhi.n	800270c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	461a      	mov	r2, r3
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff4b 	bl	80025a0 <LL_GPIO_SetAFPin_0_7>
 800270a:	e006      	b.n	800271a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	461a      	mov	r2, r3
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff72 	bl	80025fe <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	69b9      	ldr	r1, [r7, #24]
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fe97 	bl	8002456 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1a7      	bne.n	800268c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <LL_RCC_GetSysClkSource+0x18>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <LL_RCC_GetAHBPrescaler+0x18>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <LL_RCC_PLL_GetN+0x18>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40023800 	.word	0x40023800

080027f0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <LL_RCC_PLL_GetP+0x18>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <LL_RCC_PLL_GetR+0x18>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <LL_RCC_PLL_GetDivider+0x18>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800284c:	f000 f820 	bl	8002890 <RCC_GetSystemClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f85c 	bl	8002918 <RCC_GetHCLKClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f86a 	bl	8002944 <RCC_GetPCLK1ClockFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f876 	bl	800296c <RCC_GetPCLK2ClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800289a:	f7ff ff55 	bl	8002748 <LL_RCC_GetSysClkSource>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d82d      	bhi.n	8002900 <RCC_GetSystemClockFreq+0x70>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <RCC_GetSystemClockFreq+0x1c>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028e1 	.word	0x080028e1
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002901 	.word	0x08002901
 80028b8:	08002901 	.word	0x08002901
 80028bc:	080028e7 	.word	0x080028e7
 80028c0:	08002901 	.word	0x08002901
 80028c4:	08002901 	.word	0x08002901
 80028c8:	08002901 	.word	0x08002901
 80028cc:	080028ed 	.word	0x080028ed
 80028d0:	08002901 	.word	0x08002901
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002901 	.word	0x08002901
 80028dc:	080028f7 	.word	0x080028f7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <RCC_GetSystemClockFreq+0x80>)
 80028e2:	607b      	str	r3, [r7, #4]
      break;
 80028e4:	e00f      	b.n	8002906 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <RCC_GetSystemClockFreq+0x84>)
 80028e8:	607b      	str	r3, [r7, #4]
      break;
 80028ea:	e00c      	b.n	8002906 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80028ec:	2008      	movs	r0, #8
 80028ee:	f000 f851 	bl	8002994 <RCC_PLL_GetFreqDomain_SYS>
 80028f2:	6078      	str	r0, [r7, #4]
      break;
 80028f4:	e007      	b.n	8002906 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80028f6:	200c      	movs	r0, #12
 80028f8:	f000 f84c 	bl	8002994 <RCC_PLL_GetFreqDomain_SYS>
 80028fc:	6078      	str	r0, [r7, #4]
      break;
 80028fe:	e002      	b.n	8002906 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <RCC_GetSystemClockFreq+0x80>)
 8002902:	607b      	str	r3, [r7, #4]
      break;
 8002904:	bf00      	nop
  }

  return frequency;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002920:	f7ff ff20 	bl	8002764 <LL_RCC_GetAHBPrescaler>
 8002924:	4603      	mov	r3, r0
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <RCC_GetHCLKClockFreq+0x28>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	40d3      	lsrs	r3, r2
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	08003670 	.word	0x08003670

08002944 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800294c:	f7ff ff18 	bl	8002780 <LL_RCC_GetAPB1Prescaler>
 8002950:	4603      	mov	r3, r0
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <RCC_GetPCLK1ClockFreq+0x24>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	40d3      	lsrs	r3, r2
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	08003680 	.word	0x08003680

0800296c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002974:	f7ff ff12 	bl	800279c <LL_RCC_GetAPB2Prescaler>
 8002978:	4603      	mov	r3, r0
 800297a:	0b5b      	lsrs	r3, r3, #13
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <RCC_GetPCLK2ClockFreq+0x24>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	40d3      	lsrs	r3, r2
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	08003680 	.word	0x08003680

08002994 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029a8:	f7ff ff06 	bl	80027b8 <LL_RCC_PLL_GetMainSource>
 80029ac:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d003      	beq.n	80029c4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80029bc:	e005      	b.n	80029ca <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80029c0:	617b      	str	r3, [r7, #20]
      break;
 80029c2:	e005      	b.n	80029d0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80029c6:	617b      	str	r3, [r7, #20]
      break;
 80029c8:	e002      	b.n	80029d0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80029cc:	617b      	str	r3, [r7, #20]
      break;
 80029ce:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d114      	bne.n	8002a00 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029d6:	f7ff ff27 	bl	8002828 <LL_RCC_PLL_GetDivider>
 80029da:	4602      	mov	r2, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fbb3 f4f2 	udiv	r4, r3, r2
 80029e2:	f7ff fef7 	bl	80027d4 <LL_RCC_PLL_GetN>
 80029e6:	4603      	mov	r3, r0
 80029e8:	fb03 f404 	mul.w	r4, r3, r4
 80029ec:	f7ff ff00 	bl	80027f0 <LL_RCC_PLL_GetP>
 80029f0:	4603      	mov	r3, r0
 80029f2:	0c1b      	lsrs	r3, r3, #16
 80029f4:	3301      	adds	r3, #1
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fbb4 f3f3 	udiv	r3, r4, r3
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e011      	b.n	8002a24 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a00:	f7ff ff12 	bl	8002828 <LL_RCC_PLL_GetDivider>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fbb3 f4f2 	udiv	r4, r3, r2
 8002a0c:	f7ff fee2 	bl	80027d4 <LL_RCC_PLL_GetN>
 8002a10:	4603      	mov	r3, r0
 8002a12:	fb03 f404 	mul.w	r4, r3, r4
 8002a16:	f7ff fef9 	bl	800280c <LL_RCC_PLL_GetR>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	0f1b      	lsrs	r3, r3, #28
 8002a1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a22:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002a24:	693b      	ldr	r3, [r7, #16]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <LL_TIM_SetPrescaler>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_TIM_SetAutoReload>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_TIM_SetRepetitionCounter>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_TIM_OC_SetCompareCH1>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_TIM_OC_SetCompareCH2>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_TIM_OC_SetCompareCH3>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_TIM_OC_SetCompareCH4>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	615a      	str	r2, [r3, #20]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3d      	ldr	r2, [pc, #244]	; (8002c24 <LL_TIM_Init+0x108>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <LL_TIM_Init+0x40>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d00f      	beq.n	8002b5c <LL_TIM_Init+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <LL_TIM_Init+0x10c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <LL_TIM_Init+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <LL_TIM_Init+0x110>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <LL_TIM_Init+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <LL_TIM_Init+0x114>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <LL_TIM_Init+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <LL_TIM_Init+0x118>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <LL_TIM_Init+0x108>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d027      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <LL_TIM_Init+0x10c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d023      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <LL_TIM_Init+0x110>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01f      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <LL_TIM_Init+0x114>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01b      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <LL_TIM_Init+0x118>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d017      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <LL_TIM_Init+0x11c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <LL_TIM_Init+0x120>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00f      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <LL_TIM_Init+0x124>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00b      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <LL_TIM_Init+0x128>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <LL_TIM_Init+0x12c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d003      	beq.n	8002bca <LL_TIM_Init+0xae>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <LL_TIM_Init+0x130>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d106      	bne.n	8002bd8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff35 	bl	8002a54 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff21 	bl	8002a38 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <LL_TIM_Init+0x108>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <LL_TIM_Init+0xea>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <LL_TIM_Init+0x118>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d105      	bne.n	8002c12 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff2f 	bl	8002a70 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff72 	bl	8002afc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40000c00 	.word	0x40000c00
 8002c34:	40010400 	.word	0x40010400
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800
 8002c44:	40001800 	.word	0x40001800
 8002c48:	40001c00 	.word	0x40001c00
 8002c4c:	40002000 	.word	0x40002000

08002c50 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d027      	beq.n	8002cb8 <LL_TIM_OC_Init+0x68>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d82a      	bhi.n	8002cc6 <LL_TIM_OC_Init+0x76>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	d018      	beq.n	8002caa <LL_TIM_OC_Init+0x5a>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d822      	bhi.n	8002cc6 <LL_TIM_OC_Init+0x76>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d003      	beq.n	8002c8e <LL_TIM_OC_Init+0x3e>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d007      	beq.n	8002c9c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002c8c:	e01b      	b.n	8002cc6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f81f 	bl	8002cd4 <OC1Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	e015      	b.n	8002cc8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f884 	bl	8002dac <OC2Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca8:	e00e      	b.n	8002cc8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f8ed 	bl	8002e8c <OC3Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb6:	e007      	b.n	8002cc8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f956 	bl	8002f6c <OC4Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc4:	e000      	b.n	8002cc8 <LL_TIM_OC_Init+0x78>
      break;
 8002cc6:	bf00      	nop
  }

  return result;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0201 	bic.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 0202 	bic.w	r2, r3, #2
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0201 	bic.w	r2, r3, #1
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <OC1Config+0xd0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <OC1Config+0x6a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <OC1Config+0xd4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d11e      	bne.n	8002d7c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 0208 	bic.w	r2, r3, #8
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 0204 	bic.w	r2, r3, #4
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fe7c 	bl	8002a8c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40010400 	.word	0x40010400

08002dac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0210 	bic.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0220 	bic.w	r2, r3, #32
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0210 	bic.w	r2, r3, #16
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <OC2Config+0xd8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <OC2Config+0x70>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <OC2Config+0xdc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d11f      	bne.n	8002e5c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	019b      	lsls	r3, r3, #6
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	019b      	lsls	r3, r3, #6
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fe1a 	bl	8002aa8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40010400 	.word	0x40010400

08002e8c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <OC3Config+0xd8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <OC3Config+0x6e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <OC3Config+0xdc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d11f      	bne.n	8002f3a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fdb9 	bl	8002ac4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010400 	.word	0x40010400

08002f6c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	031b      	lsls	r3, r3, #12
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <OC4Config+0xa8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <OC4Config+0x70>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <OC4Config+0xac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d107      	bne.n	8002fec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	019b      	lsls	r3, r3, #6
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fd6e 	bl	8002ae0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40010000 	.word	0x40010000
 8003018:	40010400 	.word	0x40010400

0800301c <LL_USART_IsEnabled>:
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_USART_SetStopBitsLength>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_USART_SetHWFlowCtrl>:
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	615a      	str	r2, [r3, #20]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_USART_SetBaudRate>:
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b0c0      	sub	sp, #256	; 0x100
 8003096:	af00      	add	r7, sp, #0
 8003098:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800309c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80030a0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80030a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b0:	f040 810c 	bne.w	80032cc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80030b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	1891      	adds	r1, r2, r2
 80030cc:	6639      	str	r1, [r7, #96]	; 0x60
 80030ce:	415b      	adcs	r3, r3
 80030d0:	667b      	str	r3, [r7, #100]	; 0x64
 80030d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030d6:	4621      	mov	r1, r4
 80030d8:	eb12 0801 	adds.w	r8, r2, r1
 80030dc:	4629      	mov	r1, r5
 80030de:	eb43 0901 	adc.w	r9, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb18 0303 	adds.w	r3, r8, r3
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003104:	462b      	mov	r3, r5
 8003106:	eb49 0303 	adc.w	r3, r9, r3
 800310a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800310e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003112:	2200      	movs	r2, #0
 8003114:	469a      	mov	sl, r3
 8003116:	4693      	mov	fp, r2
 8003118:	eb1a 030a 	adds.w	r3, sl, sl
 800311c:	65bb      	str	r3, [r7, #88]	; 0x58
 800311e:	eb4b 030b 	adc.w	r3, fp, fp
 8003122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003124:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800312c:	f7fd f86a 	bl	8000204 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <LL_USART_SetBaudRate+0x238>)
 8003136:	fba3 2302 	umull	r2, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b29b      	uxth	r3, r3
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	b29c      	uxth	r4, r3
 8003142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800314c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003150:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	1891      	adds	r1, r2, r2
 800315a:	6539      	str	r1, [r7, #80]	; 0x50
 800315c:	415b      	adcs	r3, r3
 800315e:	657b      	str	r3, [r7, #84]	; 0x54
 8003160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003164:	4641      	mov	r1, r8
 8003166:	1851      	adds	r1, r2, r1
 8003168:	64b9      	str	r1, [r7, #72]	; 0x48
 800316a:	4649      	mov	r1, r9
 800316c:	414b      	adcs	r3, r1
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800317c:	4659      	mov	r1, fp
 800317e:	00cb      	lsls	r3, r1, #3
 8003180:	4651      	mov	r1, sl
 8003182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003186:	4651      	mov	r1, sl
 8003188:	00ca      	lsls	r2, r1, #3
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	4603      	mov	r3, r0
 8003190:	4642      	mov	r2, r8
 8003192:	189b      	adds	r3, r3, r2
 8003194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003198:	464b      	mov	r3, r9
 800319a:	460a      	mov	r2, r1
 800319c:	eb42 0303 	adc.w	r3, r2, r3
 80031a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80031b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80031b6:	460b      	mov	r3, r1
 80031b8:	18db      	adds	r3, r3, r3
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
 80031bc:	4613      	mov	r3, r2
 80031be:	eb42 0303 	adc.w	r3, r2, r3
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
 80031c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031cc:	f7fd f81a 	bl	8000204 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4611      	mov	r1, r2
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <LL_USART_SetBaudRate+0x238>)
 80031d8:	fba3 2301 	umull	r2, r3, r3, r1
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	2264      	movs	r2, #100	; 0x64
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	1acb      	subs	r3, r1, r3
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031ec:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <LL_USART_SetBaudRate+0x238>)
 80031ee:	fba3 2302 	umull	r2, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4423      	add	r3, r4
 8003202:	b29c      	uxth	r4, r3
 8003204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800320e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003212:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003216:	4642      	mov	r2, r8
 8003218:	464b      	mov	r3, r9
 800321a:	1891      	adds	r1, r2, r2
 800321c:	63b9      	str	r1, [r7, #56]	; 0x38
 800321e:	415b      	adcs	r3, r3
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003222:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003226:	4641      	mov	r1, r8
 8003228:	1851      	adds	r1, r2, r1
 800322a:	6339      	str	r1, [r7, #48]	; 0x30
 800322c:	4649      	mov	r1, r9
 800322e:	414b      	adcs	r3, r1
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800323e:	4659      	mov	r1, fp
 8003240:	00cb      	lsls	r3, r1, #3
 8003242:	4651      	mov	r1, sl
 8003244:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003248:	4651      	mov	r1, sl
 800324a:	00ca      	lsls	r2, r1, #3
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	4603      	mov	r3, r0
 8003252:	4642      	mov	r2, r8
 8003254:	189b      	adds	r3, r3, r2
 8003256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800325a:	464b      	mov	r3, r9
 800325c:	460a      	mov	r2, r1
 800325e:	eb42 0303 	adc.w	r3, r2, r3
 8003262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003266:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003270:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003274:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800328e:	f7fc ffb9 	bl	8000204 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <LL_USART_SetBaudRate+0x238>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	; 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	; 0x32
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <LL_USART_SetBaudRate+0x238>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4423      	add	r3, r4
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	e107      	b.n	80034d8 <LL_USART_SetBaudRate+0x448>
 80032c8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032d6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032da:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	6239      	str	r1, [r7, #32]
 80032e6:	415b      	adcs	r3, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ee:	4641      	mov	r1, r8
 80032f0:	1854      	adds	r4, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb43 0501 	adc.w	r5, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	00eb      	lsls	r3, r5, #3
 8003302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003306:	00e2      	lsls	r2, r4, #3
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4643      	mov	r3, r8
 800330e:	18e3      	adds	r3, r4, r3
 8003310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003314:	464b      	mov	r3, r9
 8003316:	eb45 0303 	adc.w	r3, r5, r3
 800331a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800331e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003328:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003338:	4629      	mov	r1, r5
 800333a:	008b      	lsls	r3, r1, #2
 800333c:	4621      	mov	r1, r4
 800333e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003342:	4621      	mov	r1, r4
 8003344:	008a      	lsls	r2, r1, #2
 8003346:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800334a:	f7fc ff5b 	bl	8000204 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <LL_USART_SetBaudRate+0x454>)
 8003354:	fba3 2302 	umull	r2, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b29b      	uxth	r3, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	b29c      	uxth	r4, r3
 8003360:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003364:	2200      	movs	r2, #0
 8003366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800336a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800336e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003372:	4642      	mov	r2, r8
 8003374:	464b      	mov	r3, r9
 8003376:	1891      	adds	r1, r2, r2
 8003378:	61b9      	str	r1, [r7, #24]
 800337a:	415b      	adcs	r3, r3
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003382:	4641      	mov	r1, r8
 8003384:	1851      	adds	r1, r2, r1
 8003386:	6139      	str	r1, [r7, #16]
 8003388:	4649      	mov	r1, r9
 800338a:	414b      	adcs	r3, r1
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339a:	4659      	mov	r1, fp
 800339c:	00cb      	lsls	r3, r1, #3
 800339e:	4651      	mov	r1, sl
 80033a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a4:	4651      	mov	r1, sl
 80033a6:	00ca      	lsls	r2, r1, #3
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	4642      	mov	r2, r8
 80033b0:	189b      	adds	r3, r3, r2
 80033b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b6:	464b      	mov	r3, r9
 80033b8:	460a      	mov	r2, r1
 80033ba:	eb42 0303 	adc.w	r3, r2, r3
 80033be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80033dc:	4649      	mov	r1, r9
 80033de:	008b      	lsls	r3, r1, #2
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e6:	4641      	mov	r1, r8
 80033e8:	008a      	lsls	r2, r1, #2
 80033ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80033ee:	f7fc ff09 	bl	8000204 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <LL_USART_SetBaudRate+0x454>)
 80033f8:	fba3 1302 	umull	r1, r3, r3, r2
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	2164      	movs	r1, #100	; 0x64
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	3332      	adds	r3, #50	; 0x32
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <LL_USART_SetBaudRate+0x454>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	b29b      	uxth	r3, r3
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	b29b      	uxth	r3, r3
 800341a:	4423      	add	r3, r4
 800341c:	b29c      	uxth	r4, r3
 800341e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003422:	2200      	movs	r2, #0
 8003424:	67bb      	str	r3, [r7, #120]	; 0x78
 8003426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	415b      	adcs	r3, r3
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	673b      	str	r3, [r7, #112]	; 0x70
 800346e:	464b      	mov	r3, r9
 8003470:	460a      	mov	r2, r1
 8003472:	eb42 0303 	adc.w	r3, r2, r3
 8003476:	677b      	str	r3, [r7, #116]	; 0x74
 8003478:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800347c:	2200      	movs	r2, #0
 800347e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003480:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800348e:	4649      	mov	r1, r9
 8003490:	008b      	lsls	r3, r1, #2
 8003492:	4641      	mov	r1, r8
 8003494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003498:	4641      	mov	r1, r8
 800349a:	008a      	lsls	r2, r1, #2
 800349c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80034a0:	f7fc feb0 	bl	8000204 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <LL_USART_SetBaudRate+0x454>)
 80034aa:	fba3 1302 	umull	r1, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2164      	movs	r1, #100	; 0x64
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	3332      	adds	r3, #50	; 0x32
 80034bc:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <LL_USART_SetBaudRate+0x454>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4423      	add	r3, r4
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034de:	46bd      	mov	sp, r7
 80034e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fd8e 	bl	800301c <LL_USART_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d15e      	bne.n	80035c4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800350e:	f023 030c 	bic.w	r3, r3, #12
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	6851      	ldr	r1, [r2, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	4311      	orrs	r1, r2
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	4311      	orrs	r1, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6992      	ldr	r2, [r2, #24]
 8003526:	430a      	orrs	r2, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fd85 	bl	8003044 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fd92 	bl	800306a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f97a 	bl	8002844 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <LL_USART_Init+0xe8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d102      	bne.n	800355e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e021      	b.n	80035a2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <LL_USART_Init+0xec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d102      	bne.n	800356c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e01a      	b.n	80035a2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <LL_USART_Init+0xf0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e013      	b.n	80035a2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a17      	ldr	r2, [pc, #92]	; (80035dc <LL_USART_Init+0xf4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d102      	bne.n	8003588 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	e00c      	b.n	80035a2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <LL_USART_Init+0xf8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d102      	bne.n	8003596 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e005      	b.n	80035a2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <LL_USART_Init+0xfc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fd66 	bl	8003090 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40004800 	.word	0x40004800
 80035dc:	40011400 	.word	0x40011400
 80035e0:	40004c00 	.word	0x40004c00
 80035e4:	40005000 	.word	0x40005000

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4d0d      	ldr	r5, [pc, #52]	; (8003620 <__libc_init_array+0x38>)
 80035ec:	4c0d      	ldr	r4, [pc, #52]	; (8003624 <__libc_init_array+0x3c>)
 80035ee:	1b64      	subs	r4, r4, r5
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	2600      	movs	r6, #0
 80035f4:	42a6      	cmp	r6, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	4d0b      	ldr	r5, [pc, #44]	; (8003628 <__libc_init_array+0x40>)
 80035fa:	4c0c      	ldr	r4, [pc, #48]	; (800362c <__libc_init_array+0x44>)
 80035fc:	f000 f820 	bl	8003640 <_init>
 8003600:	1b64      	subs	r4, r4, r5
 8003602:	10a4      	asrs	r4, r4, #2
 8003604:	2600      	movs	r6, #0
 8003606:	42a6      	cmp	r6, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003610:	4798      	blx	r3
 8003612:	3601      	adds	r6, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	f855 3b04 	ldr.w	r3, [r5], #4
 800361a:	4798      	blx	r3
 800361c:	3601      	adds	r6, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	08003690 	.word	0x08003690
 8003624:	08003690 	.word	0x08003690
 8003628:	08003690 	.word	0x08003690
 800362c:	08003694 	.word	0x08003694

08003630 <memset>:
 8003630:	4402      	add	r2, r0
 8003632:	4603      	mov	r3, r0
 8003634:	4293      	cmp	r3, r2
 8003636:	d100      	bne.n	800363a <memset+0xa>
 8003638:	4770      	bx	lr
 800363a:	f803 1b01 	strb.w	r1, [r3], #1
 800363e:	e7f9      	b.n	8003634 <memset+0x4>

08003640 <_init>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

0800364c <_fini>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr
