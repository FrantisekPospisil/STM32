/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f0xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(TimerStart<10000) TimerStart++;															// pocita milisekundy od startu
	if(TimerSec<1000) TimerSec++; else TimerSec = 0;											// pocita sekundy

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program ovladani piezomenice              * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */


	if(TimerBeep>0) {																			// pocita milisekundy kdy ma bezet PWM pro piezomenic
		TimerBeep--;
		if(TimerBeep==0) {
			LL_TIM_DisableAllOutputs(TIM2);														// konec tonu, zastavi se timer
			LL_TIM_DisableCounter(TIM2);
		}
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program regulatoru teploty                * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */

	Difference = TemperatureSet - TemperatureMeasure;
	if((Difference >  50) || (Difference < -50 )) DifferenceIntegral = 0;
	if((Difference > -50) && (Difference <   0 ) && ( DifferenceIntegral > -200000 )) DifferenceIntegral--;
	if((Difference >   0) && (Difference <  50 ) && ( DifferenceIntegral <  200000 )) DifferenceIntegral++;
	if(Difference < 0) Difference = 0;
	SolderPWM = (uint16_t) ((Difference * Const1 / 100) + (DifferenceIntegral * Const2 / 10000));
	if(SolderPWM < 0) SolderPWM = 0;
	if((SolderPWM > 1000) || ( Difference > 400)) SolderPWM = 1000;

	if(System != 4) LL_TIM_OC_SetCompareCH1(TIM1, SolderPWM);

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * program prepnuti do rezimu Standby        * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */

/*	if((Rozdil < 10) && (Rozdil > -10) && (CounterTemp == 0) && (TimerStart > 8000)) {
		CounterTemp = 1;
	}

	if((Rozdil < 10) && (Rozdil > -10) && (TimerStart > 8000)) TimerStandby++; else TimerStandby = 0;
	if((TimerStandby == StandbyTimerMax) && (System == 0)) {
		TimerStandby = 0;
		System = 3;
		TempSetStandby = TempSet;
		TempSet = StandbyTemp;
	}
*/

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F0xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * preruseni tlacitka rotacniho koderu       * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * */
    if(TimerStart>3000) {
    	switch(System) {
    		case 0: {
    			System = 1;							// pri stisku z normalniho rezimu na rezim MENU
    			break;
    		}
    		case 1: {
    			if(Menu==13) System = 2;			// v MENU na konci, polozka 13 jde na rezim ukladani do EEPROM
    			if(Menu < 9) System = 0x11;
    			break;
    		}
    		case 2: {
    			break;								// z rezimu ukladani do EEPROM vyjde sam do normalniho rezimu
    		}
    		case 3: {
    			System = 0;
    			TemperatureSet = TemperatureSetStandby;
    			CounterTemperature = 0;
    			break;
    		}
    		case 0x11: {							// rezim zmeny jednolivych hodnot v MENU
    			System = 1;
    			break;
    		}
    	}
    	Beep( 2000, 10 );
    }
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
    /* USER CODE BEGIN LL_EXTI_LINE_6 */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	/* * * preruseni pinu rotacniho koderu smerem vpravo     * * */
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    if (!LL_GPIO_IsInputPinSet(Encoder_1_GPIO_Port, Encoder_1_Pin)) {
    	switch(System) {
    		case 0: {
    			if (TemperatureSet < TemperatureMax) TemperatureSet += 10;		// pridava teplotu v normalnim rezimu
    			CounterTemperature = 0;
    			break;
    		}
    		case 1: {
    			if (Menu < 13) Menu++;											// chodi v MENU
    			else Menu = 0;
    			break;
    		}
    		case 0x11: {														// meni hodnoty promennych v MENU
    			switch(Menu) {
    				case 0: {
    					if (TemperatureMin < 4000) TemperatureMin++;
    					break;
    				}
    				case 1: {
    					if (TemperatureMax < 4000) TemperatureMax++;
    					break;
    				}
    				case 2: {
    					if (TemperatureSet0 < 4000) TemperatureSet0++;
    					break;
    				}
    				case 3: {
    					if (StandbyTemperature < 4000) StandbyTemperature++;
    					break;
    				}
    				case 4: {
    					if (StandbyDifference < 500) StandbyDifference++;
    					break;
    				}
    				case 5: {
    					if (StandbyTimerMax < 500) StandbyTimerMax++;
    					break;
    				}
    				case 6: {
    					if (MeanMax < 100) MeanMax++;
    					break;
    				}
    				case 7: {
    					if (Const1 < 5000) Const1++;
    					break;
    				}
    				case 8: {
    					if (Const2 < 5000) Const2++;
    				    break;
    				}
    			}
    			break;
    		}
    	}
    } else {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    	/* * * preruseni pinu rotacniho koderu smerem vlevo      * * */
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    	switch(System) {
    		case 0: {
    			if (TemperatureSet > TemperatureMin) TemperatureSet -= 10;
    			CounterTemperature = 0;
    			break;
    		}
    		case 1: {
    			if (Menu > 0) Menu--;
    			else Menu = 12;
    			break;
    		}
    		case 0x11: {
    			switch(Menu) {
    				case 0: {
    					if (TemperatureMin > 400) TemperatureMin--;
    					break;
    				}
    				case 1: {
    					if (TemperatureMax > 1000) TemperatureMax--;
    					break;
    				}
    				case 2: {
    					if (TemperatureSet0 > 400) TemperatureSet0--;
    					break;
    				}
    				case 3: {
    					if (StandbyTemperature > 200) StandbyTemperature--;
    					break;
    				}
    				case 4: {
    					if (StandbyDifference > 0) StandbyDifference--;
    					break;
    				}
    				case 5: {
    					if (StandbyTimerMax > 10) StandbyTimerMax--;
    					break;
    				}
    				case 6: {
    					if (MeanMax > 4) MeanMax--;
    					break;
    				}
    				case 7: {
    					if (Const1 > 0) Const1--;
    					break;
    				}
    				case 8: {
    					if (Const2 > 0) Const2--;
    					break;
    				}
    			}
    			break;
    		}
    	}
    }
    Beep( 2000, 10 );
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
