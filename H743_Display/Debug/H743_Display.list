
H743_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000785c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f00  08007af4  08007af4  00017af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a9f8  0800a9f8  0001a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800a9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  24000010  0800aa0c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000220  0800aa0c  00020220  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018106  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003598  00000000  00000000  00038144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012c8  00000000  00000000  0003b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001130  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cdb1  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017f92  00000000  00000000  0007a889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001764ee  00000000  00000000  0009281b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00208d09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e08  00000000  00000000  00208d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007adc 	.word	0x08007adc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007adc 	.word	0x08007adc

080002d8 <EEPROM_SPI_INIT>:
/**
 * @brief Init EEPROM SPI
 *
 * @param hspi Pointer to SPI struct handler
 */
void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	EEPROM_SPI = hspi;
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <EEPROM_SPI_INIT+0x1c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6013      	str	r3, [r2, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	24000054 	.word	0x24000054

080002f8 <EEPROM_SPI_WritePage>:

EepromOperations EEPROM_SPI_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
 8000304:	4613      	mov	r3, r2
 8000306:	803b      	strh	r3, [r7, #0]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8000308:	e002      	b.n	8000310 <EEPROM_SPI_WritePage+0x18>
		HAL_Delay(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f004 fa46 	bl	800479c <HAL_Delay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 8000310:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <EEPROM_SPI_WritePage+0xcc>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000318:	b2db      	uxtb	r3, r3
 800031a:	2b01      	cmp	r3, #1
 800031c:	d1f5      	bne.n	800030a <EEPROM_SPI_WritePage+0x12>
	}
	HAL_StatusTypeDef spiTransmitStatus;

	sEE_WriteEnable();
 800031e:	f000 f9e7 	bl	80006f0 <sEE_WriteEnable>

	uint8_t header[3];
	header[0] = EEPROM_WRITE;
 8000322:	2302      	movs	r3, #2
 8000324:	723b      	strb	r3, [r7, #8]
	header[1] = WriteAddr >> 8;
 8000326:	887b      	ldrh	r3, [r7, #2]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	b29b      	uxth	r3, r3
 800032c:	b2db      	uxtb	r3, r3
 800032e:	727b      	strb	r3, [r7, #9]
	header[2] = WriteAddr;
 8000330:	887b      	ldrh	r3, [r7, #2]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]

	EEPROM_W_HIGH();
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	4822      	ldr	r0, [pc, #136]	; (80003c8 <EEPROM_SPI_WritePage+0xd0>)
 800033e:	f004 fcf9 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_H_HIGH();
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000348:	481f      	ldr	r0, [pc, #124]	; (80003c8 <EEPROM_SPI_WritePage+0xd0>)
 800034a:	f004 fcf3 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_CS_LOW();
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000354:	481d      	ldr	r0, [pc, #116]	; (80003cc <EEPROM_SPI_WritePage+0xd4>)
 8000356:	f004 fced 	bl	8004d34 <HAL_GPIO_WritePin>

	EEPROM_SPI_SendInstruction((uint8_t*)header, 3);
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2103      	movs	r1, #3
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fa19 	bl	8000798 <EEPROM_SPI_SendInstruction>

	for (uint8_t i = 0; i < 5; i++) {
 8000366:	2300      	movs	r3, #0
 8000368:	73bb      	strb	r3, [r7, #14]
 800036a:	e011      	b.n	8000390 <EEPROM_SPI_WritePage+0x98>
		spiTransmitStatus = HAL_SPI_Transmit(EEPROM_SPI, pBuffer, NumByteToWrite, 100);
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <EEPROM_SPI_WritePage+0xcc>)
 800036e:	6818      	ldr	r0, [r3, #0]
 8000370:	883a      	ldrh	r2, [r7, #0]
 8000372:	2364      	movs	r3, #100	; 0x64
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	f005 fd25 	bl	8005dc4 <HAL_SPI_Transmit>
 800037a:	4603      	mov	r3, r0
 800037c:	73fb      	strb	r3, [r7, #15]
		if (spiTransmitStatus == HAL_BUSY) {
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d109      	bne.n	8000398 <EEPROM_SPI_WritePage+0xa0>
			HAL_Delay(5);
 8000384:	2005      	movs	r0, #5
 8000386:	f004 fa09 	bl	800479c <HAL_Delay>
	for (uint8_t i = 0; i < 5; i++) {
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	3301      	adds	r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
 8000390:	7bbb      	ldrb	r3, [r7, #14]
 8000392:	2b04      	cmp	r3, #4
 8000394:	d9ea      	bls.n	800036c <EEPROM_SPI_WritePage+0x74>
 8000396:	e000      	b.n	800039a <EEPROM_SPI_WritePage+0xa2>
		} else {
			break;
 8000398:	bf00      	nop
		}
	}

	EEPROM_CS_HIGH();
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <EEPROM_SPI_WritePage+0xd4>)
 80003a2:	f004 fcc7 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_SPI_WaitStandbyState();
 80003a6:	f000 f95d 	bl	8000664 <EEPROM_SPI_WaitStandbyState>
	sEE_WriteDisable();
 80003aa:	f000 f9cb 	bl	8000744 <sEE_WriteDisable>

	if (spiTransmitStatus == HAL_ERROR) {
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d101      	bne.n	80003b8 <EEPROM_SPI_WritePage+0xc0>
		return EEPROM_STATUS_ERROR;
 80003b4:	2302      	movs	r3, #2
 80003b6:	e000      	b.n	80003ba <EEPROM_SPI_WritePage+0xc2>
	} else {
		return EEPROM_STATUS_COMPLETE;
 80003b8:	2301      	movs	r3, #1
	}
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	24000054 	.word	0x24000054
 80003c8:	58020800 	.word	0x58020800
 80003cc:	58020000 	.word	0x58020000

080003d0 <EEPROM_SPI_WriteBuffer>:

EepromOperations EEPROM_SPI_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
 80003dc:	4613      	mov	r3, r2
 80003de:	803b      	strh	r3, [r7, #0]
	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	82fb      	strh	r3, [r7, #22]
 80003e4:	2300      	movs	r3, #0
 80003e6:	827b      	strh	r3, [r7, #18]
 80003e8:	2300      	movs	r3, #0
 80003ea:	823b      	strh	r3, [r7, #16]
 80003ec:	2300      	movs	r3, #0
 80003ee:	81fb      	strh	r3, [r7, #14]
 80003f0:	2300      	movs	r3, #0
 80003f2:	81bb      	strh	r3, [r7, #12]
	uint16_t sEE_DataNum = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	817b      	strh	r3, [r7, #10]

	EepromOperations pageWriteStatus = EEPROM_STATUS_PENDING;
 80003f8:	2300      	movs	r3, #0
 80003fa:	757b      	strb	r3, [r7, #21]

	Addr = WriteAddr % EEPROM_PAGESIZE;
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	f003 031f 	and.w	r3, r3, #31
 8000402:	823b      	strh	r3, [r7, #16]
	count = EEPROM_PAGESIZE - Addr;
 8000404:	8a3b      	ldrh	r3, [r7, #16]
 8000406:	f1c3 0320 	rsb	r3, r3, #32
 800040a:	81fb      	strh	r3, [r7, #14]
	NumOfPage = NumByteToWrite / EEPROM_PAGESIZE;
 800040c:	883b      	ldrh	r3, [r7, #0]
 800040e:	095b      	lsrs	r3, r3, #5
 8000410:	82fb      	strh	r3, [r7, #22]
	NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8000412:	883b      	ldrh	r3, [r7, #0]
 8000414:	f003 031f 	and.w	r3, r3, #31
 8000418:	827b      	strh	r3, [r7, #18]

	if (Addr == 0) {
 800041a:	8a3b      	ldrh	r3, [r7, #16]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d13c      	bne.n	800049a <EEPROM_SPI_WriteBuffer+0xca>
		if (NumOfPage == 0) {
 8000420:	8afb      	ldrh	r3, [r7, #22]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d124      	bne.n	8000470 <EEPROM_SPI_WriteBuffer+0xa0>
			sEE_DataNum = NumByteToWrite;
 8000426:	883b      	ldrh	r3, [r7, #0]
 8000428:	817b      	strh	r3, [r7, #10]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800042a:	897a      	ldrh	r2, [r7, #10]
 800042c:	887b      	ldrh	r3, [r7, #2]
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ff61 	bl	80002f8 <EEPROM_SPI_WritePage>
 8000436:	4603      	mov	r3, r0
 8000438:	757b      	strb	r3, [r7, #21]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800043a:	7d7b      	ldrb	r3, [r7, #21]
 800043c:	2b01      	cmp	r3, #1
 800043e:	f000 80b7 	beq.w	80005b0 <EEPROM_SPI_WriteBuffer+0x1e0>
				return pageWriteStatus;
 8000442:	7d7b      	ldrb	r3, [r7, #21]
 8000444:	e0b5      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
			}
		} else {
			while (NumOfPage--) {
				sEE_DataNum = EEPROM_PAGESIZE;
 8000446:	2320      	movs	r3, #32
 8000448:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800044a:	897a      	ldrh	r2, [r7, #10]
 800044c:	887b      	ldrh	r3, [r7, #2]
 800044e:	4619      	mov	r1, r3
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff51 	bl	80002f8 <EEPROM_SPI_WritePage>
 8000456:	4603      	mov	r3, r0
 8000458:	757b      	strb	r3, [r7, #21]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800045a:	7d7b      	ldrb	r3, [r7, #21]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d001      	beq.n	8000464 <EEPROM_SPI_WriteBuffer+0x94>
					return pageWriteStatus;
 8000460:	7d7b      	ldrb	r3, [r7, #21]
 8000462:	e0a6      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
				}

				WriteAddr += EEPROM_PAGESIZE;
 8000464:	887b      	ldrh	r3, [r7, #2]
 8000466:	3320      	adds	r3, #32
 8000468:	807b      	strh	r3, [r7, #2]
				pBuffer += EEPROM_PAGESIZE;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3320      	adds	r3, #32
 800046e:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 8000470:	8afb      	ldrh	r3, [r7, #22]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	82fa      	strh	r2, [r7, #22]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1e5      	bne.n	8000446 <EEPROM_SPI_WriteBuffer+0x76>
			}
			sEE_DataNum = NumOfSingle;
 800047a:	8a7b      	ldrh	r3, [r7, #18]
 800047c:	817b      	strh	r3, [r7, #10]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800047e:	897a      	ldrh	r2, [r7, #10]
 8000480:	887b      	ldrh	r3, [r7, #2]
 8000482:	4619      	mov	r1, r3
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff ff37 	bl	80002f8 <EEPROM_SPI_WritePage>
 800048a:	4603      	mov	r3, r0
 800048c:	757b      	strb	r3, [r7, #21]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800048e:	7d7b      	ldrb	r3, [r7, #21]
 8000490:	2b01      	cmp	r3, #1
 8000492:	f000 808d 	beq.w	80005b0 <EEPROM_SPI_WriteBuffer+0x1e0>
				return pageWriteStatus;
 8000496:	7d7b      	ldrb	r3, [r7, #21]
 8000498:	e08b      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
			}
		}
	} else {
		if (NumOfPage == 0) {
 800049a:	8afb      	ldrh	r3, [r7, #22]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d138      	bne.n	8000512 <EEPROM_SPI_WriteBuffer+0x142>
			if (NumOfSingle > count) {
 80004a0:	8a7a      	ldrh	r2, [r7, #18]
 80004a2:	89fb      	ldrh	r3, [r7, #14]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d925      	bls.n	80004f4 <EEPROM_SPI_WriteBuffer+0x124>
				temp = NumOfSingle - count;
 80004a8:	8a7a      	ldrh	r2, [r7, #18]
 80004aa:	89fb      	ldrh	r3, [r7, #14]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	81bb      	strh	r3, [r7, #12]
				sEE_DataNum = count;
 80004b0:	89fb      	ldrh	r3, [r7, #14]
 80004b2:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80004b4:	897a      	ldrh	r2, [r7, #10]
 80004b6:	887b      	ldrh	r3, [r7, #2]
 80004b8:	4619      	mov	r1, r3
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ff1c 	bl	80002f8 <EEPROM_SPI_WritePage>
 80004c0:	4603      	mov	r3, r0
 80004c2:	757b      	strb	r3, [r7, #21]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d001      	beq.n	80004ce <EEPROM_SPI_WriteBuffer+0xfe>
					return pageWriteStatus;
 80004ca:	7d7b      	ldrb	r3, [r7, #21]
 80004cc:	e071      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
				}
				WriteAddr += count;
 80004ce:	887a      	ldrh	r2, [r7, #2]
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	4413      	add	r3, r2
 80004d4:	807b      	strh	r3, [r7, #2]
				pBuffer += count;
 80004d6:	89fb      	ldrh	r3, [r7, #14]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	607b      	str	r3, [r7, #4]
				sEE_DataNum = temp;
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80004e2:	897a      	ldrh	r2, [r7, #10]
 80004e4:	887b      	ldrh	r3, [r7, #2]
 80004e6:	4619      	mov	r1, r3
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff05 	bl	80002f8 <EEPROM_SPI_WritePage>
 80004ee:	4603      	mov	r3, r0
 80004f0:	757b      	strb	r3, [r7, #21]
 80004f2:	e009      	b.n	8000508 <EEPROM_SPI_WriteBuffer+0x138>
			} else {
				sEE_DataNum = NumByteToWrite;
 80004f4:	883b      	ldrh	r3, [r7, #0]
 80004f6:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 80004f8:	897a      	ldrh	r2, [r7, #10]
 80004fa:	887b      	ldrh	r3, [r7, #2]
 80004fc:	4619      	mov	r1, r3
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff fefa 	bl	80002f8 <EEPROM_SPI_WritePage>
 8000504:	4603      	mov	r3, r0
 8000506:	757b      	strb	r3, [r7, #21]
			}
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 8000508:	7d7b      	ldrb	r3, [r7, #21]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d050      	beq.n	80005b0 <EEPROM_SPI_WriteBuffer+0x1e0>
				return pageWriteStatus;
 800050e:	7d7b      	ldrb	r3, [r7, #21]
 8000510:	e04f      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
			}
		} else {
			NumByteToWrite -= count;
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	803b      	strh	r3, [r7, #0]
			NumOfPage = NumByteToWrite / EEPROM_PAGESIZE;
 800051a:	883b      	ldrh	r3, [r7, #0]
 800051c:	095b      	lsrs	r3, r3, #5
 800051e:	82fb      	strh	r3, [r7, #22]
			NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8000520:	883b      	ldrh	r3, [r7, #0]
 8000522:	f003 031f 	and.w	r3, r3, #31
 8000526:	827b      	strh	r3, [r7, #18]
			sEE_DataNum = count;
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	817b      	strh	r3, [r7, #10]
			pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800052c:	897a      	ldrh	r2, [r7, #10]
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	4619      	mov	r1, r3
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff fee0 	bl	80002f8 <EEPROM_SPI_WritePage>
 8000538:	4603      	mov	r3, r0
 800053a:	757b      	strb	r3, [r7, #21]
			if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800053c:	7d7b      	ldrb	r3, [r7, #21]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d001      	beq.n	8000546 <EEPROM_SPI_WriteBuffer+0x176>
				return pageWriteStatus;
 8000542:	7d7b      	ldrb	r3, [r7, #21]
 8000544:	e035      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
			}
			WriteAddr += count;
 8000546:	887a      	ldrh	r2, [r7, #2]
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	4413      	add	r3, r2
 800054c:	807b      	strh	r3, [r7, #2]
			pBuffer += count;
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 8000556:	e014      	b.n	8000582 <EEPROM_SPI_WriteBuffer+0x1b2>
				sEE_DataNum = EEPROM_PAGESIZE;
 8000558:	2320      	movs	r3, #32
 800055a:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800055c:	897a      	ldrh	r2, [r7, #10]
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff fec8 	bl	80002f8 <EEPROM_SPI_WritePage>
 8000568:	4603      	mov	r3, r0
 800056a:	757b      	strb	r3, [r7, #21]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800056c:	7d7b      	ldrb	r3, [r7, #21]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d001      	beq.n	8000576 <EEPROM_SPI_WriteBuffer+0x1a6>
					return pageWriteStatus;
 8000572:	7d7b      	ldrb	r3, [r7, #21]
 8000574:	e01d      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
				}
				WriteAddr += EEPROM_PAGESIZE;
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	3320      	adds	r3, #32
 800057a:	807b      	strh	r3, [r7, #2]
				pBuffer += EEPROM_PAGESIZE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3320      	adds	r3, #32
 8000580:	607b      	str	r3, [r7, #4]
			while (NumOfPage--) {
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	82fa      	strh	r2, [r7, #22]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1e5      	bne.n	8000558 <EEPROM_SPI_WriteBuffer+0x188>
			}
			if (NumOfSingle != 0) {
 800058c:	8a7b      	ldrh	r3, [r7, #18]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00e      	beq.n	80005b0 <EEPROM_SPI_WriteBuffer+0x1e0>
				sEE_DataNum = NumOfSingle;
 8000592:	8a7b      	ldrh	r3, [r7, #18]
 8000594:	817b      	strh	r3, [r7, #10]
				pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 8000596:	897a      	ldrh	r2, [r7, #10]
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff feab 	bl	80002f8 <EEPROM_SPI_WritePage>
 80005a2:	4603      	mov	r3, r0
 80005a4:	757b      	strb	r3, [r7, #21]
				if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 80005a6:	7d7b      	ldrb	r3, [r7, #21]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d001      	beq.n	80005b0 <EEPROM_SPI_WriteBuffer+0x1e0>
					return pageWriteStatus;
 80005ac:	7d7b      	ldrb	r3, [r7, #21]
 80005ae:	e000      	b.n	80005b2 <EEPROM_SPI_WriteBuffer+0x1e2>
				}
			}
		}
	}
	return EEPROM_STATUS_COMPLETE;
 80005b0:	2301      	movs	r3, #1
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <EEPROM_SPI_ReadBuffer>:

EepromOperations EEPROM_SPI_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
 80005c8:	4613      	mov	r3, r2
 80005ca:	803b      	strh	r3, [r7, #0]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 80005cc:	e002      	b.n	80005d4 <EEPROM_SPI_ReadBuffer+0x18>
		HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f004 f8e4 	bl	800479c <HAL_Delay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <EEPROM_SPI_ReadBuffer+0x9c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d1f5      	bne.n	80005ce <EEPROM_SPI_ReadBuffer+0x12>
	}

	uint8_t header[3];

	header[0] = EEPROM_READ;
 80005e2:	2303      	movs	r3, #3
 80005e4:	733b      	strb	r3, [r7, #12]
	header[1] = ReadAddr >> 8;
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	737b      	strb	r3, [r7, #13]
	header[2] = ReadAddr;
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73bb      	strb	r3, [r7, #14]

	EEPROM_W_HIGH();
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <EEPROM_SPI_ReadBuffer+0xa0>)
 80005fe:	f004 fb99 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_H_HIGH();
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <EEPROM_SPI_ReadBuffer+0xa0>)
 800060a:	f004 fb93 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_CS_LOW();
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <EEPROM_SPI_ReadBuffer+0xa4>)
 8000616:	f004 fb8d 	bl	8004d34 <HAL_GPIO_WritePin>

	EEPROM_SPI_SendInstruction(header, 3);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f8b9 	bl	8000798 <EEPROM_SPI_SendInstruction>

	while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 8000626:	e002      	b.n	800062e <EEPROM_SPI_ReadBuffer+0x72>
		HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f004 f8b7 	bl	800479c <HAL_Delay>
	while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <EEPROM_SPI_ReadBuffer+0x9c>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	883a      	ldrh	r2, [r7, #0]
 8000634:	23c8      	movs	r3, #200	; 0xc8
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f005 fdb6 	bl	80061a8 <HAL_SPI_Receive>
 800063c:	4603      	mov	r3, r0
 800063e:	2b02      	cmp	r3, #2
 8000640:	d0f2      	beq.n	8000628 <EEPROM_SPI_ReadBuffer+0x6c>
	}
	EEPROM_CS_HIGH();
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <EEPROM_SPI_ReadBuffer+0xa4>)
 800064a:	f004 fb73 	bl	8004d34 <HAL_GPIO_WritePin>

	return EEPROM_STATUS_COMPLETE;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	24000054 	.word	0x24000054
 800065c:	58020800 	.word	0x58020800
 8000660:	58020000 	.word	0x58020000

08000664 <EEPROM_SPI_WaitStandbyState>:

uint8_t EEPROM_SPI_WaitStandbyState(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	uint8_t sEEstatus[1] = { 0x00 };
 800066a:	2300      	movs	r3, #0
 800066c:	713b      	strb	r3, [r7, #4]
	uint8_t command[1] = { EEPROM_RDSR };
 800066e:	2305      	movs	r3, #5
 8000670:	703b      	strb	r3, [r7, #0]

	EEPROM_W_HIGH();
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <EEPROM_SPI_WaitStandbyState+0x80>)
 800067a:	f004 fb5b 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_H_HIGH();
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	4817      	ldr	r0, [pc, #92]	; (80006e4 <EEPROM_SPI_WaitStandbyState+0x80>)
 8000686:	f004 fb55 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_CS_LOW();
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000690:	4815      	ldr	r0, [pc, #84]	; (80006e8 <EEPROM_SPI_WaitStandbyState+0x84>)
 8000692:	f004 fb4f 	bl	8004d34 <HAL_GPIO_WritePin>

	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8000696:	463b      	mov	r3, r7
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f87c 	bl	8000798 <EEPROM_SPI_SendInstruction>

	do {
		while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 80006a0:	e002      	b.n	80006a8 <EEPROM_SPI_WaitStandbyState+0x44>
			HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f004 f87a 	bl	800479c <HAL_Delay>
		while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <EEPROM_SPI_WaitStandbyState+0x88>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	23c8      	movs	r3, #200	; 0xc8
 80006b0:	2201      	movs	r2, #1
 80006b2:	f005 fd79 	bl	80061a8 <HAL_SPI_Receive>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d0f2      	beq.n	80006a2 <EEPROM_SPI_WaitStandbyState+0x3e>
		};
		HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f004 f86d 	bl	800479c <HAL_Delay>
	} while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET);
 80006c2:	793b      	ldrb	r3, [r7, #4]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1ed      	bne.n	80006a8 <EEPROM_SPI_WaitStandbyState+0x44>
	EEPROM_CS_HIGH();
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <EEPROM_SPI_WaitStandbyState+0x84>)
 80006d4:	f004 fb2e 	bl	8004d34 <HAL_GPIO_WritePin>
	return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	58020800 	.word	0x58020800
 80006e8:	58020000 	.word	0x58020000
 80006ec:	24000054 	.word	0x24000054

080006f0 <sEE_WriteEnable>:
		Error_Handler();
	}
	return (uint8_t)answerByte;
}

void sEE_WriteEnable(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	EEPROM_W_HIGH();
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	480f      	ldr	r0, [pc, #60]	; (800073c <sEE_WriteEnable+0x4c>)
 80006fe:	f004 fb19 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_H_HIGH();
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <sEE_WriteEnable+0x4c>)
 800070a:	f004 fb13 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_CS_LOW();
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <sEE_WriteEnable+0x50>)
 8000716:	f004 fb0d 	bl	8004d34 <HAL_GPIO_WritePin>

	uint8_t command[1] = { EEPROM_WREN };
 800071a:	2306      	movs	r3, #6
 800071c:	713b      	strb	r3, [r7, #4]
	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f838 	bl	8000798 <EEPROM_SPI_SendInstruction>

	EEPROM_CS_HIGH();
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <sEE_WriteEnable+0x50>)
 8000730:	f004 fb00 	bl	8004d34 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58020800 	.word	0x58020800
 8000740:	58020000 	.word	0x58020000

08000744 <sEE_WriteDisable>:

void sEE_WriteDisable(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	EEPROM_W_HIGH();
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	480f      	ldr	r0, [pc, #60]	; (8000790 <sEE_WriteDisable+0x4c>)
 8000752:	f004 faef 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_H_HIGH();
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <sEE_WriteDisable+0x4c>)
 800075e:	f004 fae9 	bl	8004d34 <HAL_GPIO_WritePin>
	EEPROM_CS_LOW();
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <sEE_WriteDisable+0x50>)
 800076a:	f004 fae3 	bl	8004d34 <HAL_GPIO_WritePin>

	uint8_t command[1] = { EEPROM_WRDI };
 800076e:	2304      	movs	r3, #4
 8000770:	713b      	strb	r3, [r7, #4]
	EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f80e 	bl	8000798 <EEPROM_SPI_SendInstruction>

	EEPROM_CS_HIGH();
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <sEE_WriteDisable+0x50>)
 8000784:	f004 fad6 	bl	8004d34 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58020800 	.word	0x58020800
 8000794:	58020000 	.word	0x58020000

08000798 <EEPROM_SPI_SendInstruction>:
	EEPROM_CS_HIGH();

	sEE_WriteDisable();
}

void EEPROM_SPI_SendInstruction(uint8_t *instruction, uint8_t size) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 80007a4:	e002      	b.n	80007ac <EEPROM_SPI_SendInstruction+0x14>
		HAL_Delay(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f003 fff8 	bl	800479c <HAL_Delay>
	while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <EEPROM_SPI_SendInstruction+0x44>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f5      	beq.n	80007a6 <EEPROM_SPI_SendInstruction+0xe>
	}

	if (HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK) {
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <EEPROM_SPI_SendInstruction+0x44>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	23c8      	movs	r3, #200	; 0xc8
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	f005 fafd 	bl	8005dc4 <HAL_SPI_Transmit>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <EEPROM_SPI_SendInstruction+0x3c>
		Error_Handler();
 80007d0:	f003 f84e 	bl	8003870 <Error_Handler>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000054 	.word	0x24000054

080007e0 <ClockNumer>:
/**
  * @brief will convert the number for DS3231
  * @param number
  * @retval number
  */
uint8_t ClockNumer( uint8_t val) {
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
uint8_t NumReturn = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
uint8_t Num;

	Num = (val / 10) << 4;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <ClockNumer+0x48>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	73bb      	strb	r3, [r7, #14]
	NumReturn = Num | (val % 10 );
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <ClockNumer+0x48>)
 8000802:	fba3 1302 	umull	r1, r3, r3, r2
 8000806:	08d9      	lsrs	r1, r3, #3
 8000808:	460b      	mov	r3, r1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	4313      	orrs	r3, r2
 8000818:	73fb      	strb	r3, [r7, #15]
	return NumReturn;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	cccccccd 	.word	0xcccccccd

0800082c <TFT_ButtonClockCheck>:
/**
  * @brief checks the clock button and return 1
  * @param string, ColFront, X, Y
  * @retval key press
  */
uint8_t TFT_ButtonClockCheck( uint16_t x, uint16_t y ) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
uint8_t NumReturn;
	if(( TouchXresult > (x + 5)) && ( TouchXresult < (x + 175)) && ( TouchYresult > (y + 5)) && ( TouchYresult < (y + 85))) {
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <TFT_ButtonClockCheck+0x78>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	3305      	adds	r3, #5
 8000846:	429a      	cmp	r2, r3
 8000848:	dd24      	ble.n	8000894 <TFT_ButtonClockCheck+0x68>
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	33ae      	adds	r3, #174	; 0xae
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <TFT_ButtonClockCheck+0x78>)
 8000850:	8812      	ldrh	r2, [r2, #0]
 8000852:	4293      	cmp	r3, r2
 8000854:	db1e      	blt.n	8000894 <TFT_ButtonClockCheck+0x68>
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <TFT_ButtonClockCheck+0x7c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	3305      	adds	r3, #5
 8000860:	429a      	cmp	r2, r3
 8000862:	dd17      	ble.n	8000894 <TFT_ButtonClockCheck+0x68>
 8000864:	88bb      	ldrh	r3, [r7, #4]
 8000866:	3354      	adds	r3, #84	; 0x54
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <TFT_ButtonClockCheck+0x7c>)
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	4293      	cmp	r3, r2
 800086e:	db11      	blt.n	8000894 <TFT_ButtonClockCheck+0x68>
		NumReturn = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
		TouchXresult = 0;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <TFT_ButtonClockCheck+0x78>)
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]
		TouchYresult = 0;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <TFT_ButtonClockCheck+0x7c>)
 800087c:	2200      	movs	r2, #0
 800087e:	801a      	strh	r2, [r3, #0]
		TouchTimer = 300;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <TFT_ButtonClockCheck+0x80>)
 8000882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000886:	801a      	strh	r2, [r3, #0]
		Beep(1000, 10);
 8000888:	210a      	movs	r1, #10
 800088a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088e:	f002 ff3b 	bl	8003708 <Beep>
 8000892:	e001      	b.n	8000898 <TFT_ButtonClockCheck+0x6c>
	}
	else {
		NumReturn = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
	}
	return NumReturn;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000040 	.word	0x24000040
 80008a8:	24000042 	.word	0x24000042
 80008ac:	24000046 	.word	0x24000046

080008b0 <TFT_ButtonClock>:
/**
  * @brief draws clock from DS3231 in box
  * @param ReDraw, ColFront, ColBox, ColBack, X, Y
  * @retval none
  */
void TFT_ButtonClock( uint8_t ReDraw, uint16_t ColFront, uint16_t ColBox, uint16_t ColBack, uint16_t x, uint16_t y ) {
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	4604      	mov	r4, r0
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4623      	mov	r3, r4
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	4603      	mov	r3, r0
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	460b      	mov	r3, r1
 80008c8:	807b      	strh	r3, [r7, #2]
 80008ca:	4613      	mov	r3, r2
 80008cc:	803b      	strh	r3, [r7, #0]
	if( ReDraw == 1 ) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d121      	bne.n	8000918 <TFT_ButtonClock+0x68>
		TFT_ColorBox(x + 4, x + 179, y + 4, y + 89, ColBack);
 80008d4:	8b3b      	ldrh	r3, [r7, #24]
 80008d6:	3304      	adds	r3, #4
 80008d8:	b298      	uxth	r0, r3
 80008da:	8b3b      	ldrh	r3, [r7, #24]
 80008dc:	33b3      	adds	r3, #179	; 0xb3
 80008de:	b299      	uxth	r1, r3
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	3304      	adds	r3, #4
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	8bbb      	ldrh	r3, [r7, #28]
 80008e8:	3359      	adds	r3, #89	; 0x59
 80008ea:	b29c      	uxth	r4, r3
 80008ec:	883b      	ldrh	r3, [r7, #0]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4623      	mov	r3, r4
 80008f2:	f000 fd45 	bl	8001380 <TFT_ColorBox>
		TFT_DrawBox(x + 3, y + 3, x + 180, y + 90, ColBox);
 80008f6:	8b3b      	ldrh	r3, [r7, #24]
 80008f8:	3303      	adds	r3, #3
 80008fa:	b298      	uxth	r0, r3
 80008fc:	8bbb      	ldrh	r3, [r7, #28]
 80008fe:	3303      	adds	r3, #3
 8000900:	b299      	uxth	r1, r3
 8000902:	8b3b      	ldrh	r3, [r7, #24]
 8000904:	33b4      	adds	r3, #180	; 0xb4
 8000906:	b29a      	uxth	r2, r3
 8000908:	8bbb      	ldrh	r3, [r7, #28]
 800090a:	335a      	adds	r3, #90	; 0x5a
 800090c:	b29c      	uxth	r4, r3
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4623      	mov	r3, r4
 8000914:	f000 fe26 	bl	8001564 <TFT_DrawBox>
	}
	BufClock[0] = 0;
 8000918:	4b50      	ldr	r3, [pc, #320]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, 0xD0, BufClock, 1, HAL_MAX_DELAY);
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	4a4d      	ldr	r2, [pc, #308]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 8000928:	21d0      	movs	r1, #208	; 0xd0
 800092a:	484d      	ldr	r0, [pc, #308]	; (8000a60 <TFT_ButtonClock+0x1b0>)
 800092c:	f004 faac 	bl	8004e88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0xD0, BufClock, 6, HAL_MAX_DELAY);
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2306      	movs	r3, #6
 8000938:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 800093a:	21d0      	movs	r1, #208	; 0xd0
 800093c:	4848      	ldr	r0, [pc, #288]	; (8000a60 <TFT_ButtonClock+0x1b0>)
 800093e:	f004 fb97 	bl	8005070 <HAL_I2C_Master_Receive>


	TFT_PrintNumberClock(2, BufClock[2], ColFront, ColBack, x + 15, y + 10 );	// hodiny
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 8000944:	7899      	ldrb	r1, [r3, #2]
 8000946:	8b3b      	ldrh	r3, [r7, #24]
 8000948:	330f      	adds	r3, #15
 800094a:	b29b      	uxth	r3, r3
 800094c:	8bba      	ldrh	r2, [r7, #28]
 800094e:	320a      	adds	r2, #10
 8000950:	b292      	uxth	r2, r2
 8000952:	883c      	ldrh	r4, [r7, #0]
 8000954:	88b8      	ldrh	r0, [r7, #4]
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4623      	mov	r3, r4
 800095c:	4602      	mov	r2, r0
 800095e:	2002      	movs	r0, #2
 8000960:	f001 f87e 	bl	8001a60 <TFT_PrintNumberClock>
	TFT_PrintChar(2, 1, ':', ColFront, ColBack, x + 55, y + 10);
 8000964:	8b3b      	ldrh	r3, [r7, #24]
 8000966:	3337      	adds	r3, #55	; 0x37
 8000968:	b29b      	uxth	r3, r3
 800096a:	8bba      	ldrh	r2, [r7, #28]
 800096c:	320a      	adds	r2, #10
 800096e:	b292      	uxth	r2, r2
 8000970:	88b9      	ldrh	r1, [r7, #4]
 8000972:	9202      	str	r2, [sp, #8]
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	883b      	ldrh	r3, [r7, #0]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	223a      	movs	r2, #58	; 0x3a
 800097e:	2101      	movs	r1, #1
 8000980:	2002      	movs	r0, #2
 8000982:	f000 fe27 	bl	80015d4 <TFT_PrintChar>
	TFT_PrintNumberClock(2, BufClock[1], ColFront, ColBack, x + 70, y + 10 );	// minuty
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 8000988:	7859      	ldrb	r1, [r3, #1]
 800098a:	8b3b      	ldrh	r3, [r7, #24]
 800098c:	3346      	adds	r3, #70	; 0x46
 800098e:	b29b      	uxth	r3, r3
 8000990:	8bba      	ldrh	r2, [r7, #28]
 8000992:	320a      	adds	r2, #10
 8000994:	b292      	uxth	r2, r2
 8000996:	883c      	ldrh	r4, [r7, #0]
 8000998:	88b8      	ldrh	r0, [r7, #4]
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4623      	mov	r3, r4
 80009a0:	4602      	mov	r2, r0
 80009a2:	2002      	movs	r0, #2
 80009a4:	f001 f85c 	bl	8001a60 <TFT_PrintNumberClock>
	TFT_PrintChar(2, 1, ':', ColFront, ColBack, x + 110, y + 10);
 80009a8:	8b3b      	ldrh	r3, [r7, #24]
 80009aa:	336e      	adds	r3, #110	; 0x6e
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	8bba      	ldrh	r2, [r7, #28]
 80009b0:	320a      	adds	r2, #10
 80009b2:	b292      	uxth	r2, r2
 80009b4:	88b9      	ldrh	r1, [r7, #4]
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	883b      	ldrh	r3, [r7, #0]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	460b      	mov	r3, r1
 80009c0:	223a      	movs	r2, #58	; 0x3a
 80009c2:	2101      	movs	r1, #1
 80009c4:	2002      	movs	r0, #2
 80009c6:	f000 fe05 	bl	80015d4 <TFT_PrintChar>
	TFT_PrintNumberClock(2, BufClock[0], ColFront, ColBack, x + 125, y + 10 );	// sekundy
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 80009cc:	7819      	ldrb	r1, [r3, #0]
 80009ce:	8b3b      	ldrh	r3, [r7, #24]
 80009d0:	337d      	adds	r3, #125	; 0x7d
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	8bba      	ldrh	r2, [r7, #28]
 80009d6:	320a      	adds	r2, #10
 80009d8:	b292      	uxth	r2, r2
 80009da:	883c      	ldrh	r4, [r7, #0]
 80009dc:	88b8      	ldrh	r0, [r7, #4]
 80009de:	9201      	str	r2, [sp, #4]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4623      	mov	r3, r4
 80009e4:	4602      	mov	r2, r0
 80009e6:	2002      	movs	r0, #2
 80009e8:	f001 f83a 	bl	8001a60 <TFT_PrintNumberClock>
	TFT_PrintNumberClock(2, BufClock[5], ColFront, ColBack, x + 40, y + 50 );	// mesice
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 80009ee:	7959      	ldrb	r1, [r3, #5]
 80009f0:	8b3b      	ldrh	r3, [r7, #24]
 80009f2:	3328      	adds	r3, #40	; 0x28
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	8bba      	ldrh	r2, [r7, #28]
 80009f8:	3232      	adds	r2, #50	; 0x32
 80009fa:	b292      	uxth	r2, r2
 80009fc:	883c      	ldrh	r4, [r7, #0]
 80009fe:	88b8      	ldrh	r0, [r7, #4]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4623      	mov	r3, r4
 8000a06:	4602      	mov	r2, r0
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f001 f829 	bl	8001a60 <TFT_PrintNumberClock>
	TFT_PrintChar(2, 1, '/', ColFront, ColBack, x + 80, y + 50);
 8000a0e:	8b3b      	ldrh	r3, [r7, #24]
 8000a10:	3350      	adds	r3, #80	; 0x50
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	8bba      	ldrh	r2, [r7, #28]
 8000a16:	3232      	adds	r2, #50	; 0x32
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	88b9      	ldrh	r1, [r7, #4]
 8000a1c:	9202      	str	r2, [sp, #8]
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	222f      	movs	r2, #47	; 0x2f
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fdd2 	bl	80015d4 <TFT_PrintChar>
	TFT_PrintNumberClock(2, BufClock[4], ColFront, ColBack, x + 95, y + 50 );	// dny
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <TFT_ButtonClock+0x1ac>)
 8000a32:	7919      	ldrb	r1, [r3, #4]
 8000a34:	8b3b      	ldrh	r3, [r7, #24]
 8000a36:	335f      	adds	r3, #95	; 0x5f
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	8bba      	ldrh	r2, [r7, #28]
 8000a3c:	3232      	adds	r2, #50	; 0x32
 8000a3e:	b292      	uxth	r2, r2
 8000a40:	883c      	ldrh	r4, [r7, #0]
 8000a42:	88b8      	ldrh	r0, [r7, #4]
 8000a44:	9201      	str	r2, [sp, #4]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	4623      	mov	r3, r4
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f001 f807 	bl	8001a60 <TFT_PrintNumberClock>
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	24000188 	.word	0x24000188
 8000a60:	240000a8 	.word	0x240000a8

08000a64 <TFT_KeypadNumberCheck>:
/**
  * @brief returns the number from the keypad
  * @param Max digits, ColFront, ColBox, ColBack, X, Y
  * @retval Number from the keypad
  */
uint16_t TFT_KeypadNumberCheck( uint8_t DigitsMax, uint16_t ColFront, uint16_t ColBox, uint16_t ColBack, uint16_t x, uint16_t y ) {
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af04      	add	r7, sp, #16
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4623      	mov	r3, r4
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	4603      	mov	r3, r0
 8000a78:	80bb      	strh	r3, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	807b      	strh	r3, [r7, #2]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	803b      	strh	r3, [r7, #0]
uint16_t KeyResult = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	81fb      	strh	r3, [r7, #14]
uint8_t KeyNum;
uint8_t KeyCounter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	733b      	strb	r3, [r7, #12]

	while( KeyCounter < DigitsMax ) {
 8000a8a:	e0ca      	b.n	8000c22 <TFT_KeypadNumberCheck+0x1be>
		KeyNum = 12;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x, y + 60 ) == 1 ) KeyNum = 1;
 8000a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a92:	333c      	adds	r3, #60	; 0x3c
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	8c3b      	ldrh	r3, [r7, #32]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fa4c 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <TFT_KeypadNumberCheck+0x46>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x +  80, y + 60 ) == 1 ) KeyNum = 2;
 8000aaa:	8c3b      	ldrh	r3, [r7, #32]
 8000aac:	3350      	adds	r3, #80	; 0x50
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ab2:	333c      	adds	r3, #60	; 0x3c
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4610      	mov	r0, r2
 8000aba:	f000 fa3d 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d101      	bne.n	8000ac8 <TFT_KeypadNumberCheck+0x64>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x + 160, y + 60) == 1 ) KeyNum = 3;
 8000ac8:	8c3b      	ldrh	r3, [r7, #32]
 8000aca:	33a0      	adds	r3, #160	; 0xa0
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ad0:	333c      	adds	r3, #60	; 0x3c
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	f000 fa2e 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d101      	bne.n	8000ae6 <TFT_KeypadNumberCheck+0x82>
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x, y + 140 ) == 1 ) KeyNum = 4;
 8000ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ae8:	338c      	adds	r3, #140	; 0x8c
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	8c3b      	ldrh	r3, [r7, #32]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa21 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d101      	bne.n	8000b00 <TFT_KeypadNumberCheck+0x9c>
 8000afc:	2304      	movs	r3, #4
 8000afe:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x + 80, y + 140 ) == 1 ) KeyNum = 5;
 8000b00:	8c3b      	ldrh	r3, [r7, #32]
 8000b02:	3350      	adds	r3, #80	; 0x50
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b08:	338c      	adds	r3, #140	; 0x8c
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4610      	mov	r0, r2
 8000b10:	f000 fa12 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d101      	bne.n	8000b1e <TFT_KeypadNumberCheck+0xba>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x + 160, y + 140 ) == 1 ) KeyNum = 6;
 8000b1e:	8c3b      	ldrh	r3, [r7, #32]
 8000b20:	33a0      	adds	r3, #160	; 0xa0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b26:	338c      	adds	r3, #140	; 0x8c
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	f000 fa03 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d101      	bne.n	8000b3c <TFT_KeypadNumberCheck+0xd8>
 8000b38:	2306      	movs	r3, #6
 8000b3a:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x, y + 220 ) == 1 ) KeyNum = 7;
 8000b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b3e:	33dc      	adds	r3, #220	; 0xdc
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	8c3b      	ldrh	r3, [r7, #32]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f9f6 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d101      	bne.n	8000b56 <TFT_KeypadNumberCheck+0xf2>
 8000b52:	2307      	movs	r3, #7
 8000b54:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x + 80, y + 220 ) == 1 ) KeyNum = 8;
 8000b56:	8c3b      	ldrh	r3, [r7, #32]
 8000b58:	3350      	adds	r3, #80	; 0x50
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b5e:	33dc      	adds	r3, #220	; 0xdc
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4619      	mov	r1, r3
 8000b64:	4610      	mov	r0, r2
 8000b66:	f000 f9e7 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <TFT_KeypadNumberCheck+0x110>
 8000b70:	2308      	movs	r3, #8
 8000b72:	737b      	strb	r3, [r7, #13]
		if( TFT_ButtonNumberCheck( x + 160, y + 220 ) == 1 ) KeyNum = 9;
 8000b74:	8c3b      	ldrh	r3, [r7, #32]
 8000b76:	33a0      	adds	r3, #160	; 0xa0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b7c:	33dc      	adds	r3, #220	; 0xdc
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f000 f9d8 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <TFT_KeypadNumberCheck+0x12e>
 8000b8e:	2309      	movs	r3, #9
 8000b90:	737b      	strb	r3, [r7, #13]
		if(( TFT_ButtonStringCheck( x + 80, y + 300 ) == 1 ) && ( KeyNum > 0 )) break;
 8000b92:	8c3b      	ldrh	r3, [r7, #32]
 8000b94:	3350      	adds	r3, #80	; 0x50
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b9a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f000 f942 	bl	8000e2c <TFT_ButtonStringCheck>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d102      	bne.n	8000bb4 <TFT_KeypadNumberCheck+0x150>
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d13c      	bne.n	8000c2e <TFT_KeypadNumberCheck+0x1ca>
		if( TFT_ButtonNumberCheck( x, y + 300 ) == 1 ) KeyNum = 0;
 8000bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bb6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	8c3b      	ldrh	r3, [r7, #32]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f9b9 	bl	8000f38 <TFT_ButtonNumberCheck>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <TFT_KeypadNumberCheck+0x16c>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	737b      	strb	r3, [r7, #13]
		if( KeyNum < 12 ) {
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	2b0b      	cmp	r3, #11
 8000bd4:	d825      	bhi.n	8000c22 <TFT_KeypadNumberCheck+0x1be>
			KeyResult = ( KeyResult * 10 ) + KeyNum;
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	81fb      	strh	r3, [r7, #14]
			KeyCounter++;
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	733b      	strb	r3, [r7, #12]
			TFT_PrintNumber( 2, KeyResult, DigitsMax, 0, ColFront, ColBack, x + 200 - (DigitsMax * 16), y + 14 );
 8000bf0:	89f9      	ldrh	r1, [r7, #14]
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	8c3a      	ldrh	r2, [r7, #32]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	33c8      	adds	r3, #200	; 0xc8
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c06:	320e      	adds	r2, #14
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	79f8      	ldrb	r0, [r7, #7]
 8000c0c:	9203      	str	r2, [sp, #12]
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	883b      	ldrh	r3, [r7, #0]
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f000 fe8d 	bl	800193c <TFT_PrintNumber>
	while( KeyCounter < DigitsMax ) {
 8000c22:	7b3a      	ldrb	r2, [r7, #12]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	f4ff af30 	bcc.w	8000a8c <TFT_KeypadNumberCheck+0x28>
 8000c2c:	e000      	b.n	8000c30 <TFT_KeypadNumberCheck+0x1cc>
		if(( TFT_ButtonStringCheck( x + 80, y + 300 ) == 1 ) && ( KeyNum > 0 )) break;
 8000c2e:	bf00      	nop
		}
	}
	return KeyResult;
 8000c30:	89fb      	ldrh	r3, [r7, #14]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd90      	pop	{r4, r7, pc}
	...

08000c3c <TFT_KeypadNumber>:
/**
  * @brief draws a numeric keypad and text box for result
  * @param string, ColFront, ColBox, ColBack, X, Y
  * @retval none
  */
void TFT_KeypadNumber( const char *String, uint16_t ColFront, uint16_t ColBox, uint16_t ColBack, uint16_t x, uint16_t y ) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	817b      	strh	r3, [r7, #10]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	813b      	strh	r3, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
	TFT_ColorBox( x, x + 240, y, y + 380, ColBlack );
 8000c56:	8c3b      	ldrh	r3, [r7, #32]
 8000c58:	33f0      	adds	r3, #240	; 0xf0
 8000c5a:	b299      	uxth	r1, r3
 8000c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c66:	8c38      	ldrh	r0, [r7, #32]
 8000c68:	2400      	movs	r4, #0
 8000c6a:	9400      	str	r4, [sp, #0]
 8000c6c:	f000 fb88 	bl	8001380 <TFT_ColorBox>
	TFT_ColorBox( x + 4, x + 236, y + 4, y + 56, ColBack );
 8000c70:	8c3b      	ldrh	r3, [r7, #32]
 8000c72:	3304      	adds	r3, #4
 8000c74:	b298      	uxth	r0, r3
 8000c76:	8c3b      	ldrh	r3, [r7, #32]
 8000c78:	33ec      	adds	r3, #236	; 0xec
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c7e:	3304      	adds	r3, #4
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c84:	3338      	adds	r3, #56	; 0x38
 8000c86:	b29c      	uxth	r4, r3
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4623      	mov	r3, r4
 8000c8e:	f000 fb77 	bl	8001380 <TFT_ColorBox>
	TFT_DrawBox(x + 3, y + 3, x + 237, y + 57, ColBox );
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	3303      	adds	r3, #3
 8000c96:	b298      	uxth	r0, r3
 8000c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ca0:	33ed      	adds	r3, #237	; 0xed
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ca6:	3339      	adds	r3, #57	; 0x39
 8000ca8:	b29c      	uxth	r4, r3
 8000caa:	893b      	ldrh	r3, [r7, #8]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4623      	mov	r3, r4
 8000cb0:	f000 fc58 	bl	8001564 <TFT_DrawBox>
	TFT_PrintString( 2, String, ColFront, ColBack, x + 10, y + 14 );
 8000cb4:	8c3b      	ldrh	r3, [r7, #32]
 8000cb6:	330a      	adds	r3, #10
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000cbc:	320e      	adds	r2, #14
 8000cbe:	b292      	uxth	r2, r2
 8000cc0:	88f8      	ldrh	r0, [r7, #6]
 8000cc2:	8979      	ldrh	r1, [r7, #10]
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	4603      	mov	r3, r0
 8000cca:	460a      	mov	r2, r1
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f000 fdea 	bl	80018a8 <TFT_PrintString>

	TFT_ButtonNumber( '1', ColFront, ColBox, ColBack, x, y + 60 );
 8000cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cd6:	333c      	adds	r3, #60	; 0x3c
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	88f8      	ldrh	r0, [r7, #6]
 8000cdc:	893a      	ldrh	r2, [r7, #8]
 8000cde:	8979      	ldrh	r1, [r7, #10]
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	8c3b      	ldrh	r3, [r7, #32]
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2031      	movs	r0, #49	; 0x31
 8000cea:	f000 f967 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '2', ColFront, ColBox, ColBack, x +  80, y + 60);
 8000cee:	8c3b      	ldrh	r3, [r7, #32]
 8000cf0:	3350      	adds	r3, #80	; 0x50
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000cf6:	323c      	adds	r2, #60	; 0x3c
 8000cf8:	b292      	uxth	r2, r2
 8000cfa:	88fc      	ldrh	r4, [r7, #6]
 8000cfc:	8938      	ldrh	r0, [r7, #8]
 8000cfe:	8979      	ldrh	r1, [r7, #10]
 8000d00:	9201      	str	r2, [sp, #4]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	4623      	mov	r3, r4
 8000d06:	4602      	mov	r2, r0
 8000d08:	2032      	movs	r0, #50	; 0x32
 8000d0a:	f000 f957 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '3', ColFront, ColBox, ColBack, x + 160, y + 60);
 8000d0e:	8c3b      	ldrh	r3, [r7, #32]
 8000d10:	33a0      	adds	r3, #160	; 0xa0
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d16:	323c      	adds	r2, #60	; 0x3c
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	88fc      	ldrh	r4, [r7, #6]
 8000d1c:	8938      	ldrh	r0, [r7, #8]
 8000d1e:	8979      	ldrh	r1, [r7, #10]
 8000d20:	9201      	str	r2, [sp, #4]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4623      	mov	r3, r4
 8000d26:	4602      	mov	r2, r0
 8000d28:	2033      	movs	r0, #51	; 0x33
 8000d2a:	f000 f947 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '4', ColFront, ColBox, ColBack, x, y + 140 );
 8000d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d30:	338c      	adds	r3, #140	; 0x8c
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	893a      	ldrh	r2, [r7, #8]
 8000d38:	8979      	ldrh	r1, [r7, #10]
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	8c3b      	ldrh	r3, [r7, #32]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4603      	mov	r3, r0
 8000d42:	2034      	movs	r0, #52	; 0x34
 8000d44:	f000 f93a 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '5', ColFront, ColBox, ColBack, x +  80, y + 140 );
 8000d48:	8c3b      	ldrh	r3, [r7, #32]
 8000d4a:	3350      	adds	r3, #80	; 0x50
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d50:	328c      	adds	r2, #140	; 0x8c
 8000d52:	b292      	uxth	r2, r2
 8000d54:	88fc      	ldrh	r4, [r7, #6]
 8000d56:	8938      	ldrh	r0, [r7, #8]
 8000d58:	8979      	ldrh	r1, [r7, #10]
 8000d5a:	9201      	str	r2, [sp, #4]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	4623      	mov	r3, r4
 8000d60:	4602      	mov	r2, r0
 8000d62:	2035      	movs	r0, #53	; 0x35
 8000d64:	f000 f92a 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '6', ColFront, ColBox, ColBack, x + 160, y + 140 );
 8000d68:	8c3b      	ldrh	r3, [r7, #32]
 8000d6a:	33a0      	adds	r3, #160	; 0xa0
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d70:	328c      	adds	r2, #140	; 0x8c
 8000d72:	b292      	uxth	r2, r2
 8000d74:	88fc      	ldrh	r4, [r7, #6]
 8000d76:	8938      	ldrh	r0, [r7, #8]
 8000d78:	8979      	ldrh	r1, [r7, #10]
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	4623      	mov	r3, r4
 8000d80:	4602      	mov	r2, r0
 8000d82:	2036      	movs	r0, #54	; 0x36
 8000d84:	f000 f91a 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '7', ColFront, ColBox, ColBack, x, y + 220 );
 8000d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d8a:	33dc      	adds	r3, #220	; 0xdc
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	88f8      	ldrh	r0, [r7, #6]
 8000d90:	893a      	ldrh	r2, [r7, #8]
 8000d92:	8979      	ldrh	r1, [r7, #10]
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	8c3b      	ldrh	r3, [r7, #32]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2037      	movs	r0, #55	; 0x37
 8000d9e:	f000 f90d 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '8', ColFront, ColBox, ColBack, x +  80, y + 220 );
 8000da2:	8c3b      	ldrh	r3, [r7, #32]
 8000da4:	3350      	adds	r3, #80	; 0x50
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000daa:	32dc      	adds	r2, #220	; 0xdc
 8000dac:	b292      	uxth	r2, r2
 8000dae:	88fc      	ldrh	r4, [r7, #6]
 8000db0:	8938      	ldrh	r0, [r7, #8]
 8000db2:	8979      	ldrh	r1, [r7, #10]
 8000db4:	9201      	str	r2, [sp, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4623      	mov	r3, r4
 8000dba:	4602      	mov	r2, r0
 8000dbc:	2038      	movs	r0, #56	; 0x38
 8000dbe:	f000 f8fd 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonNumber( '9', ColFront, ColBox, ColBack, x + 160, y + 220 );
 8000dc2:	8c3b      	ldrh	r3, [r7, #32]
 8000dc4:	33a0      	adds	r3, #160	; 0xa0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000dca:	32dc      	adds	r2, #220	; 0xdc
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	88fc      	ldrh	r4, [r7, #6]
 8000dd0:	8938      	ldrh	r0, [r7, #8]
 8000dd2:	8979      	ldrh	r1, [r7, #10]
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4623      	mov	r3, r4
 8000dda:	4602      	mov	r2, r0
 8000ddc:	2039      	movs	r0, #57	; 0x39
 8000dde:	f000 f8ed 	bl	8000fbc <TFT_ButtonNumber>
	TFT_ButtonString( "   OK", ColFront, ColBox, ColBack, x + 80, y + 300 );
 8000de2:	8c3b      	ldrh	r3, [r7, #32]
 8000de4:	3350      	adds	r3, #80	; 0x50
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000dea:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000dee:	b292      	uxth	r2, r2
 8000df0:	88fc      	ldrh	r4, [r7, #6]
 8000df2:	8938      	ldrh	r0, [r7, #8]
 8000df4:	8979      	ldrh	r1, [r7, #10]
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <TFT_KeypadNumber+0x1ec>)
 8000e00:	f000 f856 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonNumber( '0', ColFront, ColBox, ColBack, x, y + 300 );
 8000e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e06:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	88f8      	ldrh	r0, [r7, #6]
 8000e0e:	893a      	ldrh	r2, [r7, #8]
 8000e10:	8979      	ldrh	r1, [r7, #10]
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	8c3b      	ldrh	r3, [r7, #32]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2030      	movs	r0, #48	; 0x30
 8000e1c:	f000 f8ce 	bl	8000fbc <TFT_ButtonNumber>
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	08007af4 	.word	0x08007af4

08000e2c <TFT_ButtonStringCheck>:
/**
  * @brief returns 1, when a key is pressed
  * @param X, Y
  * @retval key press
  */
uint8_t TFT_ButtonStringCheck( uint16_t x, uint16_t y ) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	80bb      	strh	r3, [r7, #4]
uint8_t NumReturn;
	if(( TouchXresult > (x + 5)) && ( TouchXresult < (x + 155)) && ( TouchYresult > (y + 5)) && ( TouchYresult < (y + 75))) {
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <TFT_ButtonStringCheck+0x78>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	3305      	adds	r3, #5
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dd24      	ble.n	8000e94 <TFT_ButtonStringCheck+0x68>
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	339a      	adds	r3, #154	; 0x9a
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <TFT_ButtonStringCheck+0x78>)
 8000e50:	8812      	ldrh	r2, [r2, #0]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	db1e      	blt.n	8000e94 <TFT_ButtonStringCheck+0x68>
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <TFT_ButtonStringCheck+0x7c>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	3305      	adds	r3, #5
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dd17      	ble.n	8000e94 <TFT_ButtonStringCheck+0x68>
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	334a      	adds	r3, #74	; 0x4a
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <TFT_ButtonStringCheck+0x7c>)
 8000e6a:	8812      	ldrh	r2, [r2, #0]
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	db11      	blt.n	8000e94 <TFT_ButtonStringCheck+0x68>
		NumReturn = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
		TouchXresult = 0;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <TFT_ButtonStringCheck+0x78>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]
		TouchYresult = 0;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <TFT_ButtonStringCheck+0x7c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
		TouchTimer = 300;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <TFT_ButtonStringCheck+0x80>)
 8000e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e86:	801a      	strh	r2, [r3, #0]
		Beep(1000, 10);
 8000e88:	210a      	movs	r1, #10
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f002 fc3b 	bl	8003708 <Beep>
 8000e92:	e001      	b.n	8000e98 <TFT_ButtonStringCheck+0x6c>
	}
	else {
		NumReturn = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
	}
	return NumReturn;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000040 	.word	0x24000040
 8000ea8:	24000042 	.word	0x24000042
 8000eac:	24000046 	.word	0x24000046

08000eb0 <TFT_ButtonString>:
/**
  * @brief draws a string in box for keyboard
  * @param Number, ColFront, ColBox, ColBack, X, Y
  * @retval none
  */
void TFT_ButtonString( const char *String,  uint16_t ColFront, uint16_t ColBox, uint16_t ColBack, uint16_t x, uint16_t y ) {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	817b      	strh	r3, [r7, #10]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	813b      	strh	r3, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	80fb      	strh	r3, [r7, #6]
	TFT_ColorBox(x + 4, x + 156, y + 4, y + 76, ColBack);
 8000eca:	8c3b      	ldrh	r3, [r7, #32]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	8c3b      	ldrh	r3, [r7, #32]
 8000ed2:	339c      	adds	r3, #156	; 0x9c
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed8:	3304      	adds	r3, #4
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ede:	334c      	adds	r3, #76	; 0x4c
 8000ee0:	b29c      	uxth	r4, r3
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	f000 fa4a 	bl	8001380 <TFT_ColorBox>
	TFT_DrawBox(x + 3, y + 3, x + 157, y + 77, ColBox);
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	3303      	adds	r3, #3
 8000ef0:	b298      	uxth	r0, r3
 8000ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	8c3b      	ldrh	r3, [r7, #32]
 8000efa:	339d      	adds	r3, #157	; 0x9d
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f00:	334d      	adds	r3, #77	; 0x4d
 8000f02:	b29c      	uxth	r4, r3
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	4623      	mov	r3, r4
 8000f0a:	f000 fb2b 	bl	8001564 <TFT_DrawBox>
	TFT_PrintString( 1, String, ColFront, ColBack, x + 10, y + 24);
 8000f0e:	8c3b      	ldrh	r3, [r7, #32]
 8000f10:	330a      	adds	r3, #10
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f16:	3218      	adds	r2, #24
 8000f18:	b292      	uxth	r2, r2
 8000f1a:	88f8      	ldrh	r0, [r7, #6]
 8000f1c:	8979      	ldrh	r1, [r7, #10]
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fcbd 	bl	80018a8 <TFT_PrintString>
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
	...

08000f38 <TFT_ButtonNumberCheck>:
/**
  * @brief returns 1, when a key is pressed
  * @param X, Y
  * @retval key press
  */
uint8_t TFT_ButtonNumberCheck( uint16_t x, uint16_t y ) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	80bb      	strh	r3, [r7, #4]
uint8_t NumReturn;
	if(( TouchXresult > (x + 5)) && ( TouchXresult < (x + 75)) && ( TouchYresult > (y + 5)) && ( TouchYresult < (y + 75))) {
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <TFT_ButtonNumberCheck+0x78>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	3305      	adds	r3, #5
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dd24      	ble.n	8000fa0 <TFT_ButtonNumberCheck+0x68>
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	334a      	adds	r3, #74	; 0x4a
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <TFT_ButtonNumberCheck+0x78>)
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	db1e      	blt.n	8000fa0 <TFT_ButtonNumberCheck+0x68>
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <TFT_ButtonNumberCheck+0x7c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	3305      	adds	r3, #5
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dd17      	ble.n	8000fa0 <TFT_ButtonNumberCheck+0x68>
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	334a      	adds	r3, #74	; 0x4a
 8000f74:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <TFT_ButtonNumberCheck+0x7c>)
 8000f76:	8812      	ldrh	r2, [r2, #0]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	db11      	blt.n	8000fa0 <TFT_ButtonNumberCheck+0x68>
		NumReturn = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
		TouchXresult = 0;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <TFT_ButtonNumberCheck+0x78>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
		TouchYresult = 0;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <TFT_ButtonNumberCheck+0x7c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
		TouchTimer = 300;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <TFT_ButtonNumberCheck+0x80>)
 8000f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f92:	801a      	strh	r2, [r3, #0]
		Beep(1000, 10);
 8000f94:	210a      	movs	r1, #10
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f002 fbb5 	bl	8003708 <Beep>
 8000f9e:	e001      	b.n	8000fa4 <TFT_ButtonNumberCheck+0x6c>
	}
	else {
		NumReturn = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
	}
	return NumReturn;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000040 	.word	0x24000040
 8000fb4:	24000042 	.word	0x24000042
 8000fb8:	24000046 	.word	0x24000046

08000fbc <TFT_ButtonNumber>:
/**
  * @brief draws a number in box for keyboard
  * @param Number, ColFront, ColBox, ColBack, X, Y
  * @retval none
  */
void TFT_ButtonNumber( uint8_t Number,  uint16_t ColFront, uint16_t ColBox, uint16_t ColBack, uint16_t x, uint16_t y ) {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]
	TFT_ColorBox(x + 4, x + 76, y + 4, y + 76, ColBack);
 8000fda:	8b3b      	ldrh	r3, [r7, #24]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	b298      	uxth	r0, r3
 8000fe0:	8b3b      	ldrh	r3, [r7, #24]
 8000fe2:	334c      	adds	r3, #76	; 0x4c
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	8bbb      	ldrh	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	8bbb      	ldrh	r3, [r7, #28]
 8000fee:	334c      	adds	r3, #76	; 0x4c
 8000ff0:	b29c      	uxth	r4, r3
 8000ff2:	883b      	ldrh	r3, [r7, #0]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	f000 f9c2 	bl	8001380 <TFT_ColorBox>
	TFT_DrawBox(x + 3, y + 3, x + 77, y + 77, ColBox);
 8000ffc:	8b3b      	ldrh	r3, [r7, #24]
 8000ffe:	3303      	adds	r3, #3
 8001000:	b298      	uxth	r0, r3
 8001002:	8bbb      	ldrh	r3, [r7, #28]
 8001004:	3303      	adds	r3, #3
 8001006:	b299      	uxth	r1, r3
 8001008:	8b3b      	ldrh	r3, [r7, #24]
 800100a:	334d      	adds	r3, #77	; 0x4d
 800100c:	b29a      	uxth	r2, r3
 800100e:	8bbb      	ldrh	r3, [r7, #28]
 8001010:	334d      	adds	r3, #77	; 0x4d
 8001012:	b29c      	uxth	r4, r3
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4623      	mov	r3, r4
 800101a:	f000 faa3 	bl	8001564 <TFT_DrawBox>
	TFT_PrintChar( 2, 0, Number, ColFront, ColBack, x + 30, y + 24);
 800101e:	8b3b      	ldrh	r3, [r7, #24]
 8001020:	331e      	adds	r3, #30
 8001022:	b29b      	uxth	r3, r3
 8001024:	8bba      	ldrh	r2, [r7, #28]
 8001026:	3218      	adds	r2, #24
 8001028:	b292      	uxth	r2, r2
 800102a:	88b8      	ldrh	r0, [r7, #4]
 800102c:	79f9      	ldrb	r1, [r7, #7]
 800102e:	9202      	str	r2, [sp, #8]
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	2100      	movs	r1, #0
 800103c:	2002      	movs	r0, #2
 800103e:	f000 fac9 	bl	80015d4 <TFT_PrintChar>
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
	...

0800104c <TFT_SendData>:
/**
  * @brief sends an data to the controller display SSD1963
  * @param uint16_t data
  * @retval none
  */
void TFT_SendData(uint16_t val) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
//	HAL_SRAM_Write_16b(&hsram1, TFT_DATA, &val, 1);
	*TFT_DATA = val;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <TFT_SendData+0x1c>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	c0040000 	.word	0xc0040000

0800106c <TFT_SendCommand>:
/**
  * @brief sends an instruction to the controller display SSD1963
  * @param uint16_t instruction
  * @retval none
  */
void TFT_SendCommand(uint16_t val) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
//	HAL_SRAM_Write_16b(&hsram1, TFT_COMMAND, &val, 1);
	*TFT_COMMAND = val;
 8001076:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <TFT_WriteRegister>:
/**
  * @brief sends an instruction and data
  * @param
  * @retval none
  */
void TFT_WriteRegister(uint16_t command, uint16_t val) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	460a      	mov	r2, r1
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	80bb      	strh	r3, [r7, #4]
	TFT_SendCommand( command );
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffe5 	bl	800106c <TFT_SendCommand>
	TFT_SendData( val );
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffd1 	bl	800104c <TFT_SendData>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <TFT_Init>:
/**
  * @brief initializes the display with the controller SSD1963
  * @param
  * @retval none
  */
void TFT_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FMC_RES_GPIO_Port, FMC_RES_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	4878      	ldr	r0, [pc, #480]	; (80012a0 <TFT_Init+0x1ec>)
 80010c0:	f003 fe38 	bl	8004d34 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f003 fb69 	bl	800479c <HAL_Delay>
	HAL_GPIO_WritePin(FMC_RES_GPIO_Port, FMC_RES_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4873      	ldr	r0, [pc, #460]	; (80012a0 <TFT_Init+0x1ec>)
 80010d2:	f003 fe2f 	bl	8004d34 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 80010d6:	200a      	movs	r0, #10
 80010d8:	f003 fb60 	bl	800479c <HAL_Delay>
	TFT_SendCommand( 0x0001 );
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ffc5 	bl	800106c <TFT_SendCommand>
	HAL_Delay( 50 );
 80010e2:	2032      	movs	r0, #50	; 0x32
 80010e4:	f003 fb5a 	bl	800479c <HAL_Delay>
	TFT_SendCommand( 0x00E2 );
 80010e8:	20e2      	movs	r0, #226	; 0xe2
 80010ea:	f7ff ffbf 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x001E );					// 0x0023
 80010ee:	201e      	movs	r0, #30
 80010f0:	f7ff ffac 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0002 );					// 0x0002
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff ffa9 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0054 );					// originally 0x0004
 80010fa:	2054      	movs	r0, #84	; 0x54
 80010fc:	f7ff ffa6 	bl	800104c <TFT_SendData>
	TFT_WriteRegister( 0x00E0, 0x0001 );	// PLL enable
 8001100:	2101      	movs	r1, #1
 8001102:	20e0      	movs	r0, #224	; 0xe0
 8001104:	f7ff ffc1 	bl	800108a <TFT_WriteRegister>
	HAL_Delay( 20 );
 8001108:	2014      	movs	r0, #20
 800110a:	f003 fb47 	bl	800479c <HAL_Delay>
	TFT_WriteRegister( 0x00E0, 0x0003 );
 800110e:	2103      	movs	r1, #3
 8001110:	20e0      	movs	r0, #224	; 0xe0
 8001112:	f7ff ffba 	bl	800108a <TFT_WriteRegister>
	HAL_Delay( 20 );
 8001116:	2014      	movs	r0, #20
 8001118:	f003 fb40 	bl	800479c <HAL_Delay>
	TFT_SendCommand( 0x0001 );				// software reset
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffa5 	bl	800106c <TFT_SendCommand>
	HAL_Delay( 100 );
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f003 fb3a 	bl	800479c <HAL_Delay>

	TFT_SendCommand( 0x00E6 );   			//SET PCLK freq=9.5MHz  ; pixel clock frequency
 8001128:	20e6      	movs	r0, #230	; 0xe6
 800112a:	f7ff ff9f 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0003 );					// 0x0004
 800112e:	2003      	movs	r0, #3
 8001130:	f7ff ff8c 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00FF );					// 0x0093
 8001134:	20ff      	movs	r0, #255	; 0xff
 8001136:	f7ff ff89 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00FF );					// 0x00E0
 800113a:	20ff      	movs	r0, #255	; 0xff
 800113c:	f7ff ff86 	bl	800104c <TFT_SendData>

	TFT_SendCommand( 0x00B0 );				// set LCD specification
 8001140:	20b0      	movs	r0, #176	; 0xb0
 8001142:	f7ff ff93 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0024 );					// must by 0x0024 for correct color order
 8001146:	2024      	movs	r0, #36	; 0x24
 8001148:	f7ff ff80 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );					//LCD panel mode
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ff7d 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0003 );					//SET horizontal size=800-1 HightByte
 8001152:	2003      	movs	r0, #3
 8001154:	f7ff ff7a 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x001F );				    //SET horizontal size=800-1 LowByte
 8001158:	201f      	movs	r0, #31
 800115a:	f7ff ff77 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0001 );					//SET vertical size=480-1 HightByte
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff ff74 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00DF );					//SET vertical size=480-1 LowByte
 8001164:	20df      	movs	r0, #223	; 0xdf
 8001166:	f7ff ff71 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );					//SET even/odd line RGB seq.=RGB
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff ff6e 	bl	800104c <TFT_SendData>

	TFT_SendCommand( 0x00B4 );				//SET Horizontal Period (8 parameters)
 8001170:	20b4      	movs	r0, #180	; 0xb4
 8001172:	f7ff ff7b 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0003 );					//1000 HT
 8001176:	2003      	movs	r0, #3
 8001178:	f7ff ff68 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00E8 );
 800117c:	20e8      	movs	r0, #232	; 0xe8
 800117e:	f7ff ff65 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );					//51 HPS
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff ff62 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0033 );
 8001188:	2033      	movs	r0, #51	; 0x33
 800118a:	f7ff ff5f 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0008 );					//8 HPW
 800118e:	2008      	movs	r0, #8
 8001190:	f7ff ff5c 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ff59 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0003 );					//3 LPS
 800119a:	2003      	movs	r0, #3
 800119c:	f7ff ff56 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff53 	bl	800104c <TFT_SendData>

	TFT_SendCommand( 0x00B6 );		 		//SET Vertical Period (7 parameters),
 80011a6:	20b6      	movs	r0, #182	; 0xb6
 80011a8:	f7ff ff60 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0002 );					//530 VT
 80011ac:	2002      	movs	r0, #2
 80011ae:	f7ff ff4d 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0012 );
 80011b2:	2012      	movs	r0, #18
 80011b4:	f7ff ff4a 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );					//24 VPS
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ff47 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0018 );
 80011be:	2018      	movs	r0, #24
 80011c0:	f7ff ff44 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0003 );					//3 VPW
 80011c4:	2003      	movs	r0, #3
 80011c6:	f7ff ff41 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );					//23 FPS
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ff3e 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0017 );
 80011d0:	2017      	movs	r0, #23
 80011d2:	f7ff ff3b 	bl	800104c <TFT_SendData>

	TFT_SendCommand( 0x002B );				//Set column address
 80011d6:	202b      	movs	r0, #43	; 0x2b
 80011d8:	f7ff ff48 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0000 );
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ff35 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff32 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0001 );
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff2f 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00DF );
 80011ee:	20df      	movs	r0, #223	; 0xdf
 80011f0:	f7ff ff2c 	bl	800104c <TFT_SendData>

	TFT_SendCommand( 0x002A );
 80011f4:	202a      	movs	r0, #42	; 0x2a
 80011f6:	f7ff ff39 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0000 );
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff ff26 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff23 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0003 );
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff ff20 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x001F );
 800120c:	201f      	movs	r0, #31
 800120e:	f7ff ff1d 	bl	800104c <TFT_SendData>


	TFT_WriteRegister( 0x00BA, 0x000F );	//GPIO[3:0] out 1, nebo 0x0000
 8001212:	210f      	movs	r1, #15
 8001214:	20ba      	movs	r0, #186	; 0xba
 8001216:	f7ff ff38 	bl	800108a <TFT_WriteRegister>
	TFT_SendCommand( 0x00B8 );				// reset GPIO0, nebo 0x00B8
 800121a:	20b8      	movs	r0, #184	; 0xb8
 800121c:	f7ff ff26 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0000 );					//GPIO3=input, GPIO[2:0]=output
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff13 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0001 );					//GPIO0 normal
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff ff10 	bl	800104c <TFT_SendData>

	TFT_WriteRegister( 0x0036, 0x0000 );	//rotation!!!!!!!!! rotates the display, originally 31
 800122c:	2100      	movs	r1, #0
 800122e:	2036      	movs	r0, #54	; 0x36
 8001230:	f7ff ff2b 	bl	800108a <TFT_WriteRegister>
	TFT_WriteRegister( 0x003A, 0x0050 );	// pixel data interface
 8001234:	2150      	movs	r1, #80	; 0x50
 8001236:	203a      	movs	r0, #58	; 0x3a
 8001238:	f7ff ff27 	bl	800108a <TFT_WriteRegister>
	TFT_WriteRegister( 0x00F0, 0x0003 );	// 565 format barvy
 800123c:	2103      	movs	r1, #3
 800123e:	20f0      	movs	r0, #240	; 0xf0
 8001240:	f7ff ff23 	bl	800108a <TFT_WriteRegister>
	HAL_Delay( 5 );
 8001244:	2005      	movs	r0, #5
 8001246:	f003 faa9 	bl	800479c <HAL_Delay>
	TFT_WriteRegister( 0x0026, 0x0008 );	// Display ON
 800124a:	2108      	movs	r1, #8
 800124c:	2026      	movs	r0, #38	; 0x26
 800124e:	f7ff ff1c 	bl	800108a <TFT_WriteRegister>
	TFT_SendCommand( 0x0029 );				// Display ON
 8001252:	2029      	movs	r0, #41	; 0x29
 8001254:	f7ff ff0a 	bl	800106c <TFT_SendCommand>
	TFT_SendCommand( 0x00BE );				// set PWM for B/L
 8001258:	20be      	movs	r0, #190	; 0xbe
 800125a:	f7ff ff07 	bl	800106c <TFT_SendCommand>
	TFT_SendData( 0x0001 );					// frequency PWM
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fef4 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00FF );					// value PWM
 8001264:	20ff      	movs	r0, #255	; 0xff
 8001266:	f7ff fef1 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0001 );					// PWM enable
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff feee 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x00F0 );
 8001270:	20f0      	movs	r0, #240	; 0xf0
 8001272:	f7ff feeb 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fee8 	bl	800104c <TFT_SendData>
	TFT_SendData( 0x0000 );
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fee5 	bl	800104c <TFT_SendData>
	TFT_WriteRegister( 0x00D0, 0x000D );
 8001282:	210d      	movs	r1, #13
 8001284:	20d0      	movs	r0, #208	; 0xd0
 8001286:	f7ff ff00 	bl	800108a <TFT_WriteRegister>
	TFT_WriteRegister( 0x000B, 0x0064 );
 800128a:	2164      	movs	r1, #100	; 0x64
 800128c:	200b      	movs	r0, #11
 800128e:	f7ff fefc 	bl	800108a <TFT_WriteRegister>
	HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2108      	movs	r1, #8
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <TFT_Init+0x1f0>)
 8001298:	f003 fd4c 	bl	8004d34 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58020400 	.word	0x58020400
 80012a4:	58021000 	.word	0x58021000

080012a8 <TFT_WindowSet>:
/**
  * @brief sets the workspace
  * @param StartX, EndX, StartY, EndY
  * @retval none
  */
void TFT_WindowSet(uint16_t StartX, uint16_t EndX, uint16_t StartY, uint16_t EndY) {
 80012a8:	b490      	push	{r4, r7}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
	*TFT_COMMAND = 0x002A;			// SET page address
 80012c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012ca:	222a      	movs	r2, #42	; 0x2a
 80012cc:	601a      	str	r2, [r3, #0]
	*TFT_DATA = StartX >> 8;
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <TFT_WindowSet+0x78>)
 80012d6:	601a      	str	r2, [r3, #0]
	*TFT_DATA = StartX;
 80012d8:	4a11      	ldr	r2, [pc, #68]	; (8001320 <TFT_WindowSet+0x78>)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	6013      	str	r3, [r2, #0]
	*TFT_DATA = EndX >> 8;
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <TFT_WindowSet+0x78>)
 80012e6:	601a      	str	r2, [r3, #0]
	*TFT_DATA = EndX;
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <TFT_WindowSet+0x78>)
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]

	*TFT_COMMAND = 0x002B;			// SET column address
 80012ee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012f2:	222b      	movs	r2, #43	; 0x2b
 80012f4:	601a      	str	r2, [r3, #0]
	*TFT_DATA = StartY >> 8;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <TFT_WindowSet+0x78>)
 80012fe:	601a      	str	r2, [r3, #0]
	*TFT_DATA = StartY;
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <TFT_WindowSet+0x78>)
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	6013      	str	r3, [r2, #0]
	*TFT_DATA = EndY >> 8;
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <TFT_WindowSet+0x78>)
 800130e:	601a      	str	r2, [r3, #0]
	*TFT_DATA = EndY;
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <TFT_WindowSet+0x78>)
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	6013      	str	r3, [r2, #0]
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bc90      	pop	{r4, r7}
 800131e:	4770      	bx	lr
 8001320:	c0040000 	.word	0xc0040000

08001324 <TFT_WindowFull>:
/**
  * @brief sets the color on the entire screen
  * @param color
  * @retval none
  */
void TFT_WindowFull(uint16_t val) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	uint16_t x, y;
	TFT_WindowSet( 0x0000, 0x031F, 0x0000, 0x01DF );
 800132e:	f240 13df 	movw	r3, #479	; 0x1df
 8001332:	2200      	movs	r2, #0
 8001334:	f240 311f 	movw	r1, #799	; 0x31f
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ffb5 	bl	80012a8 <TFT_WindowSet>
	TFT_SendCommand( 0x002C );
 800133e:	202c      	movs	r0, #44	; 0x2c
 8001340:	f7ff fe94 	bl	800106c <TFT_SendCommand>
	for( x = 0; x < 480; x++ )
 8001344:	2300      	movs	r3, #0
 8001346:	81fb      	strh	r3, [r7, #14]
 8001348:	e00f      	b.n	800136a <TFT_WindowFull+0x46>
	{
		for( y = 0; y < 800; y++ )
 800134a:	2300      	movs	r3, #0
 800134c:	81bb      	strh	r3, [r7, #12]
 800134e:	e005      	b.n	800135c <TFT_WindowFull+0x38>
		{
			*TFT_DATA = val;	// SET color
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <TFT_WindowFull+0x58>)
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	6013      	str	r3, [r2, #0]
		for( y = 0; y < 800; y++ )
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	81bb      	strh	r3, [r7, #12]
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001362:	d3f5      	bcc.n	8001350 <TFT_WindowFull+0x2c>
	for( x = 0; x < 480; x++ )
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	3301      	adds	r3, #1
 8001368:	81fb      	strh	r3, [r7, #14]
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001370:	d3eb      	bcc.n	800134a <TFT_WindowFull+0x26>
		}
	}
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	c0040000 	.word	0xc0040000

08001380 <TFT_ColorBox>:
/**
  * @brief sets the color on the selected desktop
  * @param StartX, EndX, StartY, EndY, Color
  * @retval none
  */
void TFT_ColorBox(uint16_t StartX, uint16_t EndX, uint16_t StartY, uint16_t EndY, uint16_t color) {
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4604      	mov	r4, r0
 8001388:	4608      	mov	r0, r1
 800138a:	4611      	mov	r1, r2
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	4603      	mov	r3, r0
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]
 800139a:	4613      	mov	r3, r2
 800139c:	803b      	strh	r3, [r7, #0]
	uint16_t x, y;
	TFT_WindowSet( StartX, EndX, StartY, EndY );
 800139e:	883b      	ldrh	r3, [r7, #0]
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	88b9      	ldrh	r1, [r7, #4]
 80013a4:	88f8      	ldrh	r0, [r7, #6]
 80013a6:	f7ff ff7f 	bl	80012a8 <TFT_WindowSet>
	TFT_SendCommand( 0x002C );
 80013aa:	202c      	movs	r0, #44	; 0x2c
 80013ac:	f7ff fe5e 	bl	800106c <TFT_SendCommand>
	for( x = StartX; x <= EndX; x++ )
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	81fb      	strh	r3, [r7, #14]
 80013b4:	e00f      	b.n	80013d6 <TFT_ColorBox+0x56>
	{
		for ( y = StartY; y <= EndY; y++ )
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	81bb      	strh	r3, [r7, #12]
 80013ba:	e005      	b.n	80013c8 <TFT_ColorBox+0x48>
		{
			*TFT_DATA = color;	// SET color
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <TFT_ColorBox+0x68>)
 80013be:	8c3b      	ldrh	r3, [r7, #32]
 80013c0:	6013      	str	r3, [r2, #0]
		for ( y = StartY; y <= EndY; y++ )
 80013c2:	89bb      	ldrh	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	81bb      	strh	r3, [r7, #12]
 80013c8:	89ba      	ldrh	r2, [r7, #12]
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d9f5      	bls.n	80013bc <TFT_ColorBox+0x3c>
	for( x = StartX; x <= EndX; x++ )
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	3301      	adds	r3, #1
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	89fa      	ldrh	r2, [r7, #14]
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d9eb      	bls.n	80013b6 <TFT_ColorBox+0x36>
		}
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	c0040000 	.word	0xc0040000

080013ec <TFT_DrawPoint>:
/**
  * @brief draws a small point
  * @param X, Y, Color
  * @retval none
  */
void TFT_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
 80013f6:	460b      	mov	r3, r1
 80013f8:	80bb      	strh	r3, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	807b      	strh	r3, [r7, #2]
	TFT_WindowSet( x, x, y, y );
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	88ba      	ldrh	r2, [r7, #4]
 8001402:	88f9      	ldrh	r1, [r7, #6]
 8001404:	88f8      	ldrh	r0, [r7, #6]
 8001406:	f7ff ff4f 	bl	80012a8 <TFT_WindowSet>
	TFT_SendCommand( 0x002C );
 800140a:	202c      	movs	r0, #44	; 0x2c
 800140c:	f7ff fe2e 	bl	800106c <TFT_SendCommand>
	TFT_SendData( color );
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe1a 	bl	800104c <TFT_SendData>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <TFT_DrawLine>:
/**
  * @brief draws a line
  * @param X1, Y1, X2, Y2, Color
  * @retval none
  */
void TFT_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	4603      	mov	r3, r0
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
 800143a:	4613      	mov	r3, r2
 800143c:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, stepx, stepy, fraction;

	dy = y2 - y1;
 800143e:	883a      	ldrh	r2, [r7, #0]
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	82bb      	strh	r3, [r7, #20]
	dx = x2 - x1;
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	82fb      	strh	r3, [r7, #22]
	if (dy < 0)
 8001452:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da07      	bge.n	800146a <TFT_DrawLine+0x4a>
	{
		dy = -dy;
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	425b      	negs	r3, r3
 800145e:	b29b      	uxth	r3, r3
 8001460:	82bb      	strh	r3, [r7, #20]
		stepy = -1;
 8001462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001466:	823b      	strh	r3, [r7, #16]
 8001468:	e001      	b.n	800146e <TFT_DrawLine+0x4e>
	}
	else stepy = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	823b      	strh	r3, [r7, #16]
	if (dx < 0)
 800146e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da07      	bge.n	8001486 <TFT_DrawLine+0x66>
	{
		dx = -dx;
 8001476:	8afb      	ldrh	r3, [r7, #22]
 8001478:	425b      	negs	r3, r3
 800147a:	b29b      	uxth	r3, r3
 800147c:	82fb      	strh	r3, [r7, #22]
		stepx = -1;
 800147e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001482:	827b      	strh	r3, [r7, #18]
 8001484:	e001      	b.n	800148a <TFT_DrawLine+0x6a>
	}
	else stepx = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	827b      	strh	r3, [r7, #18]
	dx <<= 1;
 800148a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	82fb      	strh	r3, [r7, #22]
	dy <<= 1;
 8001492:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	82bb      	strh	r3, [r7, #20]
	TFT_DrawPoint( x1, y1, color );
 800149a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800149c:	88b9      	ldrh	r1, [r7, #4]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ffa3 	bl	80013ec <TFT_DrawPoint>
	if (dx > dy)
 80014a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dd2a      	ble.n	8001508 <TFT_DrawLine+0xe8>
	{
		fraction = dy - (dx >> 1);
 80014b2:	8aba      	ldrh	r2, [r7, #20]
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	105b      	asrs	r3, r3, #1
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b29b      	uxth	r3, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	81fb      	strh	r3, [r7, #14]
		while( x1 != x2 )
 80014c4:	e01b      	b.n	80014fe <TFT_DrawLine+0xde>
		{
			if (fraction >= 0)
 80014c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db08      	blt.n	80014e0 <TFT_DrawLine+0xc0>
			{
				y1			+= stepy;
 80014ce:	8a3a      	ldrh	r2, [r7, #16]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	80bb      	strh	r3, [r7, #4]
				fraction	-= dx;
 80014d6:	89fa      	ldrh	r2, [r7, #14]
 80014d8:	8afb      	ldrh	r3, [r7, #22]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	81fb      	strh	r3, [r7, #14]
			}
			x1			+= stepx;
 80014e0:	8a7a      	ldrh	r2, [r7, #18]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4413      	add	r3, r2
 80014e6:	80fb      	strh	r3, [r7, #6]
			fraction	+= dy;
 80014e8:	89fa      	ldrh	r2, [r7, #14]
 80014ea:	8abb      	ldrh	r3, [r7, #20]
 80014ec:	4413      	add	r3, r2
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	81fb      	strh	r3, [r7, #14]
			TFT_DrawPoint( x1, y1, color );
 80014f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014f4:	88b9      	ldrh	r1, [r7, #4]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff77 	bl	80013ec <TFT_DrawPoint>
		while( x1 != x2 )
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	429a      	cmp	r2, r3
 8001504:	d1df      	bne.n	80014c6 <TFT_DrawLine+0xa6>
			y1			+= stepy;
			fraction	+= dx;
			TFT_DrawPoint( x1, y1, color );
		}
	}
}
 8001506:	e029      	b.n	800155c <TFT_DrawLine+0x13c>
		fraction = dx - (dy >> 1);
 8001508:	8afa      	ldrh	r2, [r7, #22]
 800150a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800150e:	105b      	asrs	r3, r3, #1
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	81fb      	strh	r3, [r7, #14]
		while( y1 != y2 )
 800151a:	e01b      	b.n	8001554 <TFT_DrawLine+0x134>
			if (fraction >= 0)
 800151c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db08      	blt.n	8001536 <TFT_DrawLine+0x116>
				x1			+= stepx;
 8001524:	8a7a      	ldrh	r2, [r7, #18]
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4413      	add	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
				fraction	-= dy;
 800152c:	89fa      	ldrh	r2, [r7, #14]
 800152e:	8abb      	ldrh	r3, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	b29b      	uxth	r3, r3
 8001534:	81fb      	strh	r3, [r7, #14]
			y1			+= stepy;
 8001536:	8a3a      	ldrh	r2, [r7, #16]
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	80bb      	strh	r3, [r7, #4]
			fraction	+= dx;
 800153e:	89fa      	ldrh	r2, [r7, #14]
 8001540:	8afb      	ldrh	r3, [r7, #22]
 8001542:	4413      	add	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
			TFT_DrawPoint( x1, y1, color );
 8001548:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800154a:	88b9      	ldrh	r1, [r7, #4]
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff4c 	bl	80013ec <TFT_DrawPoint>
		while( y1 != y2 )
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	883b      	ldrh	r3, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d1df      	bne.n	800151c <TFT_DrawLine+0xfc>
}
 800155c:	bf00      	nop
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <TFT_DrawBox>:
/**
  * @brief draws a rectangle
  * @param X1, Y1, X2, Y2, Color
  * @retval none
  */
void TFT_DrawBox(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b085      	sub	sp, #20
 8001568:	af02      	add	r7, sp, #8
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4623      	mov	r3, r4
 8001574:	80fb      	strh	r3, [r7, #6]
 8001576:	4603      	mov	r3, r0
 8001578:	80bb      	strh	r3, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
 800157e:	4613      	mov	r3, r2
 8001580:	803b      	strh	r3, [r7, #0]
	TFT_DrawLine( x1, y1, x2, y1, color);	// up
 8001582:	88bc      	ldrh	r4, [r7, #4]
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	88b9      	ldrh	r1, [r7, #4]
 8001588:	88f8      	ldrh	r0, [r7, #6]
 800158a:	8b3b      	ldrh	r3, [r7, #24]
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4623      	mov	r3, r4
 8001590:	f7ff ff46 	bl	8001420 <TFT_DrawLine>
	TFT_DrawLine( x1, y2, x2, y2, color);	// down
 8001594:	883c      	ldrh	r4, [r7, #0]
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	8839      	ldrh	r1, [r7, #0]
 800159a:	88f8      	ldrh	r0, [r7, #6]
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4623      	mov	r3, r4
 80015a2:	f7ff ff3d 	bl	8001420 <TFT_DrawLine>
	TFT_DrawLine( x2, y1, x2, y2, color);	// right
 80015a6:	883c      	ldrh	r4, [r7, #0]
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	8878      	ldrh	r0, [r7, #2]
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	f7ff ff34 	bl	8001420 <TFT_DrawLine>
	TFT_DrawLine( x1, y1, x1, y2, color);	// left
 80015b8:	883c      	ldrh	r4, [r7, #0]
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	88b9      	ldrh	r1, [r7, #4]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	8b3b      	ldrh	r3, [r7, #24]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	f7ff ff2b 	bl	8001420 <TFT_DrawLine>
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
	...

080015d4 <TFT_PrintChar>:
/**
  * @brief print char
  * @param Font, ColumnFlex, ChAscii, ColFont, ColBack, X, Y
  * @retval consumed columns
  */
uint8_t TFT_PrintChar( uint8_t Font, uint8_t ColumnFlex, uint8_t ChAscii, uint16_t ColFront, uint16_t ColBack, uint16_t x, uint16_t y ) {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	4603      	mov	r3, r0
 80015e8:	71bb      	strb	r3, [r7, #6]
 80015ea:	460b      	mov	r3, r1
 80015ec:	717b      	strb	r3, [r7, #5]
 80015ee:	4613      	mov	r3, r2
 80015f0:	807b      	strh	r3, [r7, #2]
	uint16_t PointerStart = 0;	// pointer at the beginning of a letter
 80015f2:	2300      	movs	r3, #0
 80015f4:	82fb      	strh	r3, [r7, #22]
	uint16_t PointerEnd = 0;	// pointer at the end of a letter
 80015f6:	2300      	movs	r3, #0
 80015f8:	82bb      	strh	r3, [r7, #20]
	uint8_t  Column = 0;		// the number of columns is variable
 80015fa:	2300      	movs	r3, #0
 80015fc:	74fb      	strb	r3, [r7, #19]
	uint8_t  ColumnFix = 0;		// the number of columns fixed
 80015fe:	2300      	movs	r3, #0
 8001600:	74bb      	strb	r3, [r7, #18]
	uint8_t  CounterBits;		// counts transmitted bits
	uint8_t  CounterColumn;		// counts columns
	uint8_t  Bits = 0;			// transmitted bit
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
	uint8_t  Row = 0;			// number of lines
 8001606:	2300      	movs	r3, #0
 8001608:	73bb      	strb	r3, [r7, #14]
	uint8_t  i, u;

	ChAscii -= 0x20;			// subtracts 32, the character ' ' has a value 0
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	3b20      	subs	r3, #32
 800160e:	717b      	strb	r3, [r7, #5]
	switch( Font )
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d071      	beq.n	80016fa <TFT_PrintChar+0x126>
 8001616:	2b02      	cmp	r3, #2
 8001618:	f300 80a4 	bgt.w	8001764 <TFT_PrintChar+0x190>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <TFT_PrintChar+0x52>
 8001620:	2b01      	cmp	r3, #1
 8001622:	d035      	beq.n	8001690 <TFT_PrintChar+0xbc>
 8001624:	e09e      	b.n	8001764 <TFT_PrintChar+0x190>
	{
		case 0:
		{
			Column = Tahoma11x13[( ChAscii * 4 ) + 8  ];					// the number of columns displayed
 8001626:	797b      	ldrb	r3, [r7, #5]
 8001628:	3302      	adds	r3, #2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4a9a      	ldr	r2, [pc, #616]	; (8001898 <TFT_PrintChar+0x2c4>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	74fb      	strb	r3, [r7, #19]
			ColumnFix = 11;
 8001632:	230b      	movs	r3, #11
 8001634:	74bb      	strb	r3, [r7, #18]
			Row    = Tahoma11x13[ ChAscii + 6 ];							// the number of rows
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	3306      	adds	r3, #6
 800163a:	4a97      	ldr	r2, [pc, #604]	; (8001898 <TFT_PrintChar+0x2c4>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	73bb      	strb	r3, [r7, #14]
			Row = 13;
 8001640:	230d      	movs	r3, #13
 8001642:	73bb      	strb	r3, [r7, #14]
			PointerStart =  Tahoma11x13[( ChAscii * 4 ) + 10 ] * 256;		// the places the letter starts
 8001644:	797b      	ldrb	r3, [r7, #5]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	330a      	adds	r3, #10
 800164a:	4a93      	ldr	r2, [pc, #588]	; (8001898 <TFT_PrintChar+0x2c4>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	b29b      	uxth	r3, r3
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	82fb      	strh	r3, [r7, #22]
			PointerStart += Tahoma11x13[( ChAscii * 4 ) + 9  ];
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3309      	adds	r3, #9
 800165a:	4a8f      	ldr	r2, [pc, #572]	; (8001898 <TFT_PrintChar+0x2c4>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	b29a      	uxth	r2, r3
 8001660:	8afb      	ldrh	r3, [r7, #22]
 8001662:	4413      	add	r3, r2
 8001664:	82fb      	strh	r3, [r7, #22]
			ChAscii++;
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	3301      	adds	r3, #1
 800166a:	717b      	strb	r3, [r7, #5]
			PointerEnd =  Tahoma11x13[( ChAscii * 4 ) + 10 ] * 256;			// where the letters ends
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	330a      	adds	r3, #10
 8001672:	4a89      	ldr	r2, [pc, #548]	; (8001898 <TFT_PrintChar+0x2c4>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	b29b      	uxth	r3, r3
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	82bb      	strh	r3, [r7, #20]
			PointerEnd += Tahoma11x13[( ChAscii * 4 ) + 9  ];
 800167c:	797b      	ldrb	r3, [r7, #5]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	3309      	adds	r3, #9
 8001682:	4a85      	ldr	r2, [pc, #532]	; (8001898 <TFT_PrintChar+0x2c4>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	b29a      	uxth	r2, r3
 8001688:	8abb      	ldrh	r3, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	82bb      	strh	r3, [r7, #20]
			break;
 800168e:	e069      	b.n	8001764 <TFT_PrintChar+0x190>
		}
		case 1:	// Tahoma 12
		{
			Column = Tahoma15x16[( ChAscii * 4 ) + 8  ];					// the number of columns displayed
 8001690:	797b      	ldrb	r3, [r7, #5]
 8001692:	3302      	adds	r3, #2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4a81      	ldr	r2, [pc, #516]	; (800189c <TFT_PrintChar+0x2c8>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	74fb      	strb	r3, [r7, #19]
			ColumnFix = 12;
 800169c:	230c      	movs	r3, #12
 800169e:	74bb      	strb	r3, [r7, #18]
			Row    = Tahoma15x16[ ChAscii + 6 ];							// the number of rows displayed
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	3306      	adds	r3, #6
 80016a4:	4a7d      	ldr	r2, [pc, #500]	; (800189c <TFT_PrintChar+0x2c8>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	73bb      	strb	r3, [r7, #14]
			Row = 16;
 80016aa:	2310      	movs	r3, #16
 80016ac:	73bb      	strb	r3, [r7, #14]
			PointerStart =  Tahoma15x16[( ChAscii * 4 ) + 10 ] * 256;
 80016ae:	797b      	ldrb	r3, [r7, #5]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	330a      	adds	r3, #10
 80016b4:	4a79      	ldr	r2, [pc, #484]	; (800189c <TFT_PrintChar+0x2c8>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	82fb      	strh	r3, [r7, #22]
			PointerStart += Tahoma15x16[( ChAscii * 4 ) + 9  ];
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	3309      	adds	r3, #9
 80016c4:	4a75      	ldr	r2, [pc, #468]	; (800189c <TFT_PrintChar+0x2c8>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	8afb      	ldrh	r3, [r7, #22]
 80016cc:	4413      	add	r3, r2
 80016ce:	82fb      	strh	r3, [r7, #22]
			ChAscii++;
 80016d0:	797b      	ldrb	r3, [r7, #5]
 80016d2:	3301      	adds	r3, #1
 80016d4:	717b      	strb	r3, [r7, #5]
			PointerEnd =  Tahoma15x16[( ChAscii * 4 ) + 10 ] * 256;
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	330a      	adds	r3, #10
 80016dc:	4a6f      	ldr	r2, [pc, #444]	; (800189c <TFT_PrintChar+0x2c8>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	82bb      	strh	r3, [r7, #20]
			PointerEnd += Tahoma15x16[( ChAscii * 4 ) + 9  ];
 80016e6:	797b      	ldrb	r3, [r7, #5]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3309      	adds	r3, #9
 80016ec:	4a6b      	ldr	r2, [pc, #428]	; (800189c <TFT_PrintChar+0x2c8>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	8abb      	ldrh	r3, [r7, #20]
 80016f4:	4413      	add	r3, r2
 80016f6:	82bb      	strh	r3, [r7, #20]
			break;
 80016f8:	e034      	b.n	8001764 <TFT_PrintChar+0x190>
		}
		case 2:	// Tahoma 24
		{
			Column = Tahoma30x32[( ChAscii * 4 ) + 8  ];					// the number of columns displayed
 80016fa:	797b      	ldrb	r3, [r7, #5]
 80016fc:	3302      	adds	r3, #2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	74fb      	strb	r3, [r7, #19]
			ColumnFix = 20;
 8001706:	2314      	movs	r3, #20
 8001708:	74bb      	strb	r3, [r7, #18]
			Row    = Tahoma30x32[ ChAscii + 6 ];							// the number of rows displayed
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	3306      	adds	r3, #6
 800170e:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	73bb      	strb	r3, [r7, #14]
			Row = 32;
 8001714:	2320      	movs	r3, #32
 8001716:	73bb      	strb	r3, [r7, #14]
			PointerStart =  Tahoma30x32[( ChAscii * 4 ) + 10 ] * 256;
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	330a      	adds	r3, #10
 800171e:	4a60      	ldr	r2, [pc, #384]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	b29b      	uxth	r3, r3
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	82fb      	strh	r3, [r7, #22]
			PointerStart += Tahoma30x32[( ChAscii * 4 ) + 9  ];
 8001728:	797b      	ldrb	r3, [r7, #5]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	3309      	adds	r3, #9
 800172e:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	b29a      	uxth	r2, r3
 8001734:	8afb      	ldrh	r3, [r7, #22]
 8001736:	4413      	add	r3, r2
 8001738:	82fb      	strh	r3, [r7, #22]
			ChAscii++;
 800173a:	797b      	ldrb	r3, [r7, #5]
 800173c:	3301      	adds	r3, #1
 800173e:	717b      	strb	r3, [r7, #5]
			PointerEnd =  Tahoma30x32[( ChAscii * 4 ) + 10 ] * 256;
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	330a      	adds	r3, #10
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	82bb      	strh	r3, [r7, #20]
			PointerEnd += Tahoma30x32[( ChAscii * 4 ) + 9  ];
 8001750:	797b      	ldrb	r3, [r7, #5]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3309      	adds	r3, #9
 8001756:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <TFT_PrintChar+0x2cc>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	b29a      	uxth	r2, r3
 800175c:	8abb      	ldrh	r3, [r7, #20]
 800175e:	4413      	add	r3, r2
 8001760:	82bb      	strh	r3, [r7, #20]
			break;
 8001762:	bf00      	nop
		}
	}

	PointerEnd++;
 8001764:	8abb      	ldrh	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	82bb      	strh	r3, [r7, #20]
	if ( ColumnFlex == 1)
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d114      	bne.n	800179a <TFT_PrintChar+0x1c6>
	{
		TFT_WindowSet( x, x + Column + 1, y, y + Row - 1 );					// sets a floating desktop on the display
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	b29a      	uxth	r2, r3
 8001774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001776:	4413      	add	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b299      	uxth	r1, r3
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	b29a      	uxth	r2, r3
 8001782:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29b      	uxth	r3, r3
 800178c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800178e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001790:	f7ff fd8a 	bl	80012a8 <TFT_WindowSet>
		u = 1;																// number of additional columns per letter
 8001794:	2301      	movs	r3, #1
 8001796:	733b      	strb	r3, [r7, #12]
 8001798:	e013      	b.n	80017c2 <TFT_PrintChar+0x1ee>
	}
	else
	{
		TFT_WindowSet( x, x + ColumnFix, y, y + Row - 1 );					// sets a fixed desktop on the display
 800179a:	7cbb      	ldrb	r3, [r7, #18]
 800179c:	b29a      	uxth	r2, r3
 800179e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017a0:	4413      	add	r3, r2
 80017a2:	b299      	uxth	r1, r3
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80017b4:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80017b6:	f7ff fd77 	bl	80012a8 <TFT_WindowSet>
		u = ColumnFix - Column;												// number of additional columns per letter
 80017ba:	7cba      	ldrb	r2, [r7, #18]
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	733b      	strb	r3, [r7, #12]
	}
	TFT_SendCommand( 0x002C );												// will send data to the desktop
 80017c2:	202c      	movs	r0, #44	; 0x2c
 80017c4:	f7ff fc52 	bl	800106c <TFT_SendCommand>

	CounterBits = 8;														// counter of the transmitted bits
 80017c8:	2308      	movs	r3, #8
 80017ca:	747b      	strb	r3, [r7, #17]
	CounterColumn = 0;														// counter columns
 80017cc:	2300      	movs	r3, #0
 80017ce:	743b      	strb	r3, [r7, #16]
	while( PointerEnd != PointerStart )										// end when all character data is sent
 80017d0:	e052      	b.n	8001878 <TFT_PrintChar+0x2a4>
	{
		if( CounterColumn == 0 )
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <TFT_PrintChar+0x220>
		{
			for ( i = 0; i < u; i++ )
 80017d8:	2300      	movs	r3, #0
 80017da:	737b      	strb	r3, [r7, #13]
 80017dc:	e006      	b.n	80017ec <TFT_PrintChar+0x218>
			{
				TFT_SendData( ColBack );									// column before the letter
 80017de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fc33 	bl	800104c <TFT_SendData>
			for ( i = 0; i < u; i++ )
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	3301      	adds	r3, #1
 80017ea:	737b      	strb	r3, [r7, #13]
 80017ec:	7b7a      	ldrb	r2, [r7, #13]
 80017ee:	7b3b      	ldrb	r3, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3f4      	bcc.n	80017de <TFT_PrintChar+0x20a>
			}
		}
		if( CounterBits == 8 )												// at the eighth bit, it takes another byte
 80017f4:	7c7b      	ldrb	r3, [r7, #17]
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11d      	bne.n	8001836 <TFT_PrintChar+0x262>
		{
			CounterBits = 0;												// resets the bit counter
 80017fa:	2300      	movs	r3, #0
 80017fc:	747b      	strb	r3, [r7, #17]
			switch( Font )
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d010      	beq.n	8001826 <TFT_PrintChar+0x252>
 8001804:	2b02      	cmp	r3, #2
 8001806:	dc13      	bgt.n	8001830 <TFT_PrintChar+0x25c>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <TFT_PrintChar+0x23e>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <TFT_PrintChar+0x248>
 8001810:	e00e      	b.n	8001830 <TFT_PrintChar+0x25c>
			{
				case 0:
				{
					Bits = Tahoma11x13[ PointerStart ];						// takes a new byte from the correct character set
 8001812:	8afb      	ldrh	r3, [r7, #22]
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <TFT_PrintChar+0x2c4>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	73fb      	strb	r3, [r7, #15]
					break;
 800181a:	e009      	b.n	8001830 <TFT_PrintChar+0x25c>
				}
				case 1:
				{
					Bits = Tahoma15x16[ PointerStart ];
 800181c:	8afb      	ldrh	r3, [r7, #22]
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <TFT_PrintChar+0x2c8>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	73fb      	strb	r3, [r7, #15]
					break;
 8001824:	e004      	b.n	8001830 <TFT_PrintChar+0x25c>
				}
				case 2:
				{
					Bits = Tahoma30x32[ PointerStart ];
 8001826:	8afb      	ldrh	r3, [r7, #22]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <TFT_PrintChar+0x2cc>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	73fb      	strb	r3, [r7, #15]
					break;
 800182e:	bf00      	nop
				}
			}
			PointerStart++;													// counter of bytes to send
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	3301      	adds	r3, #1
 8001834:	82fb      	strh	r3, [r7, #22]
		}
		if( Bits & 0x01 ) *TFT_DATA = ColFront;								// sends the color of the letter
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <TFT_PrintChar+0x274>
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <TFT_PrintChar+0x2d0>)
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e003      	b.n	8001850 <TFT_PrintChar+0x27c>
		else TFT_SendData( ColBack );
 8001848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fbfe 	bl	800104c <TFT_SendData>
		Bits = Bits >> 1;													// it moves to the next bit
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
		CounterColumn++;													// it moves to the next column
 8001856:	7c3b      	ldrb	r3, [r7, #16]
 8001858:	3301      	adds	r3, #1
 800185a:	743b      	strb	r3, [r7, #16]
		CounterBits++;														// bit counter
 800185c:	7c7b      	ldrb	r3, [r7, #17]
 800185e:	3301      	adds	r3, #1
 8001860:	747b      	strb	r3, [r7, #17]
		if( CounterColumn == Column )										// check if bit is last
 8001862:	7c3a      	ldrb	r2, [r7, #16]
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	429a      	cmp	r2, r3
 8001868:	d106      	bne.n	8001878 <TFT_PrintChar+0x2a4>
		{
			CounterColumn = 0;												// counter column
 800186a:	2300      	movs	r3, #0
 800186c:	743b      	strb	r3, [r7, #16]
			CounterBits = 8;												// new eight bits
 800186e:	2308      	movs	r3, #8
 8001870:	747b      	strb	r3, [r7, #17]
			*TFT_DATA = ColBack;											// column after letter
 8001872:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <TFT_PrintChar+0x2d0>)
 8001874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001876:	6013      	str	r3, [r2, #0]
	while( PointerEnd != PointerStart )										// end when all character data is sent
 8001878:	8aba      	ldrh	r2, [r7, #20]
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	429a      	cmp	r2, r3
 800187e:	d1a8      	bne.n	80017d2 <TFT_PrintChar+0x1fe>
		}
	}
	u++;
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	733b      	strb	r3, [r7, #12]
	Column += u;
 8001886:	7cfa      	ldrb	r2, [r7, #19]
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	74fb      	strb	r3, [r7, #19]
	return Column;															// returns the number of columns consumed
 800188e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	08007bc0 	.word	0x08007bc0
 800189c:	08008284 	.word	0x08008284
 80018a0:	08008bcc 	.word	0x08008bcc
 80018a4:	c0040000 	.word	0xc0040000

080018a8 <TFT_PrintString>:
/**
  * @brief print string
  * @param Font, String, ColFont, ColBack, X, Y
  * @retval
  */
void TFT_PrintString( uint8_t Font, const char *String, uint16_t ColFront, uint16_t ColBack, uint16_t x, uint16_t y ) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	4611      	mov	r1, r2
 80018b2:	461a      	mov	r2, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	460b      	mov	r3, r1
 80018ba:	81bb      	strh	r3, [r7, #12]
 80018bc:	4613      	mov	r3, r2
 80018be:	80fb      	strh	r3, [r7, #6]
	uint8_t Column1;

	while( *String )
 80018c0:	e017      	b.n	80018f2 <TFT_PrintString+0x4a>
	{
		Column1 = TFT_PrintChar( Font, 1, *String, ColFront, ColBack, x, y );
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	89b9      	ldrh	r1, [r7, #12]
 80018c8:	7bf8      	ldrb	r0, [r7, #15]
 80018ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	8c3b      	ldrh	r3, [r7, #32]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	2101      	movs	r1, #1
 80018da:	f7ff fe7b 	bl	80015d4 <TFT_PrintChar>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
		x += Column1;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	4413      	add	r3, r2
 80018ea:	843b      	strh	r3, [r7, #32]
		String++;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
	while( *String )
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1e3      	bne.n	80018c2 <TFT_PrintString+0x1a>
	}
}
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <TFT_Mypow>:

uint32_t TFT_Mypow( uint8_t m, uint8_t n ) {
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
	while( n-- ) result *= m;				// loop of multiplication
 8001918:	e004      	b.n	8001924 <TFT_Mypow+0x20>
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	1e5a      	subs	r2, r3, #1
 8001928:	71ba      	strb	r2, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f5      	bne.n	800191a <TFT_Mypow+0x16>
	return result;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <TFT_PrintNumber>:
/**
  * @brief print number
  * @param Font, Number, Length, Decimal, ColFont, ColBack, X, Y
  * @retval
  */
void TFT_PrintNumber( uint8_t Font, uint32_t Num, uint8_t NumLen, uint8_t Decimal, uint16_t ColFront, uint16_t ColBack, uint16_t x, uint16_t y ) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af04      	add	r7, sp, #16
 8001942:	6039      	str	r1, [r7, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	461a      	mov	r2, r3
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	460b      	mov	r3, r1
 800194e:	71bb      	strb	r3, [r7, #6]
 8001950:	4613      	mov	r3, r2
 8001952:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	73bb      	strb	r3, [r7, #14]

	for(t = 0; t < NumLen; t++)
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e074      	b.n	8001a48 <TFT_PrintNumber+0x10c>
	{
		temp = ( Num / TFT_Mypow( 10, NumLen - t - 1 )) % 10;
 800195e:	79ba      	ldrb	r2, [r7, #6]
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	200a      	movs	r0, #10
 800196e:	f7ff ffc9 	bl	8001904 <TFT_Mypow>
 8001972:	4602      	mov	r2, r0
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	fbb3 f1f2 	udiv	r1, r3, r2
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <TFT_PrintNumber+0x120>)
 800197c:	fba3 2301 	umull	r2, r3, r3, r1
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	1aca      	subs	r2, r1, r3
 800198c:	4613      	mov	r3, r2
 800198e:	737b      	strb	r3, [r7, #13]
		if (( enshow == 0 ) && ( t < ( NumLen - 1 )) && ( t < ( NumLen - Decimal - 1 )))
 8001990:	7bbb      	ldrb	r3, [r7, #14]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d123      	bne.n	80019de <TFT_PrintNumber+0xa2>
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	3b01      	subs	r3, #1
 800199c:	429a      	cmp	r2, r3
 800199e:	da1e      	bge.n	80019de <TFT_PrintNumber+0xa2>
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	79b9      	ldrb	r1, [r7, #6]
 80019a4:	797b      	ldrb	r3, [r7, #5]
 80019a6:	1acb      	subs	r3, r1, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	429a      	cmp	r2, r3
 80019ac:	da17      	bge.n	80019de <TFT_PrintNumber+0xa2>
		{
			if ( temp == 0 )
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d112      	bne.n	80019da <TFT_PrintNumber+0x9e>
			{
				x += TFT_PrintChar( Font, 0, ' ', ColFront, ColBack, x, y );
 80019b4:	8b3a      	ldrh	r2, [r7, #24]
 80019b6:	79f8      	ldrb	r0, [r7, #7]
 80019b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	8c3b      	ldrh	r3, [r7, #32]
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	8bbb      	ldrh	r3, [r7, #28]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	f7ff fe03 	bl	80015d4 <TFT_PrintChar>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	8c3b      	ldrh	r3, [r7, #32]
 80019d4:	4413      	add	r3, r2
 80019d6:	843b      	strh	r3, [r7, #32]
				continue;
 80019d8:	e033      	b.n	8001a42 <TFT_PrintNumber+0x106>
			}
			else enshow = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	73bb      	strb	r3, [r7, #14]
		}
		x += TFT_PrintChar( Font, 0, temp + '0', ColFront, ColBack, x, y );
 80019de:	7b7b      	ldrb	r3, [r7, #13]
 80019e0:	3330      	adds	r3, #48	; 0x30
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	8b39      	ldrh	r1, [r7, #24]
 80019e6:	79f8      	ldrb	r0, [r7, #7]
 80019e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	8c3b      	ldrh	r3, [r7, #32]
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	8bbb      	ldrh	r3, [r7, #28]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	460b      	mov	r3, r1
 80019f6:	2100      	movs	r1, #0
 80019f8:	f7ff fdec 	bl	80015d4 <TFT_PrintChar>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8c3b      	ldrh	r3, [r7, #32]
 8001a02:	4413      	add	r3, r2
 8001a04:	843b      	strh	r3, [r7, #32]
		if(( t == ( NumLen - Decimal - 1 )) && ( t < ( NumLen - 1 )))
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	79b9      	ldrb	r1, [r7, #6]
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	1acb      	subs	r3, r1, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d116      	bne.n	8001a42 <TFT_PrintNumber+0x106>
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	da11      	bge.n	8001a42 <TFT_PrintNumber+0x106>
		{
			x += TFT_PrintChar( Font, 1, ',', ColFront, ColBack, x, y );
 8001a1e:	8b3a      	ldrh	r2, [r7, #24]
 8001a20:	79f8      	ldrb	r0, [r7, #7]
 8001a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	8c3b      	ldrh	r3, [r7, #32]
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	8bbb      	ldrh	r3, [r7, #28]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	222c      	movs	r2, #44	; 0x2c
 8001a32:	2101      	movs	r1, #1
 8001a34:	f7ff fdce 	bl	80015d4 <TFT_PrintChar>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	8c3b      	ldrh	r3, [r7, #32]
 8001a3e:	4413      	add	r3, r2
 8001a40:	843b      	strh	r3, [r7, #32]
	for(t = 0; t < NumLen; t++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d386      	bcc.n	800195e <TFT_PrintNumber+0x22>
		}
	}
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	cccccccd 	.word	0xcccccccd

08001a60 <TFT_PrintNumberClock>:
/**
  * @brief print number for clock DS3231
  * @param Font, Number, ColFont, ColBack, X, Y
  * @retval
  */
void TFT_PrintNumberClock( uint8_t Font, uint8_t Num, uint16_t ColFront, uint16_t ColBack, uint16_t x, uint16_t y ) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	4604      	mov	r4, r0
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	4603      	mov	r3, r0
 8001a74:	71bb      	strb	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	807b      	strh	r3, [r7, #2]
	x += TFT_PrintChar(Font, 1, '0' + ( Num >> 4 ), ColFront, ColBack, x, y);
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3330      	adds	r3, #48	; 0x30
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	88b9      	ldrh	r1, [r7, #4]
 8001a8a:	79f8      	ldrb	r0, [r7, #7]
 8001a8c:	8bbb      	ldrh	r3, [r7, #28]
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	8b3b      	ldrh	r3, [r7, #24]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	f7ff fd9a 	bl	80015d4 <TFT_PrintChar>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	8b3b      	ldrh	r3, [r7, #24]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	833b      	strh	r3, [r7, #24]
	TFT_PrintChar(Font, 1, '0' + ( Num & 0x0F ), ColFront, ColBack, x, y);
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3330      	adds	r3, #48	; 0x30
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	88b9      	ldrh	r1, [r7, #4]
 8001ab8:	79f8      	ldrb	r0, [r7, #7]
 8001aba:	8bbb      	ldrh	r3, [r7, #28]
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	8b3b      	ldrh	r3, [r7, #24]
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	f7ff fd83 	bl	80015d4 <TFT_PrintChar>
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}
	...

08001ad8 <LL_RCC_SetFMCClockSource>:
  *         @arg @ref LL_RCC_FMC_CLKSOURCE_PLL2R
  *         @arg @ref LL_RCC_FMC_CLKSOURCE_CLKP
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetFMCClockSource(uint32_t ClkSource)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  MODIFY_REG(RCC->D1CCIPR, RCC_D1CCIPR_FMCSEL, ClkSource);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <LL_RCC_SetFMCClockSource+0x24>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f023 0203 	bic.w	r2, r3, #3
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <LL_RCC_SetFMCClockSource+0x24>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	64cb      	str	r3, [r1, #76]	; 0x4c
#else
  MODIFY_REG(RCC->CDCCIPR, RCC_CDCCIPR_FMCSEL, ClkSource);
#endif /* RCC_D1CCIPR_FMCSEL */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	58024400 	.word	0x58024400

08001b00 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <MX_FMC_Init+0xf4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b20:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <MX_FMC_Init+0xf8>)
 8001b22:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001b2a:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b38:	2210      	movs	r2, #16
 8001b3a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001b84:	230f      	movs	r3, #15
 8001b86:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001b90:	2310      	movs	r3, #16
 8001b92:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001b94:	2311      	movs	r3, #17
 8001b96:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001ba4:	f004 ffae 	bl	8006b04 <HAL_SRAM_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8001bae:	f001 fe5f 	bl	8003870 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8001bb2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001bb6:	f002 fe15 	bl	80047e4 <HAL_SetFMCMemorySwappingConfig>
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	615a      	str	r2, [r3, #20]
  Timing.AddressSetupTime = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 5;
 8001bcc:	2305      	movs	r3, #5
 8001bce:	613b      	str	r3, [r7, #16]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <MX_FMC_Init+0xf0>)
 8001bd8:	f004 ff94 	bl	8006b04 <HAL_SRAM_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8001be2:	f001 fe45 	bl	8003870 <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2400005c 	.word	0x2400005c
 8001bf4:	52004000 	.word	0x52004000
 8001bf8:	52004104 	.word	0x52004104

08001bfc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_FMC_MspInit+0x90>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d135      	bne.n	8001c84 <HAL_FMC_MspInit+0x88>
    return;
  }
  FMC_Initialized = 1;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_FMC_MspInit+0x90>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

    LL_RCC_SetFMCClockSource(LL_RCC_FMC_CLKSOURCE_HCLK);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ff5a 	bl	8001ad8 <LL_RCC_SetFMCClockSource>

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_FMC_MspInit+0x94>)
 8001c26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_FMC_MspInit+0x94>)
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c30:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_FMC_MspInit+0x94>)
 8001c36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c42:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c54:	230c      	movs	r3, #12
 8001c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <HAL_FMC_MspInit+0x98>)
 8001c5e:	f002 feb9 	bl	80049d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c62:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001c66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c74:	230c      	movs	r3, #12
 8001c76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_FMC_MspInit+0x9c>)
 8001c7e:	f002 fea9 	bl	80049d4 <HAL_GPIO_Init>
 8001c82:	e000      	b.n	8001c86 <HAL_FMC_MspInit+0x8a>
    return;
 8001c84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2400002c 	.word	0x2400002c
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58021000 	.word	0x58021000
 8001c98:	58020c00 	.word	0x58020c00

08001c9c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ca4:	f7ff ffaa 	bl	8001bfc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <MX_GPIO_Init+0x178>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TFT_LED_Pin|SPI4_NSS_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2118      	movs	r1, #24
 8001d7e:	482b      	ldr	r0, [pc, #172]	; (8001e2c <MX_GPIO_Init+0x17c>)
 8001d80:	f002 ffd8 	bl	8004d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI3_H_Pin|SPI3_W_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001d8a:	4829      	ldr	r0, [pc, #164]	; (8001e30 <MX_GPIO_Init+0x180>)
 8001d8c:	f002 ffd2 	bl	8004d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|LED4_Pin|FMC_RES_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 5192 	mov.w	r1, #4672	; 0x1240
 8001d96:	4827      	ldr	r0, [pc, #156]	; (8001e34 <MX_GPIO_Init+0x184>)
 8001d98:	f002 ffcc 	bl	8004d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|SPI3_NSS_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8001da2:	4825      	ldr	r0, [pc, #148]	; (8001e38 <MX_GPIO_Init+0x188>)
 8001da4:	f002 ffc6 	bl	8004d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TFT_LED_Pin|SPI4_NSS_Pin;
 8001da8:	2318      	movs	r3, #24
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481b      	ldr	r0, [pc, #108]	; (8001e2c <MX_GPIO_Init+0x17c>)
 8001dc0:	f002 fe08 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI3_H_Pin|SPI3_W_Pin;
 8001dc4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4814      	ldr	r0, [pc, #80]	; (8001e30 <MX_GPIO_Init+0x180>)
 8001dde:	f002 fdf9 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LED4_Pin|FMC_RES_Pin;
 8001de2:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480e      	ldr	r0, [pc, #56]	; (8001e34 <MX_GPIO_Init+0x184>)
 8001dfc:	f002 fdea 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|SPI3_NSS_Pin;
 8001e00:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_GPIO_Init+0x188>)
 8001e1a:	f002 fddb 	bl	80049d4 <HAL_GPIO_Init>

}
 8001e1e:	bf00      	nop
 8001e20:	3730      	adds	r7, #48	; 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58021000 	.word	0x58021000
 8001e30:	58020800 	.word	0x58020800
 8001e34:	58020400 	.word	0x58020400
 8001e38:	58020000 	.word	0x58020000

08001e3c <LL_RCC_SetClockSource>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t * pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <LL_RCC_SetClockSource+0x50>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0e19      	lsrs	r1, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	b2d9      	uxtb	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	5802444c 	.word	0x5802444c

08001e90 <LL_RCC_SetI2CClockSource>:
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffcf 	bl	8001e3c <LL_RCC_SetClockSource>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <MX_I2C1_Init+0x7c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x301027FF;
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <MX_I2C1_Init+0x80>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee2:	480f      	ldr	r0, [pc, #60]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ee4:	f002 ff40 	bl	8004d68 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001eee:	f001 fcbf 	bl	8003870 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001ef6:	f003 fc29 	bl	800574c <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f001 fcb6 	bl	8003870 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_I2C1_Init+0x78>)
 8001f08:	f003 fc6b 	bl	80057e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f001 fcad 	bl	8003870 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f003 fcb0 	bl	800587c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	240000a8 	.word	0x240000a8
 8001f24:	40005400 	.word	0x40005400
 8001f28:	301027ff 	.word	0x301027ff

08001f2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_I2C_MspInit+0x90>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d131      	bne.n	8001fb2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    LL_RCC_SetI2CClockSource(LL_RCC_I2C123_CLKSOURCE_PCLK1);
 8001f4e:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <HAL_I2C_MspInit+0x94>)
 8001f50:	f7ff ff9e 	bl	8001e90 <LL_RCC_SetI2CClockSource>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f84:	2304      	movs	r3, #4
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_I2C_MspInit+0x9c>)
 8001f90:	f002 fd20 	bl	80049d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_I2C_MspInit+0x98>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40005400 	.word	0x40005400
 8001fc0:	03000c08 	.word	0x03000c08
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	58020400 	.word	0x58020400

08001fcc <LL_RCC_HSE_Enable>:
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <LL_RCC_HSE_Enable+0x1c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <LL_RCC_HSE_Enable+0x1c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	58024400 	.word	0x58024400

08001fec <LL_RCC_HSE_IsReady>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <LL_RCC_HSE_IsReady+0x24>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ffc:	d101      	bne.n	8002002 <LL_RCC_HSE_IsReady+0x16>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_RCC_HSE_IsReady+0x18>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	58024400 	.word	0x58024400

08002014 <LL_RCC_SetSysClkSource>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <LL_RCC_SetSysClkSource+0x24>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	; (8002038 <LL_RCC_SetSysClkSource+0x24>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	610b      	str	r3, [r1, #16]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58024400 	.word	0x58024400

0800203c <LL_RCC_GetSysClkSource>:
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <LL_RCC_GetSysClkSource+0x18>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400

08002058 <LL_RCC_SetSysPrescaler>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <LL_RCC_SetSysPrescaler+0x24>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <LL_RCC_SetSysPrescaler+0x24>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	618b      	str	r3, [r1, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	58024400 	.word	0x58024400

08002080 <LL_RCC_SetAHBPrescaler>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 020f 	bic.w	r2, r3, #15
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	618b      	str	r3, [r1, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58024400 	.word	0x58024400

080020a8 <LL_RCC_SetAPB1Prescaler>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61cb      	str	r3, [r1, #28]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	58024400 	.word	0x58024400

080020d0 <LL_RCC_SetAPB2Prescaler>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61cb      	str	r3, [r1, #28]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	58024400 	.word	0x58024400

080020f8 <LL_RCC_SetAPB3Prescaler>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <LL_RCC_SetAPB3Prescaler+0x24>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002108:	4904      	ldr	r1, [pc, #16]	; (800211c <LL_RCC_SetAPB3Prescaler+0x24>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	618b      	str	r3, [r1, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	58024400 	.word	0x58024400

08002120 <LL_RCC_SetAPB4Prescaler>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <LL_RCC_SetAPB4Prescaler+0x24>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <LL_RCC_SetAPB4Prescaler+0x24>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	620b      	str	r3, [r1, #32]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	58024400 	.word	0x58024400

08002148 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <LL_RCC_PLL_SetSource+0x24>)
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f023 0203 	bic.w	r2, r3, #3
 8002158:	4904      	ldr	r1, [pc, #16]	; (800216c <LL_RCC_PLL_SetSource+0x24>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	58024400 	.word	0x58024400

08002170 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <LL_RCC_PLL1_Enable+0x1c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <LL_RCC_PLL1_Enable+0x1c>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400

08002190 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY))?1UL:0UL);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <LL_RCC_PLL1_IsReady+0x24>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021a0:	d101      	bne.n	80021a6 <LL_RCC_PLL1_IsReady+0x16>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_RCC_PLL1_IsReady+0x18>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	58024400 	.word	0x58024400

080021b8 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <LL_RCC_PLL1P_Enable+0x1c>)
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <LL_RCC_PLL1P_Enable+0x1c>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	58024400 	.word	0x58024400

080021d8 <LL_RCC_PLL1Q_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1Q_Enable(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <LL_RCC_PLL1Q_Enable+0x1c>)
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <LL_RCC_PLL1Q_Enable+0x1c>)
 80021e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	58024400 	.word	0x58024400

080021f8 <LL_RCC_PLL1R_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1R_Enable(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <LL_RCC_PLL1R_Enable+0x1c>)
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <LL_RCC_PLL1R_Enable+0x1c>)
 8002202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002206:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	58024400 	.word	0x58024400

08002218 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f023 0202 	bic.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4904      	ldr	r1, [pc, #16]	; (8002240 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 800222e:	4313      	orrs	r3, r2
 8002230:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400

08002244 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f023 020c 	bic.w	r2, r3, #12
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800225a:	4313      	orrs	r3, r2
 800225c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	58024400 	.word	0x58024400

08002270 <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N-1UL) << RCC_PLL1DIVR_N1_Pos);
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <LL_RCC_PLL1_SetN+0x28>)
 800227a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <LL_RCC_PLL1_SetN+0x2c>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3a01      	subs	r2, #1
 8002284:	4904      	ldr	r1, [pc, #16]	; (8002298 <LL_RCC_PLL1_SetN+0x28>)
 8002286:	4313      	orrs	r3, r2
 8002288:	630b      	str	r3, [r1, #48]	; 0x30
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	58024400 	.word	0x58024400
 800229c:	fffffe00 	.word	0xfffffe00

080022a0 <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <LL_RCC_PLL1_SetM+0x28>)
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f423 727c 	bic.w	r2, r3, #1008	; 0x3f0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4904      	ldr	r1, [pc, #16]	; (80022c8 <LL_RCC_PLL1_SetM+0x28>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400

080022cc <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P-1UL) << RCC_PLL1DIVR_P1_Pos);
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <LL_RCC_PLL1_SetP+0x28>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	4904      	ldr	r1, [pc, #16]	; (80022f4 <LL_RCC_PLL1_SetP+0x28>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	58024400 	.word	0x58024400

080022f8 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q-1UL) << RCC_PLL1DIVR_Q1_Pos);
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <LL_RCC_PLL1_SetQ+0x28>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4904      	ldr	r1, [pc, #16]	; (8002320 <LL_RCC_PLL1_SetQ+0x28>)
 8002310:	4313      	orrs	r3, r2
 8002312:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58024400 	.word	0x58024400

08002324 <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R-1UL) << RCC_PLL1DIVR_R1_Pos);
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <LL_RCC_PLL1_SetR+0x28>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4904      	ldr	r1, [pc, #16]	; (800234c <LL_RCC_PLL1_SetR+0x28>)
 800233c:	4313      	orrs	r3, r2
 800233e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	58024400 	.word	0x58024400

08002350 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <LL_FLASH_SetLatency+0x24>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 020f 	bic.w	r2, r3, #15
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <LL_FLASH_SetLatency+0x24>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	52002000 	.word	0x52002000

08002378 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <LL_FLASH_GetLatency+0x18>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	52002000 	.word	0x52002000

08002394 <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_LDO_SUPPLY
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <LL_PWR_ConfigSupply+0x24>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f023 0207 	bic.w	r2, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <LL_PWR_ConfigSupply+0x24>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	58024800 	.word	0x58024800

080023bc <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023cc:	4904      	ldr	r1, [pc, #16]	; (80023e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	58024800 	.word	0x58024800

080023e4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <LL_TIM_IsEnabledCounter+0x18>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <LL_TIM_IsEnabledCounter+0x1a>
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d028      	beq.n	800250a <LL_TIM_OC_DisableFast+0x62>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d023      	beq.n	8002506 <LL_TIM_OC_DisableFast+0x5e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d01e      	beq.n	8002502 <LL_TIM_OC_DisableFast+0x5a>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d019      	beq.n	80024fe <LL_TIM_OC_DisableFast+0x56>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	d013      	beq.n	80024fa <LL_TIM_OC_DisableFast+0x52>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d00d      	beq.n	80024f6 <LL_TIM_OC_DisableFast+0x4e>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e0:	d007      	beq.n	80024f2 <LL_TIM_OC_DisableFast+0x4a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d101      	bne.n	80024ee <LL_TIM_OC_DisableFast+0x46>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e00e      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 80024ee:	2308      	movs	r3, #8
 80024f0:	e00c      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 80024f2:	2306      	movs	r3, #6
 80024f4:	e00a      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e008      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 80024fa:	2304      	movs	r3, #4
 80024fc:	e006      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 80024fe:	2303      	movs	r3, #3
 8002500:	e004      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 8002502:	2302      	movs	r3, #2
 8002504:	e002      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_TIM_OC_DisableFast+0x64>
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3318      	adds	r3, #24
 8002512:	4619      	mov	r1, r3
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <LL_TIM_OC_DisableFast+0x9c>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	440b      	add	r3, r1
 800251c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	4908      	ldr	r1, [pc, #32]	; (8002548 <LL_TIM_OC_DisableFast+0xa0>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	4619      	mov	r1, r3
 800252a:	2304      	movs	r3, #4
 800252c:	408b      	lsls	r3, r1
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	601a      	str	r2, [r3, #0]

}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	0800a9b4 	.word	0x0800a9b4
 8002548:	0800a9c0 	.word	0x0800a9c0

0800254c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d028      	beq.n	80025ae <LL_TIM_OC_EnablePreload+0x62>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d023      	beq.n	80025aa <LL_TIM_OC_EnablePreload+0x5e>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b10      	cmp	r3, #16
 8002566:	d01e      	beq.n	80025a6 <LL_TIM_OC_EnablePreload+0x5a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d019      	beq.n	80025a2 <LL_TIM_OC_EnablePreload+0x56>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002574:	d013      	beq.n	800259e <LL_TIM_OC_EnablePreload+0x52>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	d00d      	beq.n	800259a <LL_TIM_OC_EnablePreload+0x4e>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002584:	d007      	beq.n	8002596 <LL_TIM_OC_EnablePreload+0x4a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d101      	bne.n	8002592 <LL_TIM_OC_EnablePreload+0x46>
 800258e:	2307      	movs	r3, #7
 8002590:	e00e      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 8002592:	2308      	movs	r3, #8
 8002594:	e00c      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 8002596:	2306      	movs	r3, #6
 8002598:	e00a      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 800259a:	2305      	movs	r3, #5
 800259c:	e008      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 800259e:	2304      	movs	r3, #4
 80025a0:	e006      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_TIM_OC_EnablePreload+0x64>
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3318      	adds	r3, #24
 80025b6:	4619      	mov	r1, r3
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <LL_TIM_OC_EnablePreload+0x98>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	440b      	add	r3, r1
 80025c0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <LL_TIM_OC_EnablePreload+0x9c>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	2308      	movs	r3, #8
 80025d0:	408b      	lsls	r3, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	0800a9b4 	.word	0x0800a9b4
 80025e8:	0800a9c0 	.word	0x0800a9c0

080025ec <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  TouchCounter = 0;
 8002676:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <main+0x1f4>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267c:	f001 fffc 	bl	8004678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002680:	f000 fa38 	bl	8002af4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config( 480000 );
 8002684:	4878      	ldr	r0, [pc, #480]	; (8002868 <main+0x1f8>)
 8002686:	f002 f998 	bl	80049ba <HAL_SYSTICK_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800268a:	f7ff fb11 	bl	8001cb0 <MX_GPIO_Init>
  MX_FMC_Init();
 800268e:	f7ff fa37 	bl	8001b00 <MX_FMC_Init>
  MX_SPI4_Init();
 8002692:	f001 faa5 	bl	8003be0 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002696:	f001 ff4b 	bl	8004530 <MX_TIM2_Init>
  MX_SPI1_Init();
 800269a:	f001 f981 	bl	80039a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800269e:	f001 f9f1 	bl	8003a84 <MX_SPI2_Init>
  MX_SPI3_Init();
 80026a2:	f001 fa47 	bl	8003b34 <MX_SPI3_Init>
  MX_I2C1_Init();
 80026a6:	f7ff fbff 	bl	8001ea8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LL_SPI_Enable(SPI4);
 80026aa:	4870      	ldr	r0, [pc, #448]	; (800286c <main+0x1fc>)
 80026ac:	f7ff fe9a 	bl	80023e4 <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI4);		// for touch pad
 80026b0:	486e      	ldr	r0, [pc, #440]	; (800286c <main+0x1fc>)
 80026b2:	f7ff fea7 	bl	8002404 <LL_SPI_StartMasterTransfer>

  LL_SPI_Enable(SPI1);
 80026b6:	486e      	ldr	r0, [pc, #440]	; (8002870 <main+0x200>)
 80026b8:	f7ff fe94 	bl	80023e4 <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI1);		// for connector
 80026bc:	486c      	ldr	r0, [pc, #432]	; (8002870 <main+0x200>)
 80026be:	f7ff fea1 	bl	8002404 <LL_SPI_StartMasterTransfer>

  TFT_Init();
 80026c2:	f7fe fcf7 	bl	80010b4 <TFT_Init>
  TFT_WindowFull( ColRed );
 80026c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026ca:	f7fe fe2b 	bl	8001324 <TFT_WindowFull>
  HAL_Delay( 500 );
 80026ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d2:	f002 f863 	bl	800479c <HAL_Delay>
  TFT_WindowFull( ColGreen );
 80026d6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80026da:	f7fe fe23 	bl	8001324 <TFT_WindowFull>
  HAL_Delay( 500 );
 80026de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026e2:	f002 f85b 	bl	800479c <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ec:	4861      	ldr	r0, [pc, #388]	; (8002874 <main+0x204>)
 80026ee:	f002 fb21 	bl	8004d34 <HAL_GPIO_WritePin>
  TFT_WindowFull( ColBlue );
 80026f2:	201f      	movs	r0, #31
 80026f4:	f7fe fe16 	bl	8001324 <TFT_WindowFull>
  Beep( 2000, 20);
 80026f8:	2114      	movs	r1, #20
 80026fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026fe:	f001 f803 	bl	8003708 <Beep>
  HAL_Delay( 500 );
 8002702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002706:	f002 f849 	bl	800479c <HAL_Delay>
  TFT_WindowFull( ColYellow );
 800270a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800270e:	f7fe fe09 	bl	8001324 <TFT_WindowFull>
  Beep( 1500, 20);
 8002712:	2114      	movs	r1, #20
 8002714:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002718:	f000 fff6 	bl	8003708 <Beep>
  HAL_Delay( 500 );
 800271c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002720:	f002 f83c 	bl	800479c <HAL_Delay>
  TFT_WindowFull( ColBlack );
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe fdfd 	bl	8001324 <TFT_WindowFull>
  Beep( 1000, 20);
 800272a:	2114      	movs	r1, #20
 800272c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002730:	f000 ffea 	bl	8003708 <Beep>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	484f      	ldr	r0, [pc, #316]	; (8002878 <main+0x208>)
 800273a:	f002 fafb 	bl	8004d34 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TFT_WindowFull( ColBlack );
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fdf0 	bl	8001324 <TFT_WindowFull>
	  TFT_ButtonString("MAX31855", ColWhite, ColBlue, ColBlack,   0, 400);
 8002744:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	221f      	movs	r2, #31
 8002752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002756:	4849      	ldr	r0, [pc, #292]	; (800287c <main+0x20c>)
 8002758:	f7fe fbaa 	bl	8000eb0 <TFT_ButtonString>
	  TFT_ButtonString("M95040", ColWhite, ColBlue, ColBlack, 160, 400);
 800275c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	23a0      	movs	r3, #160	; 0xa0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	221f      	movs	r2, #31
 800276a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800276e:	4844      	ldr	r0, [pc, #272]	; (8002880 <main+0x210>)
 8002770:	f7fe fb9e 	bl	8000eb0 <TFT_ButtonString>
	  TFT_ButtonString("Test 3", ColWhite, ColBlue, ColBlack, 320, 400);
 8002774:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	221f      	movs	r2, #31
 8002784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002788:	483e      	ldr	r0, [pc, #248]	; (8002884 <main+0x214>)
 800278a:	f7fe fb91 	bl	8000eb0 <TFT_ButtonString>
	  TFT_ButtonString("Test 4", ColWhite, ColBlue, ColBlack, 480, 400);
 800278e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2300      	movs	r3, #0
 800279c:	221f      	movs	r2, #31
 800279e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027a2:	4839      	ldr	r0, [pc, #228]	; (8002888 <main+0x218>)
 80027a4:	f7fe fb84 	bl	8000eb0 <TFT_ButtonString>
	  TFT_ButtonString("Test 5", ColWhite, ColBlue, ColBlack, 640, 400);
 80027a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	221f      	movs	r2, #31
 80027b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027bc:	4833      	ldr	r0, [pc, #204]	; (800288c <main+0x21c>)
 80027be:	f7fe fb77 	bl	8000eb0 <TFT_ButtonString>
	  TFT_ButtonClock(1, ColYellow, ColBlue, ColNavy, 4, 4);
 80027c2:	2304      	movs	r3, #4
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2304      	movs	r3, #4
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	230f      	movs	r3, #15
 80027cc:	221f      	movs	r2, #31
 80027ce:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7fe f86c 	bl	80008b0 <TFT_ButtonClock>

	  while (1) {
		  if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 80027d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fb25 	bl	8000e2c <TFT_ButtonStringCheck>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10e      	bne.n	8002806 <main+0x196>
				BufClock[0] = 0;
 80027e8:	4b29      	ldr	r3, [pc, #164]	; (8002890 <main+0x220>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
				BufClock[1] = 0;
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <main+0x220>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	705a      	strb	r2, [r3, #1]
				BufClock[2] = 0;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <main+0x220>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	709a      	strb	r2, [r3, #2]
				BufClock[4] = 0;
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <main+0x220>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	711a      	strb	r2, [r3, #4]
			  MENU_Test1();
 8002800:	f000 f9e6 	bl	8002bd0 <MENU_Test1>
			  break;
 8002804:	e162      	b.n	8002acc <main+0x45c>
		  }
		  if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 8002806:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800280a:	20a0      	movs	r0, #160	; 0xa0
 800280c:	f7fe fb0e 	bl	8000e2c <TFT_ButtonStringCheck>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <main+0x1ac>
			  MENU_Test2();
 8002816:	f000 fb6f 	bl	8002ef8 <MENU_Test2>
			  break;
 800281a:	e157      	b.n	8002acc <main+0x45c>
		  }
		  if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 800281c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002820:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002824:	f7fe fb02 	bl	8000e2c <TFT_ButtonStringCheck>
 8002828:	4603      	mov	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <main+0x1c4>
			  MENU_Test3();
 800282e:	f000 fdcb 	bl	80033c8 <MENU_Test3>
			  break;
 8002832:	e14b      	b.n	8002acc <main+0x45c>
		  }
		  if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 8002834:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002838:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800283c:	f7fe faf6 	bl	8000e2c <TFT_ButtonStringCheck>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <main+0x1dc>
			  MENU_Test4();
 8002846:	f000 fe4b 	bl	80034e0 <MENU_Test4>
			  break;
 800284a:	e13f      	b.n	8002acc <main+0x45c>
		  }
		  if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) {
 800284c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002850:	f44f 7020 	mov.w	r0, #640	; 0x280
 8002854:	f7fe faea 	bl	8000e2c <TFT_ButtonStringCheck>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d11a      	bne.n	8002894 <main+0x224>
			  MENU_Test5();
 800285e:	f000 fecb 	bl	80035f8 <MENU_Test5>
			  break;
 8002862:	e133      	b.n	8002acc <main+0x45c>
 8002864:	24000032 	.word	0x24000032
 8002868:	00075300 	.word	0x00075300
 800286c:	40013400 	.word	0x40013400
 8002870:	40013000 	.word	0x40013000
 8002874:	58020000 	.word	0x58020000
 8002878:	58020400 	.word	0x58020400
 800287c:	08007afc 	.word	0x08007afc
 8002880:	08007b08 	.word	0x08007b08
 8002884:	08007b10 	.word	0x08007b10
 8002888:	08007b18 	.word	0x08007b18
 800288c:	08007b20 	.word	0x08007b20
 8002890:	24000188 	.word	0x24000188
		  }

		  TFT_ButtonClock(0, ColYellow, ColBlue, ColNavy, 4, 4);				// napise kolik je hodin
 8002894:	2304      	movs	r3, #4
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	2304      	movs	r3, #4
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	230f      	movs	r3, #15
 800289e:	221f      	movs	r2, #31
 80028a0:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f803 	bl	80008b0 <TFT_ButtonClock>
		  HAL_Delay(100);
 80028aa:	2064      	movs	r0, #100	; 0x64
 80028ac:	f001 ff76 	bl	800479c <HAL_Delay>
		  if (TFT_ButtonClockCheck(4, 4) == 1) {
 80028b0:	2104      	movs	r1, #4
 80028b2:	2004      	movs	r0, #4
 80028b4:	f7fd ffba 	bl	800082c <TFT_ButtonClockCheck>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	f040 8102 	bne.w	8002ac4 <main+0x454>
			  TFT_KeypadNumber("Year", ColCyan, ColRed, ColDarkCyan, 184, 4);
 80028c0:	2304      	movs	r3, #4
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	23b8      	movs	r3, #184	; 0xb8
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80028cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80028d4:	487e      	ldr	r0, [pc, #504]	; (8002ad0 <main+0x460>)
 80028d6:	f7fe f9b1 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[7] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 80028da:	2304      	movs	r3, #4
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	23b8      	movs	r3, #184	; 0xb8
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80028e6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80028ea:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80028ee:	2002      	movs	r0, #2
 80028f0:	f7fe f8b8 	bl	8000a64 <TFT_KeypadNumberCheck>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd ff71 	bl	80007e0 <ClockNumer>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <main+0x464>)
 8002904:	71da      	strb	r2, [r3, #7]

			  TFT_KeypadNumber("Month", ColCyan, ColRed, ColDarkCyan, 184, 4);
 8002906:	2304      	movs	r3, #4
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	23b8      	movs	r3, #184	; 0xb8
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002912:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002916:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800291a:	486f      	ldr	r0, [pc, #444]	; (8002ad8 <main+0x468>)
 800291c:	f7fe f98e 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[6] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 8002920:	2304      	movs	r3, #4
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	23b8      	movs	r3, #184	; 0xb8
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800292c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002930:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002934:	2002      	movs	r0, #2
 8002936:	f7fe f895 	bl	8000a64 <TFT_KeypadNumberCheck>
 800293a:	4603      	mov	r3, r0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd ff4e 	bl	80007e0 <ClockNumer>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <main+0x464>)
 800294a:	719a      	strb	r2, [r3, #6]

			  TFT_KeypadNumber("Date", ColCyan, ColRed, ColDarkCyan, 184, 4);
 800294c:	2304      	movs	r3, #4
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	23b8      	movs	r3, #184	; 0xb8
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002958:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800295c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002960:	485e      	ldr	r0, [pc, #376]	; (8002adc <main+0x46c>)
 8002962:	f7fe f96b 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[5] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 8002966:	2304      	movs	r3, #4
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	23b8      	movs	r3, #184	; 0xb8
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002972:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002976:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800297a:	2002      	movs	r0, #2
 800297c:	f7fe f872 	bl	8000a64 <TFT_KeypadNumberCheck>
 8002980:	4603      	mov	r3, r0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd ff2b 	bl	80007e0 <ClockNumer>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <main+0x464>)
 8002990:	715a      	strb	r2, [r3, #5]

			  TFT_KeypadNumber("Day", ColCyan, ColRed, ColDarkCyan, 184, 4);
 8002992:	2304      	movs	r3, #4
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	23b8      	movs	r3, #184	; 0xb8
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800299e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029a2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80029a6:	484e      	ldr	r0, [pc, #312]	; (8002ae0 <main+0x470>)
 80029a8:	f7fe f948 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[4] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 80029ac:	2304      	movs	r3, #4
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	23b8      	movs	r3, #184	; 0xb8
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80029b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7fe f84f 	bl	8000a64 <TFT_KeypadNumberCheck>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd ff08 	bl	80007e0 <ClockNumer>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <main+0x464>)
 80029d6:	711a      	strb	r2, [r3, #4]

			  TFT_KeypadNumber("Hours", ColCyan, ColRed, ColDarkCyan, 184, 4);
 80029d8:	2304      	movs	r3, #4
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	23b8      	movs	r3, #184	; 0xb8
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80029e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80029ec:	483d      	ldr	r0, [pc, #244]	; (8002ae4 <main+0x474>)
 80029ee:	f7fe f925 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[3] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 80029f2:	2304      	movs	r3, #4
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	23b8      	movs	r3, #184	; 0xb8
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80029fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a02:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7fe f82c 	bl	8000a64 <TFT_KeypadNumberCheck>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fee5 	bl	80007e0 <ClockNumer>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <main+0x464>)
 8002a1c:	70da      	strb	r2, [r3, #3]

			  TFT_KeypadNumber("Minutes", ColCyan, ColRed, ColDarkCyan, 184, 4);
 8002a1e:	2304      	movs	r3, #4
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	23b8      	movs	r3, #184	; 0xb8
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a2a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002a32:	482d      	ldr	r0, [pc, #180]	; (8002ae8 <main+0x478>)
 8002a34:	f7fe f902 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[2] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 8002a38:	2304      	movs	r3, #4
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	23b8      	movs	r3, #184	; 0xb8
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a44:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fe f809 	bl	8000a64 <TFT_KeypadNumberCheck>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fec2 	bl	80007e0 <ClockNumer>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <main+0x464>)
 8002a62:	709a      	strb	r2, [r3, #2]

			  TFT_KeypadNumber("Seconds", ColCyan, ColRed, ColDarkCyan, 184, 4);
 8002a64:	2304      	movs	r3, #4
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	23b8      	movs	r3, #184	; 0xb8
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002a78:	481c      	ldr	r0, [pc, #112]	; (8002aec <main+0x47c>)
 8002a7a:	f7fe f8df 	bl	8000c3c <TFT_KeypadNumber>
			  BufClock[1] = ClockNumer( TFT_KeypadNumberCheck(2, ColCyan, ColRed, ColDarkCyan, 184, 4));
 8002a7e:	2304      	movs	r3, #4
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	23b8      	movs	r3, #184	; 0xb8
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a8a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a8e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002a92:	2002      	movs	r0, #2
 8002a94:	f7fd ffe6 	bl	8000a64 <TFT_KeypadNumberCheck>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fe9f 	bl	80007e0 <ClockNumer>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <main+0x464>)
 8002aa8:	705a      	strb	r2, [r3, #1]

			  BufClock[0] = 0x00;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <main+0x464>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c1, 0xD0, BufClock, 7, HAL_MAX_DELAY);
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <main+0x464>)
 8002aba:	21d0      	movs	r1, #208	; 0xd0
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <main+0x480>)
 8002abe:	f002 f9e3 	bl	8004e88 <HAL_I2C_Master_Transmit>
			  break;
 8002ac2:	e003      	b.n	8002acc <main+0x45c>
		  }

	//	  Thermo = LL_SPI_ReceiveData32(SPI2);
		  HAL_Delay(100);
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	f001 fe69 	bl	800479c <HAL_Delay>
		  if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 8002aca:	e685      	b.n	80027d8 <main+0x168>
	  TFT_WindowFull( ColBlack );
 8002acc:	e637      	b.n	800273e <main+0xce>
 8002ace:	bf00      	nop
 8002ad0:	08007b28 	.word	0x08007b28
 8002ad4:	24000188 	.word	0x24000188
 8002ad8:	08007b30 	.word	0x08007b30
 8002adc:	08007b38 	.word	0x08007b38
 8002ae0:	08007b40 	.word	0x08007b40
 8002ae4:	08007b44 	.word	0x08007b44
 8002ae8:	08007b4c 	.word	0x08007b4c
 8002aec:	08007b54 	.word	0x08007b54
 8002af0:	240000a8 	.word	0x240000a8

08002af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002af8:	2004      	movs	r0, #4
 8002afa:	f7ff fc29 	bl	8002350 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8002afe:	bf00      	nop
 8002b00:	f7ff fc3a 	bl	8002378 <LL_FLASH_GetLatency>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d1fa      	bne.n	8002b00 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7ff fc42 	bl	8002394 <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE0);
 8002b10:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8002b14:	f7ff fc52 	bl	80023bc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8002b18:	f7ff fa58 	bl	8001fcc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002b1c:	bf00      	nop
 8002b1e:	f7ff fa65 	bl	8001fec <LL_RCC_HSE_IsReady>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d1fa      	bne.n	8002b1e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSE);
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff fb0d 	bl	8002148 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 8002b2e:	f7ff fb43 	bl	80021b8 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1Q_Enable();
 8002b32:	f7ff fb51 	bl	80021d8 <LL_RCC_PLL1Q_Enable>
  LL_RCC_PLL1R_Enable();
 8002b36:	f7ff fb5f 	bl	80021f8 <LL_RCC_PLL1R_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f7ff fb82 	bl	8002244 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff fb69 	bl	8002218 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff fbaa 	bl	80022a0 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(120);
 8002b4c:	2078      	movs	r0, #120	; 0x78
 8002b4e:	f7ff fb8f 	bl	8002270 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8002b52:	2002      	movs	r0, #2
 8002b54:	f7ff fbba 	bl	80022cc <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(5);
 8002b58:	2005      	movs	r0, #5
 8002b5a:	f7ff fbcd 	bl	80022f8 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7ff fbe0 	bl	8002324 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 8002b64:	f7ff fb04 	bl	8002170 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 8002b68:	bf00      	nop
 8002b6a:	f7ff fb11 	bl	8002190 <LL_RCC_PLL1_IsReady>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d1fa      	bne.n	8002b6a <SystemClock_Config+0x76>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8002b74:	2008      	movs	r0, #8
 8002b76:	f7ff fa83 	bl	8002080 <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	f7ff fa4a 	bl	8002014 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8002b80:	bf00      	nop
 8002b82:	f7ff fa5b 	bl	800203c <LL_RCC_GetSysClkSource>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b18      	cmp	r3, #24
 8002b8a:	d1fa      	bne.n	8002b82 <SystemClock_Config+0x8e>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7ff fa63 	bl	8002058 <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8002b92:	2008      	movs	r0, #8
 8002b94:	f7ff fa74 	bl	8002080 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002b98:	2040      	movs	r0, #64	; 0x40
 8002b9a:	f7ff fa85 	bl	80020a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002b9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ba2:	f7ff fa95 	bl	80020d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
 8002ba6:	2040      	movs	r0, #64	; 0x40
 8002ba8:	f7ff faa6 	bl	80020f8 <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
 8002bac:	2040      	movs	r0, #64	; 0x40
 8002bae:	f7ff fab7 	bl	8002120 <LL_RCC_SetAPB4Prescaler>
  LL_SetSystemCoreClock(480000000);
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <SystemClock_Config+0xd8>)
 8002bb4:	f004 ff56 	bl	8007a64 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002bb8:	200f      	movs	r0, #15
 8002bba:	f001 fd99 	bl	80046f0 <HAL_InitTick>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002bc4:	f000 fe54 	bl	8003870 <Error_Handler>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	1c9c3800 	.word	0x1c9c3800

08002bd0 <MENU_Test1>:

/* USER CODE BEGIN 4 */


void MENU_Test1( void ) {						// MAX31855 temperature sensor reading
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af04      	add	r7, sp, #16
	TFT_WindowFull( ColDarkGreen );
 8002bd6:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8002bda:	f7fe fba3 	bl	8001324 <TFT_WindowFull>
	TFT_ButtonString("M95040", ColWhite, ColBlue, ColBlack,   0, 400);
 8002bde:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	221f      	movs	r2, #31
 8002bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bf0:	48b3      	ldr	r0, [pc, #716]	; (8002ec0 <MENU_Test1+0x2f0>)
 8002bf2:	f7fe f95d 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 3", ColWhite, ColBlue, ColBlack, 160, 400);
 8002bf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	23a0      	movs	r3, #160	; 0xa0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	221f      	movs	r2, #31
 8002c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c08:	48ae      	ldr	r0, [pc, #696]	; (8002ec4 <MENU_Test1+0x2f4>)
 8002c0a:	f7fe f951 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 4", ColWhite, ColBlue, ColBlack, 320, 400);
 8002c0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c22:	48a9      	ldr	r0, [pc, #676]	; (8002ec8 <MENU_Test1+0x2f8>)
 8002c24:	f7fe f944 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 5", ColWhite, ColBlue, ColBlack, 480, 400);
 8002c28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	221f      	movs	r2, #31
 8002c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c3c:	48a3      	ldr	r0, [pc, #652]	; (8002ecc <MENU_Test1+0x2fc>)
 8002c3e:	f7fe f937 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("EXIT", ColWhite, ColBlue, ColBlack, 640, 400);
 8002c42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	221f      	movs	r2, #31
 8002c52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c56:	489e      	ldr	r0, [pc, #632]	; (8002ed0 <MENU_Test1+0x300>)
 8002c58:	f7fe f92a 	bl	8000eb0 <TFT_ButtonString>
	while(1) {

		HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c62:	489c      	ldr	r0, [pc, #624]	; (8002ed4 <MENU_Test1+0x304>)
 8002c64:	f002 f866 	bl	8004d34 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi2, Thermo, 4, 1000);
 8002c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	499a      	ldr	r1, [pc, #616]	; (8002ed8 <MENU_Test1+0x308>)
 8002c70:	489a      	ldr	r0, [pc, #616]	; (8002edc <MENU_Test1+0x30c>)
 8002c72:	f003 fa99 	bl	80061a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002c76:	2201      	movs	r2, #1
 8002c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c7c:	4895      	ldr	r0, [pc, #596]	; (8002ed4 <MENU_Test1+0x304>)
 8002c7e:	f002 f859 	bl	8004d34 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002c82:	200a      	movs	r0, #10
 8002c84:	f001 fd8a 	bl	800479c <HAL_Delay>

		TFT_PrintString(0, "MAX31855 data array", ColRed, ColDarkGreen, 0, 10);
 8002c88:	230a      	movs	r3, #10
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002c94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c98:	4991      	ldr	r1, [pc, #580]	; (8002ee0 <MENU_Test1+0x310>)
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fe04 	bl	80018a8 <TFT_PrintString>
		TFT_PrintNumber(0, Thermo[0], 3, 0, ColYellow, ColDarkGreen, 200, 10);
 8002ca0:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <MENU_Test1+0x308>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	9303      	str	r3, [sp, #12]
 8002caa:	23c8      	movs	r3, #200	; 0xc8
 8002cac:	9302      	str	r3, [sp, #8]
 8002cae:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fe fe3c 	bl	800193c <TFT_PrintNumber>
		TFT_PrintNumber(0, Thermo[1], 3, 0, ColYellow, ColDarkGreen, 280, 10);
 8002cc4:	4b84      	ldr	r3, [pc, #528]	; (8002ed8 <MENU_Test1+0x308>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	230a      	movs	r3, #10
 8002ccc:	9303      	str	r3, [sp, #12]
 8002cce:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fe fe29 	bl	800193c <TFT_PrintNumber>
		TFT_PrintNumber(0, Thermo[2], 3, 0, ColYellow, ColDarkGreen, 350, 10);
 8002cea:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <MENU_Test1+0x308>)
 8002cec:	789b      	ldrb	r3, [r3, #2]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	9303      	str	r3, [sp, #12]
 8002cf4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002cf8:	9302      	str	r3, [sp, #8]
 8002cfa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	2203      	movs	r2, #3
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fe16 	bl	800193c <TFT_PrintNumber>
		TFT_PrintNumber(0, Thermo[3], 3, 0, ColYellow, ColDarkGreen, 420, 10);
 8002d10:	4b71      	ldr	r3, [pc, #452]	; (8002ed8 <MENU_Test1+0x308>)
 8002d12:	78db      	ldrb	r3, [r3, #3]
 8002d14:	4619      	mov	r1, r3
 8002d16:	230a      	movs	r3, #10
 8002d18:	9303      	str	r3, [sp, #12]
 8002d1a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2203      	movs	r2, #3
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fe fe03 	bl	800193c <TFT_PrintNumber>

		ThermoIn = (Thermo[3] >> 4) | (Thermo[2] << 4);
 8002d36:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <MENU_Test1+0x308>)
 8002d38:	78db      	ldrb	r3, [r3, #3]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <MENU_Test1+0x308>)
 8002d42:	789b      	ldrb	r3, [r3, #2]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4313      	orrs	r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <MENU_Test1+0x314>)
 8002d4c:	601a      	str	r2, [r3, #0]
		ThermoIn = ThermoIn * 625;
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <MENU_Test1+0x314>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f240 2271 	movw	r2, #625	; 0x271
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	4a62      	ldr	r2, [pc, #392]	; (8002ee4 <MENU_Test1+0x314>)
 8002d5c:	6013      	str	r3, [r2, #0]

		ThermoOut = (Thermo[1] >> 2) | (Thermo[0] << 6);
 8002d5e:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <MENU_Test1+0x308>)
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <MENU_Test1+0x308>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <MENU_Test1+0x318>)
 8002d74:	601a      	str	r2, [r3, #0]
		ThermoOut &= 0x03FFF;
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <MENU_Test1+0x318>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <MENU_Test1+0x318>)
 8002d80:	6013      	str	r3, [r2, #0]
		ThermoOut = ThermoOut * 25;
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <MENU_Test1+0x318>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <MENU_Test1+0x318>)
 8002d92:	6013      	str	r3, [r2, #0]

		TFT_PrintString(2, "Error", ColYellow, ColDarkGreen, 10, 60);
 8002d94:	233c      	movs	r3, #60	; 0x3c
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	230a      	movs	r3, #10
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002da0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002da4:	4951      	ldr	r1, [pc, #324]	; (8002eec <MENU_Test1+0x31c>)
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7fe fd7e 	bl	80018a8 <TFT_PrintString>
		TFT_PrintNumber(2, (Thermo[3] & 0x0F) , 2, 0, ColYellow, ColDarkGreen, 200, 60);
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <MENU_Test1+0x308>)
 8002dae:	78db      	ldrb	r3, [r3, #3]
 8002db0:	f003 010f 	and.w	r1, r3, #15
 8002db4:	233c      	movs	r3, #60	; 0x3c
 8002db6:	9303      	str	r3, [sp, #12]
 8002db8:	23c8      	movs	r3, #200	; 0xc8
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2202      	movs	r2, #2
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f7fe fdb5 	bl	800193c <TFT_PrintNumber>
		TFT_PrintString(2, "ThermoIn", ColYellow, ColDarkGreen, 10, 120);
 8002dd2:	2378      	movs	r3, #120	; 0x78
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002dde:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002de2:	4943      	ldr	r1, [pc, #268]	; (8002ef0 <MENU_Test1+0x320>)
 8002de4:	2002      	movs	r0, #2
 8002de6:	f7fe fd5f 	bl	80018a8 <TFT_PrintString>
		TFT_PrintNumber(2, ThermoIn, 10, 4, ColYellow, ColDarkGreen, 200, 120);
 8002dea:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <MENU_Test1+0x314>)
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	2378      	movs	r3, #120	; 0x78
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	23c8      	movs	r3, #200	; 0xc8
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2304      	movs	r3, #4
 8002e04:	220a      	movs	r2, #10
 8002e06:	2002      	movs	r0, #2
 8002e08:	f7fe fd98 	bl	800193c <TFT_PrintNumber>
		TFT_PrintString(2, "ThermoOut", ColYellow, ColDarkGreen, 10, 180);
 8002e0c:	23b4      	movs	r3, #180	; 0xb4
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	230a      	movs	r3, #10
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002e18:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e1c:	4935      	ldr	r1, [pc, #212]	; (8002ef4 <MENU_Test1+0x324>)
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f7fe fd42 	bl	80018a8 <TFT_PrintString>
		TFT_PrintNumber(2, ThermoOut, 10, 2, ColYellow, ColDarkGreen, 200, 180);
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <MENU_Test1+0x318>)
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	23b4      	movs	r3, #180	; 0xb4
 8002e2a:	9303      	str	r3, [sp, #12]
 8002e2c:	23c8      	movs	r3, #200	; 0xc8
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	220a      	movs	r2, #10
 8002e40:	2002      	movs	r0, #2
 8002e42:	f7fe fd7b 	bl	800193c <TFT_PrintNumber>

		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 8002e46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd ffee 	bl	8000e2c <TFT_ButtonStringCheck>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <MENU_Test1+0x28c>
			MENU_Test2();
 8002e56:	f000 f84f 	bl	8002ef8 <MENU_Test2>
			break;
 8002e5a:	e02d      	b.n	8002eb8 <MENU_Test1+0x2e8>
		}
		if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 8002e5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e60:	20a0      	movs	r0, #160	; 0xa0
 8002e62:	f7fd ffe3 	bl	8000e2c <TFT_ButtonStringCheck>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <MENU_Test1+0x2a2>
			MENU_Test3();
 8002e6c:	f000 faac 	bl	80033c8 <MENU_Test3>
			break;
 8002e70:	e022      	b.n	8002eb8 <MENU_Test1+0x2e8>
		}
		if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 8002e72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e76:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002e7a:	f7fd ffd7 	bl	8000e2c <TFT_ButtonStringCheck>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <MENU_Test1+0x2ba>
		  	MENU_Test4();
 8002e84:	f000 fb2c 	bl	80034e0 <MENU_Test4>
		  	break;
 8002e88:	e016      	b.n	8002eb8 <MENU_Test1+0x2e8>
		}
		if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 8002e8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e8e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002e92:	f7fd ffcb 	bl	8000e2c <TFT_ButtonStringCheck>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <MENU_Test1+0x2d2>
			MENU_Test5();
 8002e9c:	f000 fbac 	bl	80035f8 <MENU_Test5>
			break;
 8002ea0:	e00a      	b.n	8002eb8 <MENU_Test1+0x2e8>
		}
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 8002ea2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ea6:	f44f 7020 	mov.w	r0, #640	; 0x280
 8002eaa:	f7fd ffbf 	bl	8000e2c <TFT_ButtonStringCheck>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d000      	beq.n	8002eb6 <MENU_Test1+0x2e6>
		HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002eb4:	e6d2      	b.n	8002c5c <MENU_Test1+0x8c>
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 8002eb6:	bf00      	nop
	}
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	08007b08 	.word	0x08007b08
 8002ec4:	08007b10 	.word	0x08007b10
 8002ec8:	08007b18 	.word	0x08007b18
 8002ecc:	08007b20 	.word	0x08007b20
 8002ed0:	08007b5c 	.word	0x08007b5c
 8002ed4:	58020400 	.word	0x58020400
 8002ed8:	2400017c 	.word	0x2400017c
 8002edc:	24000194 	.word	0x24000194
 8002ee0:	08007b64 	.word	0x08007b64
 8002ee4:	24000048 	.word	0x24000048
 8002ee8:	2400004c 	.word	0x2400004c
 8002eec:	08007b78 	.word	0x08007b78
 8002ef0:	08007b80 	.word	0x08007b80
 8002ef4:	08007b8c 	.word	0x08007b8c

08002ef8 <MENU_Test2>:

void MENU_Test2( void ) {							// EEPROM M95040 - testing
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af04      	add	r7, sp, #16
	TFT_WindowFull( ColDarkBlue );
 8002efe:	f240 10cf 	movw	r0, #463	; 0x1cf
 8002f02:	f7fe fa0f 	bl	8001324 <TFT_WindowFull>
	TFT_ButtonString("MAX31855", ColWhite, ColBlue, ColBlack,   0, 400);
 8002f06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2300      	movs	r3, #0
 8002f12:	221f      	movs	r2, #31
 8002f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f18:	48b4      	ldr	r0, [pc, #720]	; (80031ec <MENU_Test2+0x2f4>)
 8002f1a:	f7fd ffc9 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 3", ColWhite, ColBlue, ColBlack, 160, 400);
 8002f1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	23a0      	movs	r3, #160	; 0xa0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f30:	48af      	ldr	r0, [pc, #700]	; (80031f0 <MENU_Test2+0x2f8>)
 8002f32:	f7fd ffbd 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 4", ColWhite, ColBlue, ColBlack, 320, 400);
 8002f36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	221f      	movs	r2, #31
 8002f46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f4a:	48aa      	ldr	r0, [pc, #680]	; (80031f4 <MENU_Test2+0x2fc>)
 8002f4c:	f7fd ffb0 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 5", ColWhite, ColBlue, ColBlack, 480, 400);
 8002f50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	221f      	movs	r2, #31
 8002f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f64:	48a4      	ldr	r0, [pc, #656]	; (80031f8 <MENU_Test2+0x300>)
 8002f66:	f7fd ffa3 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("EXIT", ColWhite, ColBlue, ColBlack, 640, 400);
 8002f6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	221f      	movs	r2, #31
 8002f7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f7e:	489f      	ldr	r0, [pc, #636]	; (80031fc <MENU_Test2+0x304>)
 8002f80:	f7fd ff96 	bl	8000eb0 <TFT_ButtonString>

	TFT_ButtonString("Write 1", ColWhite, ColGreen, ColDarkBlue, 0, 0);
 8002f84:	2300      	movs	r3, #0
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002f90:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f98:	4899      	ldr	r0, [pc, #612]	; (8003200 <MENU_Test2+0x308>)
 8002f9a:	f7fd ff89 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Write 2", ColWhite, ColGreen, ColDarkBlue, 160, 0);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	23a0      	movs	r3, #160	; 0xa0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002faa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fb2:	4894      	ldr	r0, [pc, #592]	; (8003204 <MENU_Test2+0x30c>)
 8002fb4:	f7fd ff7c 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Write 3", ColWhite, ColGreen, ColDarkBlue, 320, 0);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002fc6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002fca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fce:	488e      	ldr	r0, [pc, #568]	; (8003208 <MENU_Test2+0x310>)
 8002fd0:	f7fd ff6e 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Write 4", ColWhite, ColGreen, ColDarkBlue, 480, 0);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002fe2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fea:	4888      	ldr	r0, [pc, #544]	; (800320c <MENU_Test2+0x314>)
 8002fec:	f7fd ff60 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Read", ColWhite, ColGreen, ColDarkBlue, 640, 0);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002ffe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003002:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003006:	4882      	ldr	r0, [pc, #520]	; (8003210 <MENU_Test2+0x318>)
 8003008:	f7fd ff52 	bl	8000eb0 <TFT_ButtonString>



	while(1) {

		if( TFT_ButtonStringCheck( 0, 0 ) == 1 ) {
 800300c:	2100      	movs	r1, #0
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd ff0c 	bl	8000e2c <TFT_ButtonStringCheck>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 80d6 	bne.w	80031c8 <MENU_Test2+0x2d0>
			BufClock[0] = 10;
 800301c:	4b7d      	ldr	r3, [pc, #500]	; (8003214 <MENU_Test2+0x31c>)
 800301e:	220a      	movs	r2, #10
 8003020:	701a      	strb	r2, [r3, #0]
			BufClock[1] = 120;
 8003022:	4b7c      	ldr	r3, [pc, #496]	; (8003214 <MENU_Test2+0x31c>)
 8003024:	2278      	movs	r2, #120	; 0x78
 8003026:	705a      	strb	r2, [r3, #1]
			BufClock[2] = 235;
 8003028:	4b7a      	ldr	r3, [pc, #488]	; (8003214 <MENU_Test2+0x31c>)
 800302a:	22eb      	movs	r2, #235	; 0xeb
 800302c:	709a      	strb	r2, [r3, #2]
			BufClock[3] = 88;
 800302e:	4b79      	ldr	r3, [pc, #484]	; (8003214 <MENU_Test2+0x31c>)
 8003030:	2258      	movs	r2, #88	; 0x58
 8003032:	70da      	strb	r2, [r3, #3]
			BufClock[4] = 200;
 8003034:	4b77      	ldr	r3, [pc, #476]	; (8003214 <MENU_Test2+0x31c>)
 8003036:	22c8      	movs	r2, #200	; 0xc8
 8003038:	711a      	strb	r2, [r3, #4]
			BufClock[5] = 114;
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <MENU_Test2+0x31c>)
 800303c:	2272      	movs	r2, #114	; 0x72
 800303e:	715a      	strb	r2, [r3, #5]
			BufClock[6] = 30;
 8003040:	4b74      	ldr	r3, [pc, #464]	; (8003214 <MENU_Test2+0x31c>)
 8003042:	221e      	movs	r2, #30
 8003044:	719a      	strb	r2, [r3, #6]
			BufClock[7] = 255;
 8003046:	4b73      	ldr	r3, [pc, #460]	; (8003214 <MENU_Test2+0x31c>)
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	71da      	strb	r2, [r3, #7]
			BufClock[8] = 78;
 800304c:	4b71      	ldr	r3, [pc, #452]	; (8003214 <MENU_Test2+0x31c>)
 800304e:	224e      	movs	r2, #78	; 0x4e
 8003050:	721a      	strb	r2, [r3, #8]
			PrintArray(8, 0, 120 );
 8003052:	2278      	movs	r2, #120	; 0x78
 8003054:	2100      	movs	r1, #0
 8003056:	2008      	movs	r0, #8
 8003058:	f000 fbd4 	bl	8003804 <PrintArray>
			EEPROM_SPI_INIT(&hspi3);
 800305c:	486e      	ldr	r0, [pc, #440]	; (8003218 <MENU_Test2+0x320>)
 800305e:	f7fd f93b 	bl	80002d8 <EEPROM_SPI_INIT>

			EEPROM_SPI_WriteBuffer(BufClock, (uint16_t)0x01, (uint16_t)9 );
 8003062:	2209      	movs	r2, #9
 8003064:	2101      	movs	r1, #1
 8003066:	486b      	ldr	r0, [pc, #428]	; (8003214 <MENU_Test2+0x31c>)
 8003068:	f7fd f9b2 	bl	80003d0 <EEPROM_SPI_WriteBuffer>

			Pokus = BufClock[1] * 256 + BufClock[0];
 800306c:	4b69      	ldr	r3, [pc, #420]	; (8003214 <MENU_Test2+0x31c>)
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	b29b      	uxth	r3, r3
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <MENU_Test2+0x31c>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4413      	add	r3, r2
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b66      	ldr	r3, [pc, #408]	; (800321c <MENU_Test2+0x324>)
 8003082:	801a      	strh	r2, [r3, #0]
			TFT_PrintNumber(0, Pokus, 5, 0, ColYellow, ColDarkBlue, 0, 200);
 8003084:	4b65      	ldr	r3, [pc, #404]	; (800321c <MENU_Test2+0x324>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	23c8      	movs	r3, #200	; 0xc8
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	2205      	movs	r2, #5
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fe fc4a 	bl	800193c <TFT_PrintNumber>

			BufClock[0] = (uint8_t) Pokus >> 8;
 80030a8:	4b5c      	ldr	r3, [pc, #368]	; (800321c <MENU_Test2+0x324>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	121b      	asrs	r3, r3, #8
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <MENU_Test2+0x31c>)
 80030b4:	701a      	strb	r2, [r3, #0]
			BufClock[1] = (uint8_t) Pokus;
 80030b6:	4b59      	ldr	r3, [pc, #356]	; (800321c <MENU_Test2+0x324>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b55      	ldr	r3, [pc, #340]	; (8003214 <MENU_Test2+0x31c>)
 80030be:	705a      	strb	r2, [r3, #1]

			Pokus = BufClock[2] * 256 + BufClock[3];
 80030c0:	4b54      	ldr	r3, [pc, #336]	; (8003214 <MENU_Test2+0x31c>)
 80030c2:	789b      	ldrb	r3, [r3, #2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b52      	ldr	r3, [pc, #328]	; (8003214 <MENU_Test2+0x31c>)
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b51      	ldr	r3, [pc, #324]	; (800321c <MENU_Test2+0x324>)
 80030d6:	801a      	strh	r2, [r3, #0]
			TFT_PrintNumber(0, Pokus, 5, 0, ColYellow, ColDarkBlue, 100, 200);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <MENU_Test2+0x324>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	23c8      	movs	r3, #200	; 0xc8
 80030e0:	9303      	str	r3, [sp, #12]
 80030e2:	2364      	movs	r3, #100	; 0x64
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	f240 13cf 	movw	r3, #463	; 0x1cf
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	2205      	movs	r2, #5
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe fc20 	bl	800193c <TFT_PrintNumber>

			BufClock[3] = (uint8_t) Pokus >> 8;
 80030fc:	4b47      	ldr	r3, [pc, #284]	; (800321c <MENU_Test2+0x324>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	121b      	asrs	r3, r3, #8
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b43      	ldr	r3, [pc, #268]	; (8003214 <MENU_Test2+0x31c>)
 8003108:	70da      	strb	r2, [r3, #3]
			BufClock[2] = (uint8_t) (Pokus);
 800310a:	4b44      	ldr	r3, [pc, #272]	; (800321c <MENU_Test2+0x324>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <MENU_Test2+0x31c>)
 8003112:	709a      	strb	r2, [r3, #2]

			Pokus = BufClock[5] * 256 + BufClock[4];
 8003114:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <MENU_Test2+0x31c>)
 8003116:	795b      	ldrb	r3, [r3, #5]
 8003118:	b29b      	uxth	r3, r3
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <MENU_Test2+0x31c>)
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4413      	add	r3, r2
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b3c      	ldr	r3, [pc, #240]	; (800321c <MENU_Test2+0x324>)
 800312a:	801a      	strh	r2, [r3, #0]
			TFT_PrintNumber(0, Pokus, 5, 0, ColYellow, ColDarkBlue, 200, 200);
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <MENU_Test2+0x324>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	23c8      	movs	r3, #200	; 0xc8
 8003134:	9303      	str	r3, [sp, #12]
 8003136:	23c8      	movs	r3, #200	; 0xc8
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	2205      	movs	r2, #5
 800314a:	2000      	movs	r0, #0
 800314c:	f7fe fbf6 	bl	800193c <TFT_PrintNumber>

			BufClock[5] = Pokus >> 8;
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <MENU_Test2+0x324>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	b29b      	uxth	r3, r3
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <MENU_Test2+0x31c>)
 800315c:	715a      	strb	r2, [r3, #5]
			BufClock[4] = (uint8_t) Pokus;
 800315e:	4b2f      	ldr	r3, [pc, #188]	; (800321c <MENU_Test2+0x324>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <MENU_Test2+0x31c>)
 8003166:	711a      	strb	r2, [r3, #4]

			Pokus = BufClock[7] * 256 + BufClock[8];
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <MENU_Test2+0x31c>)
 800316a:	79db      	ldrb	r3, [r3, #7]
 800316c:	b29b      	uxth	r3, r3
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MENU_Test2+0x31c>)
 8003174:	7a1b      	ldrb	r3, [r3, #8]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4413      	add	r3, r2
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <MENU_Test2+0x324>)
 800317e:	801a      	strh	r2, [r3, #0]
			TFT_PrintNumber(0, Pokus, 5, 0, ColYellow, ColDarkBlue, 400, 200);
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <MENU_Test2+0x324>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	23c8      	movs	r3, #200	; 0xc8
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	2205      	movs	r2, #5
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fe fbcb 	bl	800193c <TFT_PrintNumber>

			BufClock[7] = Pokus >> 8;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <MENU_Test2+0x324>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <MENU_Test2+0x31c>)
 80031b2:	71da      	strb	r2, [r3, #7]
			BufClock[8] = (uint8_t) (Pokus);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <MENU_Test2+0x324>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MENU_Test2+0x31c>)
 80031bc:	721a      	strb	r2, [r3, #8]

			PrintArray(8, 0, 240 );
 80031be:	22f0      	movs	r2, #240	; 0xf0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2008      	movs	r0, #8
 80031c4:	f000 fb1e 	bl	8003804 <PrintArray>

		}
		if( TFT_ButtonStringCheck( 160, 0 ) == 1 ) {
 80031c8:	2100      	movs	r1, #0
 80031ca:	20a0      	movs	r0, #160	; 0xa0
 80031cc:	f7fd fe2e 	bl	8000e2c <TFT_ButtonStringCheck>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d143      	bne.n	800325e <MENU_Test2+0x366>
			BufClock[0] = 0;
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MENU_Test2+0x31c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
			BufClock[1] = 0;
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <MENU_Test2+0x31c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	705a      	strb	r2, [r3, #1]
			BufClock[2] = 0;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MENU_Test2+0x31c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	709a      	strb	r2, [r3, #2]
 80031e8:	e01a      	b.n	8003220 <MENU_Test2+0x328>
 80031ea:	bf00      	nop
 80031ec:	08007afc 	.word	0x08007afc
 80031f0:	08007b10 	.word	0x08007b10
 80031f4:	08007b18 	.word	0x08007b18
 80031f8:	08007b20 	.word	0x08007b20
 80031fc:	08007b5c 	.word	0x08007b5c
 8003200:	08007b98 	.word	0x08007b98
 8003204:	08007ba0 	.word	0x08007ba0
 8003208:	08007ba8 	.word	0x08007ba8
 800320c:	08007bb0 	.word	0x08007bb0
 8003210:	08007bb8 	.word	0x08007bb8
 8003214:	24000188 	.word	0x24000188
 8003218:	240000f4 	.word	0x240000f4
 800321c:	24000050 	.word	0x24000050
			BufClock[3] = 0;
 8003220:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <MENU_Test2+0x4c8>)
 8003222:	2200      	movs	r2, #0
 8003224:	70da      	strb	r2, [r3, #3]
			BufClock[4] = 0;
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <MENU_Test2+0x4c8>)
 8003228:	2200      	movs	r2, #0
 800322a:	711a      	strb	r2, [r3, #4]
			BufClock[5] = 0;
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <MENU_Test2+0x4c8>)
 800322e:	2200      	movs	r2, #0
 8003230:	715a      	strb	r2, [r3, #5]
			BufClock[6] = 0;
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <MENU_Test2+0x4c8>)
 8003234:	2200      	movs	r2, #0
 8003236:	719a      	strb	r2, [r3, #6]
			BufClock[7] = 0;
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <MENU_Test2+0x4c8>)
 800323a:	2200      	movs	r2, #0
 800323c:	71da      	strb	r2, [r3, #7]
			BufClock[8] = 0;
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <MENU_Test2+0x4c8>)
 8003240:	2200      	movs	r2, #0
 8003242:	721a      	strb	r2, [r3, #8]
			PrintArray(8, 0, 120 );
 8003244:	2278      	movs	r2, #120	; 0x78
 8003246:	2100      	movs	r1, #0
 8003248:	2008      	movs	r0, #8
 800324a:	f000 fadb 	bl	8003804 <PrintArray>
			EEPROM_SPI_INIT(&hspi3);
 800324e:	485d      	ldr	r0, [pc, #372]	; (80033c4 <MENU_Test2+0x4cc>)
 8003250:	f7fd f842 	bl	80002d8 <EEPROM_SPI_INIT>

			EEPROM_SPI_WriteBuffer(BufClock, (uint16_t)0x01, (uint16_t)9 );
 8003254:	2209      	movs	r2, #9
 8003256:	2101      	movs	r1, #1
 8003258:	4859      	ldr	r0, [pc, #356]	; (80033c0 <MENU_Test2+0x4c8>)
 800325a:	f7fd f8b9 	bl	80003d0 <EEPROM_SPI_WriteBuffer>
		}
		if( TFT_ButtonStringCheck( 320, 0 ) == 1 ) {
 800325e:	2100      	movs	r1, #0
 8003260:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003264:	f7fd fde2 	bl	8000e2c <TFT_ButtonStringCheck>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d127      	bne.n	80032be <MENU_Test2+0x3c6>
			BufClock[0] = 100;
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <MENU_Test2+0x4c8>)
 8003270:	2264      	movs	r2, #100	; 0x64
 8003272:	701a      	strb	r2, [r3, #0]
			BufClock[1] = 90;
 8003274:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <MENU_Test2+0x4c8>)
 8003276:	225a      	movs	r2, #90	; 0x5a
 8003278:	705a      	strb	r2, [r3, #1]
			BufClock[2] = 80;
 800327a:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <MENU_Test2+0x4c8>)
 800327c:	2250      	movs	r2, #80	; 0x50
 800327e:	709a      	strb	r2, [r3, #2]
			BufClock[3] = 70;
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <MENU_Test2+0x4c8>)
 8003282:	2246      	movs	r2, #70	; 0x46
 8003284:	70da      	strb	r2, [r3, #3]
			BufClock[4] = 60;
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <MENU_Test2+0x4c8>)
 8003288:	223c      	movs	r2, #60	; 0x3c
 800328a:	711a      	strb	r2, [r3, #4]
			BufClock[5] = 50;
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <MENU_Test2+0x4c8>)
 800328e:	2232      	movs	r2, #50	; 0x32
 8003290:	715a      	strb	r2, [r3, #5]
			BufClock[6] = 40;
 8003292:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <MENU_Test2+0x4c8>)
 8003294:	2228      	movs	r2, #40	; 0x28
 8003296:	719a      	strb	r2, [r3, #6]
			BufClock[7] = 30;
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <MENU_Test2+0x4c8>)
 800329a:	221e      	movs	r2, #30
 800329c:	71da      	strb	r2, [r3, #7]
			BufClock[8] = 20;
 800329e:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <MENU_Test2+0x4c8>)
 80032a0:	2214      	movs	r2, #20
 80032a2:	721a      	strb	r2, [r3, #8]
			PrintArray(8, 0, 120 );
 80032a4:	2278      	movs	r2, #120	; 0x78
 80032a6:	2100      	movs	r1, #0
 80032a8:	2008      	movs	r0, #8
 80032aa:	f000 faab 	bl	8003804 <PrintArray>
			EEPROM_SPI_INIT(&hspi3);
 80032ae:	4845      	ldr	r0, [pc, #276]	; (80033c4 <MENU_Test2+0x4cc>)
 80032b0:	f7fd f812 	bl	80002d8 <EEPROM_SPI_INIT>

			EEPROM_SPI_WriteBuffer(BufClock, (uint16_t)0x01, (uint16_t)9 );
 80032b4:	2209      	movs	r2, #9
 80032b6:	2101      	movs	r1, #1
 80032b8:	4841      	ldr	r0, [pc, #260]	; (80033c0 <MENU_Test2+0x4c8>)
 80032ba:	f7fd f889 	bl	80003d0 <EEPROM_SPI_WriteBuffer>
		}
		if( TFT_ButtonStringCheck( 480, 0 ) == 1 ) {
 80032be:	2100      	movs	r1, #0
 80032c0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80032c4:	f7fd fdb2 	bl	8000e2c <TFT_ButtonStringCheck>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d127      	bne.n	800331e <MENU_Test2+0x426>
			BufClock[0] = 55;
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <MENU_Test2+0x4c8>)
 80032d0:	2237      	movs	r2, #55	; 0x37
 80032d2:	701a      	strb	r2, [r3, #0]
			BufClock[1] = 75;
 80032d4:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <MENU_Test2+0x4c8>)
 80032d6:	224b      	movs	r2, #75	; 0x4b
 80032d8:	705a      	strb	r2, [r3, #1]
			BufClock[2] = 95;
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <MENU_Test2+0x4c8>)
 80032dc:	225f      	movs	r2, #95	; 0x5f
 80032de:	709a      	strb	r2, [r3, #2]
			BufClock[3] = 115;
 80032e0:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <MENU_Test2+0x4c8>)
 80032e2:	2273      	movs	r2, #115	; 0x73
 80032e4:	70da      	strb	r2, [r3, #3]
			BufClock[4] = 135;
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <MENU_Test2+0x4c8>)
 80032e8:	2287      	movs	r2, #135	; 0x87
 80032ea:	711a      	strb	r2, [r3, #4]
			BufClock[5] = 155;
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <MENU_Test2+0x4c8>)
 80032ee:	229b      	movs	r2, #155	; 0x9b
 80032f0:	715a      	strb	r2, [r3, #5]
			BufClock[6] = 175;
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <MENU_Test2+0x4c8>)
 80032f4:	22af      	movs	r2, #175	; 0xaf
 80032f6:	719a      	strb	r2, [r3, #6]
			BufClock[7] = 195;
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <MENU_Test2+0x4c8>)
 80032fa:	22c3      	movs	r2, #195	; 0xc3
 80032fc:	71da      	strb	r2, [r3, #7]
			BufClock[8] = 215;
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <MENU_Test2+0x4c8>)
 8003300:	22d7      	movs	r2, #215	; 0xd7
 8003302:	721a      	strb	r2, [r3, #8]
			PrintArray(8, 0, 120 );
 8003304:	2278      	movs	r2, #120	; 0x78
 8003306:	2100      	movs	r1, #0
 8003308:	2008      	movs	r0, #8
 800330a:	f000 fa7b 	bl	8003804 <PrintArray>
			EEPROM_SPI_INIT(&hspi3);
 800330e:	482d      	ldr	r0, [pc, #180]	; (80033c4 <MENU_Test2+0x4cc>)
 8003310:	f7fc ffe2 	bl	80002d8 <EEPROM_SPI_INIT>

			EEPROM_SPI_WriteBuffer(BufClock, (uint16_t)0x01, (uint16_t)9 );
 8003314:	2209      	movs	r2, #9
 8003316:	2101      	movs	r1, #1
 8003318:	4829      	ldr	r0, [pc, #164]	; (80033c0 <MENU_Test2+0x4c8>)
 800331a:	f7fd f859 	bl	80003d0 <EEPROM_SPI_WriteBuffer>
		}
		if( TFT_ButtonStringCheck( 640, 0 ) == 1 ) {
 800331e:	2100      	movs	r1, #0
 8003320:	f44f 7020 	mov.w	r0, #640	; 0x280
 8003324:	f7fd fd82 	bl	8000e2c <TFT_ButtonStringCheck>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10c      	bne.n	8003348 <MENU_Test2+0x450>
			EEPROM_SPI_INIT(&hspi3);
 800332e:	4825      	ldr	r0, [pc, #148]	; (80033c4 <MENU_Test2+0x4cc>)
 8003330:	f7fc ffd2 	bl	80002d8 <EEPROM_SPI_INIT>
			EEPROM_SPI_ReadBuffer(BufClock, (uint16_t)0x01, (uint16_t)9 );
 8003334:	2209      	movs	r2, #9
 8003336:	2101      	movs	r1, #1
 8003338:	4821      	ldr	r0, [pc, #132]	; (80033c0 <MENU_Test2+0x4c8>)
 800333a:	f7fd f93f 	bl	80005bc <EEPROM_SPI_ReadBuffer>
			PrintArray(8, 0, 150 );
 800333e:	2296      	movs	r2, #150	; 0x96
 8003340:	2100      	movs	r1, #0
 8003342:	2008      	movs	r0, #8
 8003344:	f000 fa5e 	bl	8003804 <PrintArray>
		}

		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 8003348:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd fd6d 	bl	8000e2c <TFT_ButtonStringCheck>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <MENU_Test2+0x466>
			MENU_Test1();
 8003358:	f7ff fc3a 	bl	8002bd0 <MENU_Test1>
			break;
 800335c:	e02d      	b.n	80033ba <MENU_Test2+0x4c2>
		}
		if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 800335e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003362:	20a0      	movs	r0, #160	; 0xa0
 8003364:	f7fd fd62 	bl	8000e2c <TFT_ButtonStringCheck>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <MENU_Test2+0x47c>
			MENU_Test3();
 800336e:	f000 f82b 	bl	80033c8 <MENU_Test3>
			break;
 8003372:	e022      	b.n	80033ba <MENU_Test2+0x4c2>
		}
		if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 8003374:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003378:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800337c:	f7fd fd56 	bl	8000e2c <TFT_ButtonStringCheck>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <MENU_Test2+0x494>
		  	MENU_Test4();
 8003386:	f000 f8ab 	bl	80034e0 <MENU_Test4>
		  	break;
 800338a:	e016      	b.n	80033ba <MENU_Test2+0x4c2>
		}
		if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 800338c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003390:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003394:	f7fd fd4a 	bl	8000e2c <TFT_ButtonStringCheck>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <MENU_Test2+0x4ac>
			MENU_Test5();
 800339e:	f000 f92b 	bl	80035f8 <MENU_Test5>
			break;
 80033a2:	e00a      	b.n	80033ba <MENU_Test2+0x4c2>
		}
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80033a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80033a8:	f44f 7020 	mov.w	r0, #640	; 0x280
 80033ac:	f7fd fd3e 	bl	8000e2c <TFT_ButtonStringCheck>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d000      	beq.n	80033b8 <MENU_Test2+0x4c0>
		if( TFT_ButtonStringCheck( 0, 0 ) == 1 ) {
 80033b6:	e629      	b.n	800300c <MENU_Test2+0x114>
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80033b8:	bf00      	nop
	}
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	24000188 	.word	0x24000188
 80033c4:	240000f4 	.word	0x240000f4

080033c8 <MENU_Test3>:

void MENU_Test3( void ) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
	TFT_WindowFull( ColDarkGrey );
 80033ce:	f248 4010 	movw	r0, #33808	; 0x8410
 80033d2:	f7fd ffa7 	bl	8001324 <TFT_WindowFull>
	TFT_ButtonString("MAX31855", ColWhite, ColBlue, ColBlack,   0, 400);
 80033d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2300      	movs	r3, #0
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	221f      	movs	r2, #31
 80033e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033e8:	4838      	ldr	r0, [pc, #224]	; (80034cc <MENU_Test3+0x104>)
 80033ea:	f7fd fd61 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("M95040", ColWhite, ColBlue, ColBlack, 160, 400);
 80033ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	23a0      	movs	r3, #160	; 0xa0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	221f      	movs	r2, #31
 80033fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003400:	4833      	ldr	r0, [pc, #204]	; (80034d0 <MENU_Test3+0x108>)
 8003402:	f7fd fd55 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 4", ColWhite, ColBlue, ColBlack, 320, 400);
 8003406:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2300      	movs	r3, #0
 8003414:	221f      	movs	r2, #31
 8003416:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800341a:	482e      	ldr	r0, [pc, #184]	; (80034d4 <MENU_Test3+0x10c>)
 800341c:	f7fd fd48 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 5", ColWhite, ColBlue, ColBlack, 480, 400);
 8003420:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2300      	movs	r3, #0
 800342e:	221f      	movs	r2, #31
 8003430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003434:	4828      	ldr	r0, [pc, #160]	; (80034d8 <MENU_Test3+0x110>)
 8003436:	f7fd fd3b 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("EXIT", ColWhite, ColBlue, ColBlack, 640, 400);
 800343a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	221f      	movs	r2, #31
 800344a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800344e:	4823      	ldr	r0, [pc, #140]	; (80034dc <MENU_Test3+0x114>)
 8003450:	f7fd fd2e 	bl	8000eb0 <TFT_ButtonString>
	while(1) {
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 8003454:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003458:	2000      	movs	r0, #0
 800345a:	f7fd fce7 	bl	8000e2c <TFT_ButtonStringCheck>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <MENU_Test3+0xa2>
			MENU_Test1();
 8003464:	f7ff fbb4 	bl	8002bd0 <MENU_Test1>
			break;
 8003468:	e02d      	b.n	80034c6 <MENU_Test3+0xfe>
		}
		if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 800346a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800346e:	20a0      	movs	r0, #160	; 0xa0
 8003470:	f7fd fcdc 	bl	8000e2c <TFT_ButtonStringCheck>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <MENU_Test3+0xb8>
			MENU_Test2();
 800347a:	f7ff fd3d 	bl	8002ef8 <MENU_Test2>
			break;
 800347e:	e022      	b.n	80034c6 <MENU_Test3+0xfe>
		}
		if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 8003480:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003484:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003488:	f7fd fcd0 	bl	8000e2c <TFT_ButtonStringCheck>
 800348c:	4603      	mov	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <MENU_Test3+0xd0>
		  	MENU_Test4();
 8003492:	f000 f825 	bl	80034e0 <MENU_Test4>
		  	break;
 8003496:	e016      	b.n	80034c6 <MENU_Test3+0xfe>
		}
		if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 8003498:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800349c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80034a0:	f7fd fcc4 	bl	8000e2c <TFT_ButtonStringCheck>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <MENU_Test3+0xe8>
			MENU_Test5();
 80034aa:	f000 f8a5 	bl	80035f8 <MENU_Test5>
			break;
 80034ae:	e00a      	b.n	80034c6 <MENU_Test3+0xfe>
		}
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80034b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80034b4:	f44f 7020 	mov.w	r0, #640	; 0x280
 80034b8:	f7fd fcb8 	bl	8000e2c <TFT_ButtonStringCheck>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d000      	beq.n	80034c4 <MENU_Test3+0xfc>
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 80034c2:	e7c7      	b.n	8003454 <MENU_Test3+0x8c>
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80034c4:	bf00      	nop
	}
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	08007afc 	.word	0x08007afc
 80034d0:	08007b08 	.word	0x08007b08
 80034d4:	08007b18 	.word	0x08007b18
 80034d8:	08007b20 	.word	0x08007b20
 80034dc:	08007b5c 	.word	0x08007b5c

080034e0 <MENU_Test4>:

void MENU_Test4( void ) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af02      	add	r7, sp, #8
	TFT_WindowFull( ColDarkCyan );
 80034e6:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80034ea:	f7fd ff1b 	bl	8001324 <TFT_WindowFull>
	TFT_ButtonString("MAX31855", ColWhite, ColBlue, ColBlack,   0, 400);
 80034ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	2300      	movs	r3, #0
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	221f      	movs	r2, #31
 80034fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003500:	4838      	ldr	r0, [pc, #224]	; (80035e4 <MENU_Test4+0x104>)
 8003502:	f7fd fcd5 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("M95040", ColWhite, ColBlue, ColBlack, 160, 400);
 8003506:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	23a0      	movs	r3, #160	; 0xa0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	221f      	movs	r2, #31
 8003514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003518:	4833      	ldr	r0, [pc, #204]	; (80035e8 <MENU_Test4+0x108>)
 800351a:	f7fd fcc9 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 3", ColWhite, ColBlue, ColBlack, 320, 400);
 800351e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	221f      	movs	r2, #31
 800352e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003532:	482e      	ldr	r0, [pc, #184]	; (80035ec <MENU_Test4+0x10c>)
 8003534:	f7fd fcbc 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 5", ColWhite, ColBlue, ColBlack, 480, 400);
 8003538:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	221f      	movs	r2, #31
 8003548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800354c:	4828      	ldr	r0, [pc, #160]	; (80035f0 <MENU_Test4+0x110>)
 800354e:	f7fd fcaf 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("EXIT", ColWhite, ColBlue, ColBlack, 640, 400);
 8003552:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	f44f 7320 	mov.w	r3, #640	; 0x280
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	221f      	movs	r2, #31
 8003562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003566:	4823      	ldr	r0, [pc, #140]	; (80035f4 <MENU_Test4+0x114>)
 8003568:	f7fd fca2 	bl	8000eb0 <TFT_ButtonString>
	while(1) {
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 800356c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd fc5b 	bl	8000e2c <TFT_ButtonStringCheck>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <MENU_Test4+0xa2>
			MENU_Test1();
 800357c:	f7ff fb28 	bl	8002bd0 <MENU_Test1>
			break;
 8003580:	e02d      	b.n	80035de <MENU_Test4+0xfe>
		}
		if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 8003582:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003586:	20a0      	movs	r0, #160	; 0xa0
 8003588:	f7fd fc50 	bl	8000e2c <TFT_ButtonStringCheck>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <MENU_Test4+0xb8>
			MENU_Test2();
 8003592:	f7ff fcb1 	bl	8002ef8 <MENU_Test2>
			break;
 8003596:	e022      	b.n	80035de <MENU_Test4+0xfe>
		}
		if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 8003598:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800359c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80035a0:	f7fd fc44 	bl	8000e2c <TFT_ButtonStringCheck>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <MENU_Test4+0xd0>
		  	MENU_Test3();
 80035aa:	f7ff ff0d 	bl	80033c8 <MENU_Test3>
		  	break;
 80035ae:	e016      	b.n	80035de <MENU_Test4+0xfe>
		}
		if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 80035b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80035b4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80035b8:	f7fd fc38 	bl	8000e2c <TFT_ButtonStringCheck>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <MENU_Test4+0xe8>
			MENU_Test5();
 80035c2:	f000 f819 	bl	80035f8 <MENU_Test5>
			break;
 80035c6:	e00a      	b.n	80035de <MENU_Test4+0xfe>
		}
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80035c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80035cc:	f44f 7020 	mov.w	r0, #640	; 0x280
 80035d0:	f7fd fc2c 	bl	8000e2c <TFT_ButtonStringCheck>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d000      	beq.n	80035dc <MENU_Test4+0xfc>
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 80035da:	e7c7      	b.n	800356c <MENU_Test4+0x8c>
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80035dc:	bf00      	nop
	}
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08007afc 	.word	0x08007afc
 80035e8:	08007b08 	.word	0x08007b08
 80035ec:	08007b10 	.word	0x08007b10
 80035f0:	08007b20 	.word	0x08007b20
 80035f4:	08007b5c 	.word	0x08007b5c

080035f8 <MENU_Test5>:

void MENU_Test5( void ) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af02      	add	r7, sp, #8
	TFT_WindowFull( ColDarkRed );
 80035fe:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8003602:	f7fd fe8f 	bl	8001324 <TFT_WindowFull>
	TFT_ButtonString("MAX31855", ColWhite, ColBlue, ColBlack,   0, 400);
 8003606:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	221f      	movs	r2, #31
 8003614:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003618:	4836      	ldr	r0, [pc, #216]	; (80036f4 <MENU_Test5+0xfc>)
 800361a:	f7fd fc49 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("M95040", ColWhite, ColBlue, ColBlack, 160, 400);
 800361e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	23a0      	movs	r3, #160	; 0xa0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	221f      	movs	r2, #31
 800362c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003630:	4831      	ldr	r0, [pc, #196]	; (80036f8 <MENU_Test5+0x100>)
 8003632:	f7fd fc3d 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 3", ColWhite, ColBlue, ColBlack, 320, 400);
 8003636:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	221f      	movs	r2, #31
 8003646:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800364a:	482c      	ldr	r0, [pc, #176]	; (80036fc <MENU_Test5+0x104>)
 800364c:	f7fd fc30 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("Test 4", ColWhite, ColBlue, ColBlack, 480, 400);
 8003650:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	221f      	movs	r2, #31
 8003660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003664:	4826      	ldr	r0, [pc, #152]	; (8003700 <MENU_Test5+0x108>)
 8003666:	f7fd fc23 	bl	8000eb0 <TFT_ButtonString>
	TFT_ButtonString("EXIT", ColWhite, ColBlue, ColBlack, 640, 400);
 800366a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	221f      	movs	r2, #31
 800367a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800367e:	4821      	ldr	r0, [pc, #132]	; (8003704 <MENU_Test5+0x10c>)
 8003680:	f7fd fc16 	bl	8000eb0 <TFT_ButtonString>
	while(1) {
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 8003684:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003688:	2000      	movs	r0, #0
 800368a:	f7fd fbcf 	bl	8000e2c <TFT_ButtonStringCheck>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <MENU_Test5+0xa0>
			MENU_Test1();
 8003694:	f7ff fa9c 	bl	8002bd0 <MENU_Test1>
		}
		if( TFT_ButtonStringCheck( 160, 400 ) == 1 ) {
 8003698:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800369c:	20a0      	movs	r0, #160	; 0xa0
 800369e:	f7fd fbc5 	bl	8000e2c <TFT_ButtonStringCheck>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <MENU_Test5+0xb4>
			MENU_Test2();
 80036a8:	f7ff fc26 	bl	8002ef8 <MENU_Test2>
		}
		if( TFT_ButtonStringCheck( 320, 400 ) == 1 ) {
 80036ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036b0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80036b4:	f7fd fbba 	bl	8000e2c <TFT_ButtonStringCheck>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <MENU_Test5+0xca>
		  	MENU_Test3();
 80036be:	f7ff fe83 	bl	80033c8 <MENU_Test3>
		}
		if( TFT_ButtonStringCheck( 480, 400 ) == 1 ) {
 80036c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036c6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80036ca:	f7fd fbaf 	bl	8000e2c <TFT_ButtonStringCheck>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <MENU_Test5+0xe0>
			MENU_Test4();
 80036d4:	f7ff ff04 	bl	80034e0 <MENU_Test4>
		}
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80036d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036dc:	f44f 7020 	mov.w	r0, #640	; 0x280
 80036e0:	f7fd fba4 	bl	8000e2c <TFT_ButtonStringCheck>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d000      	beq.n	80036ec <MENU_Test5+0xf4>
		if( TFT_ButtonStringCheck( 0, 400 ) == 1 ) {
 80036ea:	e7cb      	b.n	8003684 <MENU_Test5+0x8c>
		if( TFT_ButtonStringCheck( 640, 400 ) == 1 ) break;
 80036ec:	bf00      	nop
	}
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	08007afc 	.word	0x08007afc
 80036f8:	08007b08 	.word	0x08007b08
 80036fc:	08007b10 	.word	0x08007b10
 8003700:	08007b18 	.word	0x08007b18
 8003704:	08007b5c 	.word	0x08007b5c

08003708 <Beep>:

void Beep( uint32_t Tone, uint16_t Time) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b090      	sub	sp, #64	; 0x40
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	2220      	movs	r2, #32
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f004 f9cd 	bl	8007acc <memset>
  TIM_InitStruct.Prescaler = 480;
 8003732:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003736:	85bb      	strh	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003738:	2300      	movs	r3, #0
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_InitStruct.Autoreload = 65535;
 800373c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374a:	4619      	mov	r1, r3
 800374c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003750:	f003 fdd8 	bl	8007304 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003754:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003758:	f7fe fe87 	bl	800246a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 800375c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003760:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003764:	f7fe fef2 	bl	800254c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003768:	2360      	movs	r3, #96	; 0x60
 800376a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.CompareValue = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003786:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800378a:	f003 fe4f 	bl	800742c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 800378e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003792:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003796:	f7fe fe87 	bl	80024a8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800379a:	2100      	movs	r1, #0
 800379c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037a0:	f7fe ff32 	bl	8002608 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80037a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037a8:	f7fe ff41 	bl	800262e <LL_TIM_DisableMasterSlaveMode>

  Tone = 1000000 / Tone;
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <Beep+0xf4>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	607b      	str	r3, [r7, #4]
  if(!LL_TIM_IsEnabledCounter(TIM2)) {
 80037b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037ba:	f7fe fe43 	bl	8002444 <LL_TIM_IsEnabledCounter>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <Beep+0xcc>
	LL_TIM_EnableCounter(TIM2);
 80037c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037c8:	f7fe fe2c 	bl	8002424 <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(TIM2);
 80037cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037d0:	f7fe ff3d 	bl	800264e <LL_TIM_EnableAllOutputs>
  }
  LL_TIM_SetAutoReload(TIM2, Tone);
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037da:	f7fe fe56 	bl	800248a <LL_TIM_SetAutoReload>
  Tone = Tone >> 1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	607b      	str	r3, [r7, #4]
  LL_TIM_OC_SetCompareCH4(TIM2, Tone);
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037ea:	f7fe feff 	bl	80025ec <LL_TIM_OC_SetCompareCH4>
  BeepTimer = Time;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <Beep+0xf8>)
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	8013      	strh	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	3740      	adds	r7, #64	; 0x40
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	000f4240 	.word	0x000f4240
 8003800:	24000030 	.word	0x24000030

08003804 <PrintArray>:

void PrintArray( uint8_t imax, uint16_t x, uint16_t y) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af04      	add	r7, sp, #16
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	460b      	mov	r3, r1
 8003810:	80bb      	strh	r3, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	for( i = 0; i < imax; i++) {
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e01e      	b.n	800385a <PrintArray+0x56>
		TFT_PrintNumber(0, BufClock[i], 3, 0, ColYellow, ColDarkBlue, x + i * 80, y);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <PrintArray+0x68>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	4619      	mov	r1, r3
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4413      	add	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	b29a      	uxth	r2, r3
 8003832:	88bb      	ldrh	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	9203      	str	r2, [sp, #12]
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2203      	movs	r2, #3
 800384e:	2000      	movs	r0, #0
 8003850:	f7fe f874 	bl	800193c <TFT_PrintNumber>
	for( i = 0; i < imax; i++) {
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	3301      	adds	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3dc      	bcc.n	800381c <PrintArray+0x18>
	}
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	24000188 	.word	0x24000188

08003870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003874:	b672      	cpsid	i
}
 8003876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003878:	e7fe      	b.n	8003878 <Error_Handler+0x8>
	...

0800387c <LL_RCC_SetClockSource>:
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t * pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <LL_RCC_SetClockSource+0x50>)
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0e19      	lsrs	r1, r3, #24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	401a      	ands	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	b2d9      	uxtb	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	5802444c 	.word	0x5802444c

080038d0 <LL_RCC_SetSPIClockSource>:
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffcf 	bl	800387c <LL_RCC_SetClockSource>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <LL_AHB4_GRP1_EnableClock+0x34>)
 80038f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80038f6:	4909      	ldr	r1, [pc, #36]	; (800391c <LL_AHB4_GRP1_EnableClock+0x34>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <LL_AHB4_GRP1_EnableClock+0x34>)
 8003902:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	58024400 	.word	0x58024400

08003920 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <LL_APB2_GRP1_EnableClock+0x34>)
 800392a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800392e:	4909      	ldr	r1, [pc, #36]	; (8003954 <LL_APB2_GRP1_EnableClock+0x34>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <LL_APB2_GRP1_EnableClock+0x34>)
 800393a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003944:	68fb      	ldr	r3, [r7, #12]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400

08003958 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f423 1260 	bic.w	r2, r3, #3670016	; 0x380000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CFG2         SSOM          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60da      	str	r2, [r3, #12]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b090      	sub	sp, #64	; 0x40
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039a6:	f107 0318 	add.w	r3, r7, #24
 80039aa:	2228      	movs	r2, #40	; 0x28
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 f88c 	bl	8007acc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	463b      	mov	r3, r7
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	611a      	str	r2, [r3, #16]
 80039c2:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI123_CLKSOURCE_PLL1Q);
 80039c4:	482b      	ldr	r0, [pc, #172]	; (8003a74 <MX_SPI1_Init+0xd4>)
 80039c6:	f7ff ff83 	bl	80038d0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80039ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039ce:	f7ff ffa7 	bl	8003920 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80039d2:	2001      	movs	r0, #1
 80039d4:	f7ff ff88 	bl	80038e8 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80039d8:	2002      	movs	r0, #2
 80039da:	f7ff ff85 	bl	80038e8 <LL_AHB4_GRP1_EnableClock>
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PB5   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 80039de:	2370      	movs	r3, #112	; 0x70
 80039e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039e2:	2302      	movs	r3, #2
 80039e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039f2:	2305      	movs	r3, #5
 80039f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	463b      	mov	r3, r7
 80039f8:	4619      	mov	r1, r3
 80039fa:	481f      	ldr	r0, [pc, #124]	; (8003a78 <MX_SPI1_Init+0xd8>)
 80039fc:	f003 fac4 	bl	8006f88 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003a00:	2320      	movs	r3, #32
 8003a02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a04:	2302      	movs	r3, #2
 8003a06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a14:	2305      	movs	r3, #5
 8003a16:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4817      	ldr	r0, [pc, #92]	; (8003a7c <MX_SPI1_Init+0xdc>)
 8003a1e:	f003 fab3 	bl	8006f88 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a2a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a2c:	2307      	movs	r3, #7
 8003a2e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8003a38:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 8003a3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a44:	2300      	movs	r3, #0
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 0x0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003a50:	f107 0318 	add.w	r3, r7, #24
 8003a54:	4619      	mov	r1, r3
 8003a56:	480a      	ldr	r0, [pc, #40]	; (8003a80 <MX_SPI1_Init+0xe0>)
 8003a58:	f003 fb46 	bl	80070e8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4808      	ldr	r0, [pc, #32]	; (8003a80 <MX_SPI1_Init+0xe0>)
 8003a60:	f7ff ff7a 	bl	8003958 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8003a64:	4806      	ldr	r0, [pc, #24]	; (8003a80 <MX_SPI1_Init+0xe0>)
 8003a66:	f7ff ff8a 	bl	800397e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a6a:	bf00      	nop
 8003a6c:	3740      	adds	r7, #64	; 0x40
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	07000c04 	.word	0x07000c04
 8003a78:	58020000 	.word	0x58020000
 8003a7c:	58020400 	.word	0x58020400
 8003a80:	40013000 	.word	0x40013000

08003a84 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <MX_SPI2_Init+0xac>)
 8003a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a8e:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003a90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003a98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a9c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ab2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ab6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003aba:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003abe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <MX_SPI2_Init+0xa8>)
 8003b18:	f002 f84e 	bl	8005bb8 <HAL_SPI_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8003b22:	f7ff fea5 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	24000194 	.word	0x24000194
 8003b30:	40003800 	.word	0x40003800

08003b34 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b3a:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <MX_SPI3_Init+0xa8>)
 8003b3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003b44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b4c:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b4e:	2207      	movs	r2, #7
 8003b50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b68:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003b6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b74:	4b18      	ldr	r3, [pc, #96]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003bc2:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <MX_SPI3_Init+0xa4>)
 8003bc4:	f001 fff8 	bl	8005bb8 <HAL_SPI_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003bce:	f7ff fe4f 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	240000f4 	.word	0x240000f4
 8003bdc:	40003c00 	.word	0x40003c00

08003be0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b090      	sub	sp, #64	; 0x40
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003be6:	f107 0318 	add.w	r3, r7, #24
 8003bea:	2228      	movs	r2, #40	; 0x28
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 ff6c 	bl	8007acc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	615a      	str	r2, [r3, #20]

  LL_RCC_SetSPIClockSource(LL_RCC_SPI45_CLKSOURCE_PCLK2);
 8003c04:	4821      	ldr	r0, [pc, #132]	; (8003c8c <MX_SPI4_Init+0xac>)
 8003c06:	f7ff fe63 	bl	80038d0 <LL_RCC_SetSPIClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 8003c0a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c0e:	f7ff fe87 	bl	8003920 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8003c12:	2010      	movs	r0, #16
 8003c14:	f7ff fe68 	bl	80038e8 <LL_AHB4_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE2   ------> SPI4_SCK
  PE5   ------> SPI4_MISO
  PE6   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8003c18:	2364      	movs	r3, #100	; 0x64
 8003c1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003c2c:	2305      	movs	r3, #5
 8003c2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c30:	463b      	mov	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4816      	ldr	r0, [pc, #88]	; (8003c90 <MX_SPI4_Init+0xb0>)
 8003c36:	f003 f9a7 	bl	8006f88 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c42:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c44:	2307      	movs	r3, #7
 8003c46:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 8003c56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 0x0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 8003c68:	f107 0318 	add.w	r3, r7, #24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4809      	ldr	r0, [pc, #36]	; (8003c94 <MX_SPI4_Init+0xb4>)
 8003c70:	f003 fa3a 	bl	80070e8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8003c74:	2100      	movs	r1, #0
 8003c76:	4807      	ldr	r0, [pc, #28]	; (8003c94 <MX_SPI4_Init+0xb4>)
 8003c78:	f7ff fe6e 	bl	8003958 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI4);
 8003c7c:	4805      	ldr	r0, [pc, #20]	; (8003c94 <MX_SPI4_Init+0xb4>)
 8003c7e:	f7ff fe7e 	bl	800397e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	3740      	adds	r7, #64	; 0x40
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	07001004 	.word	0x07001004
 8003c90:	58021000 	.word	0x58021000
 8003c94:	40013400 	.word	0x40013400

08003c98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08e      	sub	sp, #56	; 0x38
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a57      	ldr	r2, [pc, #348]	; (8003e14 <HAL_SPI_MspInit+0x17c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d151      	bne.n	8003d5e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    LL_RCC_SetSPIClockSource(LL_RCC_SPI123_CLKSOURCE_PLL1Q);
 8003cba:	4857      	ldr	r0, [pc, #348]	; (8003e18 <HAL_SPI_MspInit+0x180>)
 8003cbc:	f7ff fe08 	bl	80038d0 <LL_RCC_SetSPIClockSource>

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cc0:	4b56      	ldr	r3, [pc, #344]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc6:	4a55      	ldr	r2, [pc, #340]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cde:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce4:	4a4d      	ldr	r2, [pc, #308]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cee:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfc:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d02:	4a46      	ldr	r2, [pc, #280]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d0c:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	2300      	movs	r3, #0
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d32:	4619      	mov	r1, r3
 8003d34:	483a      	ldr	r0, [pc, #232]	; (8003e20 <HAL_SPI_MspInit+0x188>)
 8003d36:	f000 fe4d 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d54:	4619      	mov	r1, r3
 8003d56:	4833      	ldr	r0, [pc, #204]	; (8003e24 <HAL_SPI_MspInit+0x18c>)
 8003d58:	f000 fe3c 	bl	80049d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003d5c:	e055      	b.n	8003e0a <HAL_SPI_MspInit+0x172>
  else if(spiHandle->Instance==SPI3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_SPI_MspInit+0x190>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d150      	bne.n	8003e0a <HAL_SPI_MspInit+0x172>
    LL_RCC_SetSPIClockSource(LL_RCC_SPI123_CLKSOURCE_PLL1Q);
 8003d68:	482b      	ldr	r0, [pc, #172]	; (8003e18 <HAL_SPI_MspInit+0x180>)
 8003d6a:	f7ff fdb1 	bl	80038d0 <LL_RCC_SetSPIClockSource>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d92:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_SPI_MspInit+0x184>)
 8003dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dc8:	2304      	movs	r3, #4
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003dd8:	2307      	movs	r3, #7
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	4810      	ldr	r0, [pc, #64]	; (8003e24 <HAL_SPI_MspInit+0x18c>)
 8003de4:	f000 fdf6 	bl	80049d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003de8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dfa:	2306      	movs	r3, #6
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e02:	4619      	mov	r1, r3
 8003e04:	4806      	ldr	r0, [pc, #24]	; (8003e20 <HAL_SPI_MspInit+0x188>)
 8003e06:	f000 fde5 	bl	80049d4 <HAL_GPIO_Init>
}
 8003e0a:	bf00      	nop
 8003e0c:	3738      	adds	r7, #56	; 0x38
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40003800 	.word	0x40003800
 8003e18:	07000c04 	.word	0x07000c04
 8003e1c:	58024400 	.word	0x58024400
 8003e20:	58020800 	.word	0x58020800
 8003e24:	58020400 	.word	0x58020400
 8003e28:	40003c00 	.word	0x40003c00

08003e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_MspInit+0x30>)
 8003e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_MspInit+0x30>)
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_MspInit+0x30>)
 8003e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	58024400 	.word	0x58024400

08003e60 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3330      	adds	r3, #48	; 0x30
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b2db      	uxtb	r3, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	701a      	strb	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_TIM_DisableCounter>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 0201 	bic.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <NMI_Handler+0x4>

08003ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee6:	e7fe      	b.n	8003ee6 <HardFault_Handler+0x4>

08003ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <MemManage_Handler+0x4>

08003eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef2:	e7fe      	b.n	8003ef2 <BusFault_Handler+0x4>

08003ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <UsageFault_Handler+0x4>

08003efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f24:	b598      	push	{r3, r4, r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  if(BeepTimer>0) {						// pocita milisekundy kdy ma bezet PWM pro piezomenic
 8003f28:	4b9f      	ldr	r3, [pc, #636]	; (80041a8 <SysTick_Handler+0x284>)
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d011      	beq.n	8003f54 <SysTick_Handler+0x30>
	    BeepTimer--;
 8003f30:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <SysTick_Handler+0x284>)
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b9b      	ldr	r3, [pc, #620]	; (80041a8 <SysTick_Handler+0x284>)
 8003f3a:	801a      	strh	r2, [r3, #0]
		if(BeepTimer==0) {
 8003f3c:	4b9a      	ldr	r3, [pc, #616]	; (80041a8 <SysTick_Handler+0x284>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <SysTick_Handler+0x30>
		  LL_TIM_DisableAllOutputs(TIM2);
 8003f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f48:	f7ff ffb8 	bl	8003ebc <LL_TIM_DisableAllOutputs>
		  LL_TIM_DisableCounter(TIM2);
 8003f4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f50:	f7ff ffa4 	bl	8003e9c <LL_TIM_DisableCounter>
		}
	  }

	  switch(TouchCounter) {
 8003f54:	4b95      	ldr	r3, [pc, #596]	; (80041ac <SysTick_Handler+0x288>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	f200 8116 	bhi.w	800418a <SysTick_Handler+0x266>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <SysTick_Handler+0x40>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f7d 	.word	0x08003f7d
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003fa9 	.word	0x08003fa9
 8003f70:	08003fe5 	.word	0x08003fe5
 8003f74:	08003ffd 	.word	0x08003ffd
 8003f78:	0800402f 	.word	0x0800402f
		case 0: {
		  TouchCounter = 3;
 8003f7c:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <SysTick_Handler+0x288>)
 8003f7e:	2203      	movs	r2, #3
 8003f80:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin, GPIO_PIN_RESET);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2110      	movs	r1, #16
 8003f86:	488a      	ldr	r0, [pc, #552]	; (80041b0 <SysTick_Handler+0x28c>)
 8003f88:	f000 fed4 	bl	8004d34 <HAL_GPIO_WritePin>
		  LL_SPI_TransmitData8(SPI4, 0x90);		// Y
 8003f8c:	2190      	movs	r1, #144	; 0x90
 8003f8e:	4889      	ldr	r0, [pc, #548]	; (80041b4 <SysTick_Handler+0x290>)
 8003f90:	f7ff ff74 	bl	8003e7c <LL_SPI_TransmitData8>
		  break;
 8003f94:	e0f9      	b.n	800418a <SysTick_Handler+0x266>
		}
		case 1: {
		  TouchCounter = 2;
 8003f96:	4b85      	ldr	r3, [pc, #532]	; (80041ac <SysTick_Handler+0x288>)
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin, GPIO_PIN_SET);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2110      	movs	r1, #16
 8003fa0:	4883      	ldr	r0, [pc, #524]	; (80041b0 <SysTick_Handler+0x28c>)
 8003fa2:	f000 fec7 	bl	8004d34 <HAL_GPIO_WritePin>
		  break;
 8003fa6:	e0f0      	b.n	800418a <SysTick_Handler+0x266>
		}
		case 2: {
		  TouchCounter = 3;
 8003fa8:	4b80      	ldr	r3, [pc, #512]	; (80041ac <SysTick_Handler+0x288>)
 8003faa:	2203      	movs	r2, #3
 8003fac:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin, GPIO_PIN_RESET);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	487f      	ldr	r0, [pc, #508]	; (80041b0 <SysTick_Handler+0x28c>)
 8003fb4:	f000 febe 	bl	8004d34 <HAL_GPIO_WritePin>
		  LL_SPI_ReceiveData8(SPI4);
 8003fb8:	487e      	ldr	r0, [pc, #504]	; (80041b4 <SysTick_Handler+0x290>)
 8003fba:	f7ff ff51 	bl	8003e60 <LL_SPI_ReceiveData8>
		  TouchX = ((LL_SPI_ReceiveData8(SPI4) << 8) | LL_SPI_ReceiveData8(SPI4)) >> 3;
 8003fbe:	487d      	ldr	r0, [pc, #500]	; (80041b4 <SysTick_Handler+0x290>)
 8003fc0:	f7ff ff4e 	bl	8003e60 <LL_SPI_ReceiveData8>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	021c      	lsls	r4, r3, #8
 8003fc8:	487a      	ldr	r0, [pc, #488]	; (80041b4 <SysTick_Handler+0x290>)
 8003fca:	f7ff ff49 	bl	8003e60 <LL_SPI_ReceiveData8>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4323      	orrs	r3, r4
 8003fd2:	10db      	asrs	r3, r3, #3
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <SysTick_Handler+0x294>)
 8003fd8:	801a      	strh	r2, [r3, #0]
		  LL_SPI_TransmitData8(SPI4, 0x90);		// Y
 8003fda:	2190      	movs	r1, #144	; 0x90
 8003fdc:	4875      	ldr	r0, [pc, #468]	; (80041b4 <SysTick_Handler+0x290>)
 8003fde:	f7ff ff4d 	bl	8003e7c <LL_SPI_TransmitData8>
		  break;
 8003fe2:	e0d2      	b.n	800418a <SysTick_Handler+0x266>
		}
		case 3: {
		  TouchCounter = 4;
 8003fe4:	4b71      	ldr	r3, [pc, #452]	; (80041ac <SysTick_Handler+0x288>)
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	701a      	strb	r2, [r3, #0]
		  LL_SPI_TransmitData8(SPI4, 0x00);
 8003fea:	2100      	movs	r1, #0
 8003fec:	4871      	ldr	r0, [pc, #452]	; (80041b4 <SysTick_Handler+0x290>)
 8003fee:	f7ff ff45 	bl	8003e7c <LL_SPI_TransmitData8>
		  LL_SPI_TransmitData8(SPI4, 0x00);
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	486f      	ldr	r0, [pc, #444]	; (80041b4 <SysTick_Handler+0x290>)
 8003ff6:	f7ff ff41 	bl	8003e7c <LL_SPI_TransmitData8>
		  break;
 8003ffa:	e0c6      	b.n	800418a <SysTick_Handler+0x266>
		}
		case 4: {
		  TouchCounter = 5;
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <SysTick_Handler+0x288>)
 8003ffe:	2205      	movs	r2, #5
 8004000:	701a      	strb	r2, [r3, #0]
		  LL_SPI_ReceiveData8(SPI4);
 8004002:	486c      	ldr	r0, [pc, #432]	; (80041b4 <SysTick_Handler+0x290>)
 8004004:	f7ff ff2c 	bl	8003e60 <LL_SPI_ReceiveData8>
		  TouchY = ((LL_SPI_ReceiveData8(SPI4) << 8) | LL_SPI_ReceiveData8(SPI4)) >> 3;
 8004008:	486a      	ldr	r0, [pc, #424]	; (80041b4 <SysTick_Handler+0x290>)
 800400a:	f7ff ff29 	bl	8003e60 <LL_SPI_ReceiveData8>
 800400e:	4603      	mov	r3, r0
 8004010:	021c      	lsls	r4, r3, #8
 8004012:	4868      	ldr	r0, [pc, #416]	; (80041b4 <SysTick_Handler+0x290>)
 8004014:	f7ff ff24 	bl	8003e60 <LL_SPI_ReceiveData8>
 8004018:	4603      	mov	r3, r0
 800401a:	4323      	orrs	r3, r4
 800401c:	10db      	asrs	r3, r3, #3
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b66      	ldr	r3, [pc, #408]	; (80041bc <SysTick_Handler+0x298>)
 8004022:	801a      	strh	r2, [r3, #0]
		  LL_SPI_TransmitData8(SPI4, 0xD0);		// X
 8004024:	21d0      	movs	r1, #208	; 0xd0
 8004026:	4863      	ldr	r0, [pc, #396]	; (80041b4 <SysTick_Handler+0x290>)
 8004028:	f7ff ff28 	bl	8003e7c <LL_SPI_TransmitData8>
		  break;
 800402c:	e0ad      	b.n	800418a <SysTick_Handler+0x266>
		}
		case 5: {
		  TouchCounter = 1;
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <SysTick_Handler+0x288>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
		  LL_SPI_TransmitData8(SPI4, 0x00);
 8004034:	2100      	movs	r1, #0
 8004036:	485f      	ldr	r0, [pc, #380]	; (80041b4 <SysTick_Handler+0x290>)
 8004038:	f7ff ff20 	bl	8003e7c <LL_SPI_TransmitData8>
		  LL_SPI_TransmitData8(SPI4, 0x00);
 800403c:	2100      	movs	r1, #0
 800403e:	485d      	ldr	r0, [pc, #372]	; (80041b4 <SysTick_Handler+0x290>)
 8004040:	f7ff ff1c 	bl	8003e7c <LL_SPI_TransmitData8>

		  if((TouchX > 5) && (TouchY < 4090) && (TouchTimer == 0)) {
 8004044:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <SysTick_Handler+0x294>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2b05      	cmp	r3, #5
 800404a:	f240 8098 	bls.w	800417e <SysTick_Handler+0x25a>
 800404e:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <SysTick_Handler+0x298>)
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f640 72f9 	movw	r2, #4089	; 0xff9
 8004056:	4293      	cmp	r3, r2
 8004058:	f200 8091 	bhi.w	800417e <SysTick_Handler+0x25a>
 800405c:	4b58      	ldr	r3, [pc, #352]	; (80041c0 <SysTick_Handler+0x29c>)
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 808c 	bne.w	800417e <SysTick_Handler+0x25a>
		    if(TouchPointer < 16) {
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <SysTick_Handler+0x2a0>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d815      	bhi.n	800409a <SysTick_Handler+0x176>
			  TouchXadd += TouchX;
 800406e:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <SysTick_Handler+0x294>)
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <SysTick_Handler+0x2a4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4413      	add	r3, r2
 800407a:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <SysTick_Handler+0x2a4>)
 800407c:	6013      	str	r3, [r2, #0]
			  TouchYadd += TouchY;
 800407e:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <SysTick_Handler+0x298>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b51      	ldr	r3, [pc, #324]	; (80041cc <SysTick_Handler+0x2a8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4413      	add	r3, r2
 800408a:	4a50      	ldr	r2, [pc, #320]	; (80041cc <SysTick_Handler+0x2a8>)
 800408c:	6013      	str	r3, [r2, #0]
			  TouchPointer++;
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <SysTick_Handler+0x2a0>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <SysTick_Handler+0x2a0>)
 8004098:	701a      	strb	r2, [r3, #0]
		    }
			if(TouchPointer == 1) {
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <SysTick_Handler+0x2a0>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d122      	bne.n	80040e8 <SysTick_Handler+0x1c4>
			  TouchX = TouchX - TouchError;
 80040a2:	4b45      	ldr	r3, [pc, #276]	; (80041b8 <SysTick_Handler+0x294>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	3b64      	subs	r3, #100	; 0x64
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <SysTick_Handler+0x294>)
 80040ac:	801a      	strh	r2, [r3, #0]
			  TouchY = TouchY - TouchError;
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <SysTick_Handler+0x298>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	3b64      	subs	r3, #100	; 0x64
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <SysTick_Handler+0x298>)
 80040b8:	801a      	strh	r2, [r3, #0]
			  if(((TouchXadd - TouchX) > (TouchError * 2)) || ((TouchYadd - TouchY) > (TouchError * 2))) {
 80040ba:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <SysTick_Handler+0x2a4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3e      	ldr	r2, [pc, #248]	; (80041b8 <SysTick_Handler+0x294>)
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	2bc8      	cmp	r3, #200	; 0xc8
 80040c6:	d806      	bhi.n	80040d6 <SysTick_Handler+0x1b2>
 80040c8:	4b40      	ldr	r3, [pc, #256]	; (80041cc <SysTick_Handler+0x2a8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <SysTick_Handler+0x298>)
 80040ce:	8812      	ldrh	r2, [r2, #0]
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	2bc8      	cmp	r3, #200	; 0xc8
 80040d4:	d908      	bls.n	80040e8 <SysTick_Handler+0x1c4>
			    TouchXadd = 0;
 80040d6:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <SysTick_Handler+0x2a4>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
				TouchYadd = 0;
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <SysTick_Handler+0x2a8>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
			    TouchPointer = 0;
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <SysTick_Handler+0x2a0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
			  }
			}
			if(TouchPointer == 16) {
 80040e8:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <SysTick_Handler+0x2a0>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d14a      	bne.n	8004186 <SysTick_Handler+0x262>
			  TouchXadd = TouchXadd >> 4;
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <SysTick_Handler+0x2a4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	4a34      	ldr	r2, [pc, #208]	; (80041c8 <SysTick_Handler+0x2a4>)
 80040f8:	6013      	str	r3, [r2, #0]
			  TouchYadd = TouchYadd >> 4;
 80040fa:	4b34      	ldr	r3, [pc, #208]	; (80041cc <SysTick_Handler+0x2a8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	4a32      	ldr	r2, [pc, #200]	; (80041cc <SysTick_Handler+0x2a8>)
 8004102:	6013      	str	r3, [r2, #0]
			  TouchX = TouchXadd - TouchError;
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <SysTick_Handler+0x2a4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b64      	subs	r3, #100	; 0x64
 800410c:	b29a      	uxth	r2, r3
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <SysTick_Handler+0x294>)
 8004110:	801a      	strh	r2, [r3, #0]
			  TouchY = TouchYadd - TouchError;
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <SysTick_Handler+0x2a8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b64      	subs	r3, #100	; 0x64
 800411a:	b29a      	uxth	r2, r3
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <SysTick_Handler+0x298>)
 800411e:	801a      	strh	r2, [r3, #0]
			  if(((TouchXadd - TouchX) < (TouchError * 2)) && ((TouchYadd - TouchY) < (TouchError * 2))) {
 8004120:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <SysTick_Handler+0x2a4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <SysTick_Handler+0x294>)
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	2bc7      	cmp	r3, #199	; 0xc7
 800412c:	d82b      	bhi.n	8004186 <SysTick_Handler+0x262>
 800412e:	4b27      	ldr	r3, [pc, #156]	; (80041cc <SysTick_Handler+0x2a8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <SysTick_Handler+0x298>)
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	2bc7      	cmp	r3, #199	; 0xc7
 800413a:	d824      	bhi.n	8004186 <SysTick_Handler+0x262>

				TouchXresult = (( TouchXadd * 800 ) >> 12 );	// prepocita na souradnice displeje
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <SysTick_Handler+0x2a4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	0b1b      	lsrs	r3, r3, #12
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <SysTick_Handler+0x2ac>)
 800414e:	801a      	strh	r2, [r3, #0]
				TouchYresult = 480 - (( TouchYadd * 480 ) >> 12 );
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <SysTick_Handler+0x2a8>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	0b1b      	lsrs	r3, r3, #12
 800415e:	b29b      	uxth	r3, r3
 8004160:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004164:	b29a      	uxth	r2, r3
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <SysTick_Handler+0x2b0>)
 8004168:	801a      	strh	r2, [r3, #0]
				TouchPointer = 0;
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <SysTick_Handler+0x2a0>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
				TouchXadd = 0;
 8004170:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <SysTick_Handler+0x2a4>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
				TouchYadd = 0;
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <SysTick_Handler+0x2a8>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
			if(TouchPointer == 16) {
 800417c:	e003      	b.n	8004186 <SysTick_Handler+0x262>
		      }
			}
		  }
		  else {
			TouchPointer = 0;
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <SysTick_Handler+0x2a0>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004184:	e000      	b.n	8004188 <SysTick_Handler+0x264>
			if(TouchPointer == 16) {
 8004186:	bf00      	nop
		  break;
 8004188:	bf00      	nop
		}
	  }
	  if(TouchTimer > 0) TouchTimer--;
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <SysTick_Handler+0x29c>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <SysTick_Handler+0x27a>
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <SysTick_Handler+0x29c>)
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <SysTick_Handler+0x29c>)
 800419c:	801a      	strh	r2, [r3, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800419e:	f000 fadd 	bl	800475c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd98      	pop	{r3, r4, r7, pc}
 80041a6:	bf00      	nop
 80041a8:	24000030 	.word	0x24000030
 80041ac:	24000032 	.word	0x24000032
 80041b0:	58021000 	.word	0x58021000
 80041b4:	40013400 	.word	0x40013400
 80041b8:	24000034 	.word	0x24000034
 80041bc:	24000036 	.word	0x24000036
 80041c0:	24000046 	.word	0x24000046
 80041c4:	24000044 	.word	0x24000044
 80041c8:	24000038 	.word	0x24000038
 80041cc:	2400003c 	.word	0x2400003c
 80041d0:	24000040 	.word	0x24000040
 80041d4:	24000042 	.word	0x24000042

080041d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041dc:	4b37      	ldr	r3, [pc, #220]	; (80042bc <SystemInit+0xe4>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	4a36      	ldr	r2, [pc, #216]	; (80042bc <SystemInit+0xe4>)
 80041e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <SystemInit+0xe8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d807      	bhi.n	8004208 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041f8:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <SystemInit+0xe8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 030f 	bic.w	r3, r3, #15
 8004200:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <SystemInit+0xe8>)
 8004202:	f043 0307 	orr.w	r3, r3, #7
 8004206:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <SystemInit+0xec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <SystemInit+0xec>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <SystemInit+0xec>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <SystemInit+0xec>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4929      	ldr	r1, [pc, #164]	; (80042c4 <SystemInit+0xec>)
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <SystemInit+0xf0>)
 8004222:	4013      	ands	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004226:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <SystemInit+0xe8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <SystemInit+0xe8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 030f 	bic.w	r3, r3, #15
 800423a:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <SystemInit+0xe8>)
 800423c:	f043 0307 	orr.w	r3, r3, #7
 8004240:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <SystemInit+0xec>)
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <SystemInit+0xec>)
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <SystemInit+0xec>)
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <SystemInit+0xec>)
 8004256:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <SystemInit+0xf4>)
 8004258:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <SystemInit+0xec>)
 800425c:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <SystemInit+0xf8>)
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <SystemInit+0xec>)
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <SystemInit+0xfc>)
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <SystemInit+0xec>)
 8004268:	2200      	movs	r2, #0
 800426a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <SystemInit+0xec>)
 800426e:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <SystemInit+0xfc>)
 8004270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <SystemInit+0xec>)
 8004274:	2200      	movs	r2, #0
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <SystemInit+0xec>)
 800427a:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <SystemInit+0xfc>)
 800427c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <SystemInit+0xec>)
 8004280:	2200      	movs	r2, #0
 8004282:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <SystemInit+0xec>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <SystemInit+0xec>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <SystemInit+0xec>)
 8004292:	2200      	movs	r2, #0
 8004294:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <SystemInit+0x100>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <SystemInit+0x104>)
 800429c:	4013      	ands	r3, r2
 800429e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a2:	d202      	bcs.n	80042aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <SystemInit+0x108>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <SystemInit+0x10c>)
 80042ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80042b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00
 80042c0:	52002000 	.word	0x52002000
 80042c4:	58024400 	.word	0x58024400
 80042c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80042cc:	02020200 	.word	0x02020200
 80042d0:	01ff0000 	.word	0x01ff0000
 80042d4:	01010280 	.word	0x01010280
 80042d8:	5c001000 	.word	0x5c001000
 80042dc:	ffff0000 	.word	0xffff0000
 80042e0:	51008108 	.word	0x51008108
 80042e4:	52004000 	.word	0x52004000

080042e8 <LL_AHB4_GRP1_EnableClock>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <LL_AHB4_GRP1_EnableClock+0x34>)
 80042f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042f6:	4909      	ldr	r1, [pc, #36]	; (800431c <LL_AHB4_GRP1_EnableClock+0x34>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <LL_AHB4_GRP1_EnableClock+0x34>)
 8004302:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400

08004320 <LL_APB1_GRP1_EnableClock>:
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <LL_APB1_GRP1_EnableClock+0x34>)
 800432a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800432e:	4909      	ldr	r1, [pc, #36]	; (8004354 <LL_APB1_GRP1_EnableClock+0x34>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <LL_APB1_GRP1_EnableClock+0x34>)
 800433a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4013      	ands	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400

08004358 <LL_TIM_DisableARRPreload>:
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_TIM_OC_DisableFast>:
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d028      	beq.n	80043da <LL_TIM_OC_DisableFast+0x62>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d023      	beq.n	80043d6 <LL_TIM_OC_DisableFast+0x5e>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d01e      	beq.n	80043d2 <LL_TIM_OC_DisableFast+0x5a>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d019      	beq.n	80043ce <LL_TIM_OC_DisableFast+0x56>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d013      	beq.n	80043ca <LL_TIM_OC_DisableFast+0x52>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d00d      	beq.n	80043c6 <LL_TIM_OC_DisableFast+0x4e>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d007      	beq.n	80043c2 <LL_TIM_OC_DisableFast+0x4a>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d101      	bne.n	80043be <LL_TIM_OC_DisableFast+0x46>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e00e      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043be:	2308      	movs	r3, #8
 80043c0:	e00c      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043c2:	2306      	movs	r3, #6
 80043c4:	e00a      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043c6:	2305      	movs	r3, #5
 80043c8:	e008      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e006      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043ce:	2303      	movs	r3, #3
 80043d0:	e004      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e002      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <LL_TIM_OC_DisableFast+0x64>
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3318      	adds	r3, #24
 80043e2:	4619      	mov	r1, r3
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <LL_TIM_OC_DisableFast+0x9c>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	440b      	add	r3, r1
 80043ec:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	4908      	ldr	r1, [pc, #32]	; (8004418 <LL_TIM_OC_DisableFast+0xa0>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	4619      	mov	r1, r3
 80043fa:	2304      	movs	r3, #4
 80043fc:	408b      	lsls	r3, r1
 80043fe:	43db      	mvns	r3, r3
 8004400:	401a      	ands	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	0800a9dc 	.word	0x0800a9dc
 8004418:	0800a9e8 	.word	0x0800a9e8

0800441c <LL_TIM_OC_EnablePreload>:
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d028      	beq.n	800447e <LL_TIM_OC_EnablePreload+0x62>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d023      	beq.n	800447a <LL_TIM_OC_EnablePreload+0x5e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b10      	cmp	r3, #16
 8004436:	d01e      	beq.n	8004476 <LL_TIM_OC_EnablePreload+0x5a>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d019      	beq.n	8004472 <LL_TIM_OC_EnablePreload+0x56>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004444:	d013      	beq.n	800446e <LL_TIM_OC_EnablePreload+0x52>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d00d      	beq.n	800446a <LL_TIM_OC_EnablePreload+0x4e>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d007      	beq.n	8004466 <LL_TIM_OC_EnablePreload+0x4a>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d101      	bne.n	8004462 <LL_TIM_OC_EnablePreload+0x46>
 800445e:	2307      	movs	r3, #7
 8004460:	e00e      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 8004462:	2308      	movs	r3, #8
 8004464:	e00c      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 8004466:	2306      	movs	r3, #6
 8004468:	e00a      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 800446a:	2305      	movs	r3, #5
 800446c:	e008      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 800446e:	2304      	movs	r3, #4
 8004470:	e006      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 8004472:	2303      	movs	r3, #3
 8004474:	e004      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 8004476:	2302      	movs	r3, #2
 8004478:	e002      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_TIM_OC_EnablePreload+0x64>
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3318      	adds	r3, #24
 8004486:	4619      	mov	r1, r3
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <LL_TIM_OC_EnablePreload+0x98>)
 800448c:	5cd3      	ldrb	r3, [r2, r3]
 800448e:	440b      	add	r3, r1
 8004490:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <LL_TIM_OC_EnablePreload+0x9c>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	4619      	mov	r1, r3
 800449e:	2308      	movs	r3, #8
 80044a0:	408b      	lsls	r3, r1
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	0800a9dc 	.word	0x0800a9dc
 80044b8:	0800a9e8 	.word	0x0800a9e8

080044bc <LL_TIM_SetClockSource>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <LL_TIM_SetClockSource+0x28>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	fffebff8 	.word	0xfffebff8

080044e8 <LL_TIM_SetTriggerOutput>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_TIM_DisableMasterSlaveMode>:
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b094      	sub	sp, #80	; 0x50
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	2220      	movs	r2, #32
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f003 fabc 	bl	8007acc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004564:	2001      	movs	r0, #1
 8004566:	f7ff fedb 	bl	8004320 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 480;
 800456a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800456e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004570:	2300      	movs	r3, #0
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8004574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800457a:	2300      	movs	r3, #0
 800457c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800457e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004588:	f002 febc 	bl	8007304 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800458c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004590:	f7ff fee2 	bl	8004358 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004594:	2100      	movs	r1, #0
 8004596:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800459a:	f7ff ff8f 	bl	80044bc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 800459e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045a6:	f7ff ff39 	bl	800441c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80045aa:	2360      	movs	r3, #96	; 0x60
 80045ac:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80045be:	f107 031c 	add.w	r3, r7, #28
 80045c2:	461a      	mov	r2, r3
 80045c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045cc:	f002 ff2e 	bl	800742c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 80045d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045d8:	f7ff fece 	bl	8004378 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80045dc:	2100      	movs	r1, #0
 80045de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045e2:	f7ff ff81 	bl	80044e8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80045e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045ea:	f7ff ff90 	bl	800450e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7ff fe7a 	bl	80042e8 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80045f4:	2308      	movs	r3, #8
 80045f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80045f8:	2302      	movs	r3, #2
 80045fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004608:	2301      	movs	r3, #1
 800460a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4803      	ldr	r0, [pc, #12]	; (8004620 <MX_TIM2_Init+0xf0>)
 8004612:	f002 fcb9 	bl	8006f88 <LL_GPIO_Init>

}
 8004616:	bf00      	nop
 8004618:	3750      	adds	r7, #80	; 0x50
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	58020000 	.word	0x58020000

08004624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800465c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004628:	f7ff fdd6 	bl	80041d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800462c:	480c      	ldr	r0, [pc, #48]	; (8004660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800462e:	490d      	ldr	r1, [pc, #52]	; (8004664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004630:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004634:	e002      	b.n	800463c <LoopCopyDataInit>

08004636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463a:	3304      	adds	r3, #4

0800463c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800463c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004640:	d3f9      	bcc.n	8004636 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004642:	4a0a      	ldr	r2, [pc, #40]	; (800466c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004644:	4c0a      	ldr	r4, [pc, #40]	; (8004670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004648:	e001      	b.n	800464e <LoopFillZerobss>

0800464a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800464c:	3204      	adds	r2, #4

0800464e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004650:	d3fb      	bcc.n	800464a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004652:	f003 fa17 	bl	8007a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004656:	f7fe f80b 	bl	8002670 <main>
  bx  lr
 800465a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800465c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004660:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004664:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8004668:	0800a9fc 	.word	0x0800a9fc
  ldr r2, =_sbss
 800466c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8004670:	24000220 	.word	0x24000220

08004674 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004674:	e7fe      	b.n	8004674 <ADC3_IRQHandler>
	...

08004678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467e:	2003      	movs	r0, #3
 8004680:	f000 f976 	bl	8004970 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004684:	f001 f91e 	bl	80058c4 <HAL_RCC_GetSysClockFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_Init+0x68>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	4913      	ldr	r1, [pc, #76]	; (80046e4 <HAL_Init+0x6c>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_Init+0x68>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <HAL_Init+0x6c>)
 80046ac:	5cd3      	ldrb	r3, [r2, r3]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <HAL_Init+0x70>)
 80046ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046bc:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <HAL_Init+0x74>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046c2:	200f      	movs	r0, #15
 80046c4:	f000 f814 	bl	80046f0 <HAL_InitTick>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e002      	b.n	80046d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046d2:	f7ff fbab 	bl	8003e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58024400 	.word	0x58024400
 80046e4:	0800a9cc 	.word	0x0800a9cc
 80046e8:	24000004 	.word	0x24000004
 80046ec:	24000000 	.word	0x24000000

080046f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_InitTick+0x60>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e021      	b.n	8004748 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_InitTick+0x64>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_InitTick+0x60>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004712:	fbb3 f3f1 	udiv	r3, r3, r1
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f94d 	bl	80049ba <HAL_SYSTICK_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00e      	b.n	8004748 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0f      	cmp	r3, #15
 800472e:	d80a      	bhi.n	8004746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004730:	2200      	movs	r2, #0
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f000 f925 	bl	8004986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800473c:	4a06      	ldr	r2, [pc, #24]	; (8004758 <HAL_InitTick+0x68>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2400000c 	.word	0x2400000c
 8004754:	24000000 	.word	0x24000000
 8004758:	24000008 	.word	0x24000008

0800475c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_IncTick+0x20>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_IncTick+0x24>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4413      	add	r3, r2
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_IncTick+0x24>)
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2400000c 	.word	0x2400000c
 8004780:	2400021c 	.word	0x2400021c

08004784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return uwTick;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_GetTick+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2400021c 	.word	0x2400021c

0800479c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff ffee 	bl	8004784 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d005      	beq.n	80047c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_Delay+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c2:	bf00      	nop
 80047c4:	f7ff ffde 	bl	8004784 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d8f7      	bhi.n	80047c4 <HAL_Delay+0x28>
  {
  }
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2400000c 	.word	0x2400000c

080047e4 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_SetFMCMemorySwappingConfig+0x24>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	52004000 	.word	0x52004000

0800480c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00
 8004850:	05fa0000 	.word	0x05fa0000

08004854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	6039      	str	r1, [r7, #0]
 800487a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800487c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	db0a      	blt.n	800489a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	490c      	ldr	r1, [pc, #48]	; (80048bc <__NVIC_SetPriority+0x4c>)
 800488a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800488e:	0112      	lsls	r2, r2, #4
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	440b      	add	r3, r1
 8004894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004898:	e00a      	b.n	80048b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4908      	ldr	r1, [pc, #32]	; (80048c0 <__NVIC_SetPriority+0x50>)
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	3b04      	subs	r3, #4
 80048a8:	0112      	lsls	r2, r2, #4
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	440b      	add	r3, r1
 80048ae:	761a      	strb	r2, [r3, #24]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	e000e100 	.word	0xe000e100
 80048c0:	e000ed00 	.word	0xe000ed00

080048c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f1c3 0307 	rsb	r3, r3, #7
 80048de:	2b04      	cmp	r3, #4
 80048e0:	bf28      	it	cs
 80048e2:	2304      	movcs	r3, #4
 80048e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d902      	bls.n	80048f4 <NVIC_EncodePriority+0x30>
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3b03      	subs	r3, #3
 80048f2:	e000      	b.n	80048f6 <NVIC_EncodePriority+0x32>
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	401a      	ands	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800490c:	f04f 31ff 	mov.w	r1, #4294967295
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	43d9      	mvns	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	4313      	orrs	r3, r2
         );
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800493c:	d301      	bcc.n	8004942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800493e:	2301      	movs	r3, #1
 8004940:	e00f      	b.n	8004962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <SysTick_Config+0x40>)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800494a:	210f      	movs	r1, #15
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	f7ff ff8e 	bl	8004870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <SysTick_Config+0x40>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <SysTick_Config+0x40>)
 800495c:	2207      	movs	r2, #7
 800495e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	e000e010 	.word	0xe000e010

08004970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff47 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	4603      	mov	r3, r0
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004994:	f7ff ff5e 	bl	8004854 <__NVIC_GetPriorityGrouping>
 8004998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f7ff ff90 	bl	80048c4 <NVIC_EncodePriority>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff5f 	bl	8004870 <__NVIC_SetPriority>
}
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffb2 	bl	800492c <SysTick_Config>
 80049c8:	4603      	mov	r3, r0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049e2:	4b89      	ldr	r3, [pc, #548]	; (8004c08 <HAL_GPIO_Init+0x234>)
 80049e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049e6:	e194      	b.n	8004d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8186 	beq.w	8004d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d005      	beq.n	8004a18 <HAL_GPIO_Init+0x44>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d130      	bne.n	8004a7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a4e:	2201      	movs	r2, #1
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0201 	and.w	r2, r3, #1
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d017      	beq.n	8004ab6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	2203      	movs	r2, #3
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d123      	bne.n	8004b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	08da      	lsrs	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80e0 	beq.w	8004d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_GPIO_Init+0x238>)
 8004b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b52:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <HAL_GPIO_Init+0x238>)
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_GPIO_Init+0x238>)
 8004b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b6a:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <HAL_GPIO_Init+0x23c>)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	3302      	adds	r3, #2
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <HAL_GPIO_Init+0x240>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d052      	beq.n	8004c3c <HAL_GPIO_Init+0x268>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_GPIO_Init+0x244>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_GPIO_Init+0x22e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_GPIO_Init+0x248>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02b      	beq.n	8004bfe <HAL_GPIO_Init+0x22a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <HAL_GPIO_Init+0x24c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d025      	beq.n	8004bfa <HAL_GPIO_Init+0x226>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <HAL_GPIO_Init+0x250>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <HAL_GPIO_Init+0x222>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_GPIO_Init+0x254>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d019      	beq.n	8004bf2 <HAL_GPIO_Init+0x21e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	; (8004c2c <HAL_GPIO_Init+0x258>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_GPIO_Init+0x21a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_GPIO_Init+0x25c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00d      	beq.n	8004bea <HAL_GPIO_Init+0x216>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_GPIO_Init+0x260>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <HAL_GPIO_Init+0x212>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_GPIO_Init+0x264>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_GPIO_Init+0x20e>
 8004bde:	2309      	movs	r3, #9
 8004be0:	e02d      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004be2:	230a      	movs	r3, #10
 8004be4:	e02b      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004be6:	2308      	movs	r3, #8
 8004be8:	e029      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bea:	2307      	movs	r3, #7
 8004bec:	e027      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e025      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	e023      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e021      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e01f      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e01d      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e01b      	b.n	8004c3e <HAL_GPIO_Init+0x26a>
 8004c06:	bf00      	nop
 8004c08:	58000080 	.word	0x58000080
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	58000400 	.word	0x58000400
 8004c14:	58020000 	.word	0x58020000
 8004c18:	58020400 	.word	0x58020400
 8004c1c:	58020800 	.word	0x58020800
 8004c20:	58020c00 	.word	0x58020c00
 8004c24:	58021000 	.word	0x58021000
 8004c28:	58021400 	.word	0x58021400
 8004c2c:	58021800 	.word	0x58021800
 8004c30:	58021c00 	.word	0x58021c00
 8004c34:	58022000 	.word	0x58022000
 8004c38:	58022400 	.word	0x58022400
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	f002 0203 	and.w	r2, r2, #3
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	4093      	lsls	r3, r2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c4e:	4938      	ldr	r1, [pc, #224]	; (8004d30 <HAL_GPIO_Init+0x35c>)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	3302      	adds	r3, #2
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f ae63 	bne.w	80049e8 <HAL_GPIO_Init+0x14>
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	3724      	adds	r7, #36	; 0x24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	58000400 	.word	0x58000400

08004d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	807b      	strh	r3, [r7, #2]
 8004d40:	4613      	mov	r3, r2
 8004d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d44:	787b      	ldrb	r3, [r7, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d50:	e003      	b.n	8004d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d52:	887b      	ldrh	r3, [r7, #2]
 8004d54:	041a      	lsls	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	619a      	str	r2, [r3, #24]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e07f      	b.n	8004e7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd f8cc 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2224      	movs	r2, #36	; 0x24
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	e006      	b.n	8004df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d104      	bne.n	8004e02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_I2C_Init+0x11c>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	02008000 	.word	0x02008000

08004e88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	817b      	strh	r3, [r7, #10]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	f040 80da 	bne.w	800505e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_I2C_Master_Transmit+0x30>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0d3      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ec0:	f7ff fc60 	bl	8004784 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f9e6 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0be      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2210      	movs	r2, #16
 8004eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	893a      	ldrh	r2, [r7, #8]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2bff      	cmp	r3, #255	; 0xff
 8004f12:	d90e      	bls.n	8004f32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	22ff      	movs	r2, #255	; 0xff
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	8979      	ldrh	r1, [r7, #10]
 8004f22:	4b51      	ldr	r3, [pc, #324]	; (8005068 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fbdc 	bl	80056e8 <I2C_TransferConfig>
 8004f30:	e06c      	b.n	800500c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	8979      	ldrh	r1, [r7, #10]
 8004f44:	4b48      	ldr	r3, [pc, #288]	; (8005068 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fbcb 	bl	80056e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f52:	e05b      	b.n	800500c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f9e3 	bl	8005324 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e07b      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d034      	beq.n	800500c <HAL_I2C_Master_Transmit+0x184>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d130      	bne.n	800500c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f975 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e04d      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2bff      	cmp	r3, #255	; 0xff
 8004fcc:	d90e      	bls.n	8004fec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	22ff      	movs	r2, #255	; 0xff
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	8979      	ldrh	r1, [r7, #10]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fb7f 	bl	80056e8 <I2C_TransferConfig>
 8004fea:	e00f      	b.n	800500c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	8979      	ldrh	r1, [r7, #10]
 8004ffe:	2300      	movs	r3, #0
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb6e 	bl	80056e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d19e      	bne.n	8004f54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f9c2 	bl	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e01a      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2220      	movs	r2, #32
 8005030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_I2C_Master_Transmit+0x1e4>)
 800503e:	400b      	ands	r3, r1
 8005040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	80002000 	.word	0x80002000
 800506c:	fe00e800 	.word	0xfe00e800

08005070 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	460b      	mov	r3, r1
 800507e:	817b      	strh	r3, [r7, #10]
 8005080:	4613      	mov	r3, r2
 8005082:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	f040 80db 	bne.w	8005248 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x30>
 800509c:	2302      	movs	r3, #2
 800509e:	e0d4      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050a8:	f7ff fb6c 	bl	8004784 <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2319      	movs	r3, #25
 80050b4:	2201      	movs	r2, #1
 80050b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f8f2 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0bf      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2222      	movs	r2, #34	; 0x22
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2210      	movs	r2, #16
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	893a      	ldrh	r2, [r7, #8]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2bff      	cmp	r3, #255	; 0xff
 80050fa:	d90e      	bls.n	800511a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	22ff      	movs	r2, #255	; 0xff
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	b2da      	uxtb	r2, r3
 8005108:	8979      	ldrh	r1, [r7, #10]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <HAL_I2C_Master_Receive+0x1e4>)
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fae8 	bl	80056e8 <I2C_TransferConfig>
 8005118:	e06d      	b.n	80051f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	b2da      	uxtb	r2, r3
 800512a:	8979      	ldrh	r1, [r7, #10]
 800512c:	4b49      	ldr	r3, [pc, #292]	; (8005254 <HAL_I2C_Master_Receive+0x1e4>)
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fad7 	bl	80056e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800513a:	e05c      	b.n	80051f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	6a39      	ldr	r1, [r7, #32]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f96b 	bl	800541c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e07c      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d034      	beq.n	80051f6 <HAL_I2C_Master_Receive+0x186>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d130      	bne.n	80051f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f880 	bl	80052a4 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e04d      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2bff      	cmp	r3, #255	; 0xff
 80051b6:	d90e      	bls.n	80051d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	22ff      	movs	r2, #255	; 0xff
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	8979      	ldrh	r1, [r7, #10]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa8a 	bl	80056e8 <I2C_TransferConfig>
 80051d4:	e00f      	b.n	80051f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fa79 	bl	80056e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d19d      	bne.n	800513c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	6a39      	ldr	r1, [r7, #32]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f8cd 	bl	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01a      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_I2C_Master_Receive+0x1e8>)
 8005228:	400b      	ands	r3, r1
 800522a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	80002400 	.word	0x80002400
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d103      	bne.n	800527a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d007      	beq.n	8005298 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	619a      	str	r2, [r3, #24]
  }
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b4:	e022      	b.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d01e      	beq.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7ff fa61 	bl	8004784 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e00f      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d0cd      	beq.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005330:	e02c      	b.n	800538c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f8ea 	bl	8005510 <I2C_IsErrorOccurred>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e02a      	b.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d01e      	beq.n	800538c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7ff fa19 	bl	8004784 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e007      	b.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d1cb      	bne.n	8005332 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053b0:	e028      	b.n	8005404 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f8aa 	bl	8005510 <I2C_IsErrorOccurred>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e026      	b.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7ff f9dd 	bl	8004784 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d113      	bne.n	8005404 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e007      	b.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d1cf      	bne.n	80053b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005428:	e064      	b.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f86e 	bl	8005510 <I2C_IsErrorOccurred>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e062      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b20      	cmp	r3, #32
 800544a:	d138      	bne.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d105      	bne.n	8005466 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e04e      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d107      	bne.n	8005484 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2210      	movs	r2, #16
 800547a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2204      	movs	r2, #4
 8005480:	645a      	str	r2, [r3, #68]	; 0x44
 8005482:	e002      	b.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2220      	movs	r2, #32
 8005490:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b1b      	ldr	r3, [pc, #108]	; (800550c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800549e:	400b      	ands	r3, r1
 80054a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e022      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7ff f961 	bl	8004784 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10f      	bne.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e007      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d193      	bne.n	800542a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	fe00e800 	.word	0xfe00e800

08005510 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d075      	beq.n	8005628 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2210      	movs	r2, #16
 8005542:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005544:	e056      	b.n	80055f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d052      	beq.n	80055f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7ff f919 	bl	8004784 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_IsErrorOccurred+0x54>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d147      	bne.n	80055f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005576:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	d12e      	bne.n	80055e6 <I2C_IsErrorOccurred+0xd6>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800558e:	d02a      	beq.n	80055e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	2b20      	cmp	r3, #32
 8005594:	d027      	beq.n	80055e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055a6:	f7ff f8ed 	bl	8004784 <HAL_GetTick>
 80055aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ac:	e01b      	b.n	80055e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055ae:	f7ff f8e9 	bl	8004784 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b19      	cmp	r3, #25
 80055ba:	d914      	bls.n	80055e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d1dc      	bne.n	80055ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d003      	beq.n	800560a <I2C_IsErrorOccurred+0xfa>
 8005602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005606:	2b00      	cmp	r3, #0
 8005608:	d09d      	beq.n	8005546 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800560a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800560e:	2b00      	cmp	r3, #0
 8005610:	d103      	bne.n	800561a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2220      	movs	r2, #32
 8005618:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	f043 0308 	orr.w	r3, r3, #8
 8005662:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800566c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01c      	beq.n	80056d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff fddc 	bl	800525c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <I2C_IsErrorOccurred+0x1d4>)
 80056b0:	400b      	ands	r3, r1
 80056b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80056d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	fe00e800 	.word	0xfe00e800

080056e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	460b      	mov	r3, r1
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	4613      	mov	r3, r2
 80056f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005700:	7a7b      	ldrb	r3, [r7, #9]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005708:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	4313      	orrs	r3, r2
 8005712:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005716:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	0d5b      	lsrs	r3, r3, #21
 8005722:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <I2C_TransferConfig+0x60>)
 8005728:	430b      	orrs	r3, r1
 800572a:	43db      	mvns	r3, r3
 800572c:	ea02 0103 	and.w	r1, r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	03ff63ff 	.word	0x03ff63ff

0800574c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b20      	cmp	r3, #32
 8005760:	d138      	bne.n	80057d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800576c:	2302      	movs	r3, #2
 800576e:	e032      	b.n	80057d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800579e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d139      	bne.n	800586c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005802:	2302      	movs	r3, #2
 8005804:	e033      	b.n	800586e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2224      	movs	r2, #36	; 0x24
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4906      	ldr	r1, [pc, #24]	; (80058c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	604b      	str	r3, [r1, #4]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	58024400 	.word	0x58024400
 80058c0:	58000400 	.word	0x58000400

080058c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	; 0x24
 80058c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ca:	4bb3      	ldr	r3, [pc, #716]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d2:	2b18      	cmp	r3, #24
 80058d4:	f200 8155 	bhi.w	8005b82 <HAL_RCC_GetSysClockFreq+0x2be>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005945 	.word	0x08005945
 80058e4:	08005b83 	.word	0x08005b83
 80058e8:	08005b83 	.word	0x08005b83
 80058ec:	08005b83 	.word	0x08005b83
 80058f0:	08005b83 	.word	0x08005b83
 80058f4:	08005b83 	.word	0x08005b83
 80058f8:	08005b83 	.word	0x08005b83
 80058fc:	08005b83 	.word	0x08005b83
 8005900:	0800596b 	.word	0x0800596b
 8005904:	08005b83 	.word	0x08005b83
 8005908:	08005b83 	.word	0x08005b83
 800590c:	08005b83 	.word	0x08005b83
 8005910:	08005b83 	.word	0x08005b83
 8005914:	08005b83 	.word	0x08005b83
 8005918:	08005b83 	.word	0x08005b83
 800591c:	08005b83 	.word	0x08005b83
 8005920:	08005971 	.word	0x08005971
 8005924:	08005b83 	.word	0x08005b83
 8005928:	08005b83 	.word	0x08005b83
 800592c:	08005b83 	.word	0x08005b83
 8005930:	08005b83 	.word	0x08005b83
 8005934:	08005b83 	.word	0x08005b83
 8005938:	08005b83 	.word	0x08005b83
 800593c:	08005b83 	.word	0x08005b83
 8005940:	08005977 	.word	0x08005977
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005944:	4b94      	ldr	r3, [pc, #592]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005950:	4b91      	ldr	r3, [pc, #580]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	4a90      	ldr	r2, [pc, #576]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
 8005960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005962:	e111      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005964:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005966:	61bb      	str	r3, [r7, #24]
    break;
 8005968:	e10e      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800596a:	4b8d      	ldr	r3, [pc, #564]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800596c:	61bb      	str	r3, [r7, #24]
    break;
 800596e:	e10b      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005970:	4b8c      	ldr	r3, [pc, #560]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005972:	61bb      	str	r3, [r7, #24]
    break;
 8005974:	e108      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005976:	4b88      	ldr	r3, [pc, #544]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005980:	4b85      	ldr	r3, [pc, #532]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800598c:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005996:	4b80      	ldr	r3, [pc, #512]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	08db      	lsrs	r3, r3, #3
 800599c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80e1 	beq.w	8005b7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	f000 8083 	beq.w	8005ac8 <HAL_RCC_GetSysClockFreq+0x204>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f200 80a1 	bhi.w	8005b0c <HAL_RCC_GetSysClockFreq+0x248>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x114>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d056      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059d6:	e099      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d8:	4b6f      	ldr	r3, [pc, #444]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d02d      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059e4:	4b6c      	ldr	r3, [pc, #432]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	08db      	lsrs	r3, r3, #3
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	4a6b      	ldr	r2, [pc, #428]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
 80059f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0e:	4b62      	ldr	r3, [pc, #392]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005a3e:	e087      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005bac <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a52:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a82:	e065      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b40      	ldr	r3, [pc, #256]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aaa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac6:	e043      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005bb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b0a:	e021      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b74:	ee17 3a90 	vmov	r3, s15
 8005b78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
    break;
 8005b80:	e002      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b84:	61bb      	str	r3, [r7, #24]
    break;
 8005b86:	bf00      	nop
  }

  return sysclockfreq;
 8005b88:	69bb      	ldr	r3, [r7, #24]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3724      	adds	r7, #36	; 0x24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	03d09000 	.word	0x03d09000
 8005ba0:	003d0900 	.word	0x003d0900
 8005ba4:	007a1200 	.word	0x007a1200
 8005ba8:	46000000 	.word	0x46000000
 8005bac:	4c742400 	.word	0x4c742400
 8005bb0:	4a742400 	.word	0x4a742400
 8005bb4:	4af42400 	.word	0x4af42400

08005bb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e0f1      	b.n	8005dae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a78      	ldr	r2, [pc, #480]	; (8005db8 <HAL_SPI_Init+0x200>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <HAL_SPI_Init+0x42>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a77      	ldr	r2, [pc, #476]	; (8005dbc <HAL_SPI_Init+0x204>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00a      	beq.n	8005bfa <HAL_SPI_Init+0x42>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a75      	ldr	r2, [pc, #468]	; (8005dc0 <HAL_SPI_Init+0x208>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d005      	beq.n	8005bfa <HAL_SPI_Init+0x42>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b0f      	cmp	r3, #15
 8005bf4:	d901      	bls.n	8005bfa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e0d9      	b.n	8005dae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 ff66 	bl	8006acc <SPI_GetPacketSize>
 8005c00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6c      	ldr	r2, [pc, #432]	; (8005db8 <HAL_SPI_Init+0x200>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00c      	beq.n	8005c26 <HAL_SPI_Init+0x6e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a6a      	ldr	r2, [pc, #424]	; (8005dbc <HAL_SPI_Init+0x204>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <HAL_SPI_Init+0x6e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a69      	ldr	r2, [pc, #420]	; (8005dc0 <HAL_SPI_Init+0x208>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Init+0x6e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d811      	bhi.n	8005c4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c2a:	4a63      	ldr	r2, [pc, #396]	; (8005db8 <HAL_SPI_Init+0x200>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a61      	ldr	r2, [pc, #388]	; (8005dbc <HAL_SPI_Init+0x204>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_SPI_Init+0x8c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a60      	ldr	r2, [pc, #384]	; (8005dc0 <HAL_SPI_Init+0x208>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d104      	bne.n	8005c4e <HAL_SPI_Init+0x96>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d901      	bls.n	8005c4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0af      	b.n	8005dae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe f818 	bl	8003c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005c8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c94:	d119      	bne.n	8005cca <HAL_SPI_Init+0x112>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9e:	d103      	bne.n	8005ca8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10c      	bne.n	8005cca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb8:	d107      	bne.n	8005cca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cdc:	ea42 0103 	orr.w	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	ea42 0103 	orr.w	r1, r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d113      	bne.n	8005d6a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40013000 	.word	0x40013000
 8005dbc:	40003800 	.word	0x40003800
 8005dc0:	40003c00 	.word	0x40003c00

08005dc4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3320      	adds	r3, #32
 8005dda:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_SPI_Transmit+0x2a>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e1d7      	b.n	800619e <HAL_SPI_Transmit+0x3da>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df6:	f7fe fcc5 	bl	8004784 <HAL_GetTick>
 8005dfa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e14:	7efb      	ldrb	r3, [r7, #27]
 8005e16:	e1c2      	b.n	800619e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Transmit+0x60>
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d107      	bne.n	8005e34 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e30:	7efb      	ldrb	r3, [r7, #27]
 8005e32:	e1b4      	b.n	800619e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2203      	movs	r2, #3
 8005e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	88fa      	ldrh	r2, [r7, #6]
 8005e56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005e84:	d107      	bne.n	8005e96 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b96      	ldr	r3, [pc, #600]	; (80060f8 <HAL_SPI_Transmit+0x334>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	88f9      	ldrh	r1, [r7, #6]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec2:	d107      	bne.n	8005ed4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b0f      	cmp	r3, #15
 8005eda:	d947      	bls.n	8005f6c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005edc:	e03f      	b.n	8005f5e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d114      	bne.n	8005f16 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	1d1a      	adds	r2, r3, #4
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f14:	e023      	b.n	8005f5e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f16:	f7fe fc35 	bl	8004784 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d803      	bhi.n	8005f2e <HAL_SPI_Transmit+0x16a>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d102      	bne.n	8005f34 <HAL_SPI_Transmit+0x170>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d114      	bne.n	8005f5e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fcfb 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e11f      	b.n	800619e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1b9      	bne.n	8005ede <HAL_SPI_Transmit+0x11a>
 8005f6a:	e0f2      	b.n	8006152 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b07      	cmp	r3, #7
 8005f72:	f240 80e7 	bls.w	8006144 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f76:	e05d      	b.n	8006034 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d132      	bne.n	8005fec <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d918      	bls.n	8005fc4 <HAL_SPI_Transmit+0x200>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d014      	beq.n	8005fc4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	1d1a      	adds	r2, r3, #4
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b02      	subs	r3, #2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fc2:	e037      	b.n	8006034 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	881a      	ldrh	r2, [r3, #0]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fea:	e023      	b.n	8006034 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fec:	f7fe fbca 	bl	8004784 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d803      	bhi.n	8006004 <HAL_SPI_Transmit+0x240>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d102      	bne.n	800600a <HAL_SPI_Transmit+0x246>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d114      	bne.n	8006034 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fc90 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e0b4      	b.n	800619e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d19b      	bne.n	8005f78 <HAL_SPI_Transmit+0x1b4>
 8006040:	e087      	b.n	8006152 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d155      	bne.n	80060fc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b03      	cmp	r3, #3
 800605a:	d918      	bls.n	800608e <HAL_SPI_Transmit+0x2ca>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d914      	bls.n	800608e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	1d1a      	adds	r2, r3, #4
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b04      	subs	r3, #4
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800608c:	e05a      	b.n	8006144 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d917      	bls.n	80060ca <HAL_SPI_Transmit+0x306>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	881a      	ldrh	r2, [r3, #0]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b02      	subs	r3, #2
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060c8:	e03c      	b.n	8006144 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3320      	adds	r3, #32
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060f4:	e026      	b.n	8006144 <HAL_SPI_Transmit+0x380>
 80060f6:	bf00      	nop
 80060f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fc:	f7fe fb42 	bl	8004784 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d803      	bhi.n	8006114 <HAL_SPI_Transmit+0x350>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d102      	bne.n	800611a <HAL_SPI_Transmit+0x356>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d114      	bne.n	8006144 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fc08 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e02c      	b.n	800619e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f af78 	bne.w	8006042 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2200      	movs	r2, #0
 800615a:	2108      	movs	r1, #8
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fc87 	bl	8006a70 <SPI_WaitOnFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fbd9 	bl	8006930 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800619c:	7efb      	ldrb	r3, [r7, #27]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3330      	adds	r3, #48	; 0x30
 80061c2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061cc:	d112      	bne.n	80061f4 <HAL_SPI_Receive+0x4c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10e      	bne.n	80061f4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2204      	movs	r2, #4
 80061da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f978 	bl	80064e0 <HAL_SPI_TransmitReceive>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e16f      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_SPI_Receive+0x5a>
 80061fe:	2302      	movs	r3, #2
 8006200:	e168      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800620a:	f7fe fabb 	bl	8004784 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d007      	beq.n	800622c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800621c:	2302      	movs	r3, #2
 800621e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006228:	7ffb      	ldrb	r3, [r7, #31]
 800622a:	e153      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Receive+0x90>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	e145      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2204      	movs	r2, #4
 800624c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006298:	d107      	bne.n	80062aa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	4b8a      	ldr	r3, [pc, #552]	; (80064dc <HAL_SPI_Receive+0x334>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	88f9      	ldrh	r1, [r7, #6]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	430b      	orrs	r3, r1
 80062bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d6:	d107      	bne.n	80062e8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d948      	bls.n	8006382 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80062f0:	e040      	b.n	8006374 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	f248 0308 	movw	r3, #32776	; 0x8008
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800630c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	1d1a      	adds	r2, r3, #4
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800632a:	e023      	b.n	8006374 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800632c:	f7fe fa2a 	bl	8004784 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d803      	bhi.n	8006344 <HAL_SPI_Receive+0x19c>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d102      	bne.n	800634a <HAL_SPI_Receive+0x1a2>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d114      	bne.n	8006374 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 faf0 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0af      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1b8      	bne.n	80062f2 <HAL_SPI_Receive+0x14a>
 8006380:	e095      	b.n	80064ae <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b07      	cmp	r3, #7
 8006388:	f240 808b 	bls.w	80064a2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800638c:	e03f      	b.n	800640e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d114      	bne.n	80063c6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	8812      	ldrh	r2, [r2, #0]
 80063a4:	b292      	uxth	r2, r2
 80063a6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80063c4:	e023      	b.n	800640e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c6:	f7fe f9dd 	bl	8004784 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d803      	bhi.n	80063de <HAL_SPI_Receive+0x236>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d102      	bne.n	80063e4 <HAL_SPI_Receive+0x23c>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d114      	bne.n	800640e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 faa3 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e062      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1b9      	bne.n	800638e <HAL_SPI_Receive+0x1e6>
 800641a:	e048      	b.n	80064ae <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d117      	bne.n	800645a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006458:	e023      	b.n	80064a2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645a:	f7fe f993 	bl	8004784 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d803      	bhi.n	8006472 <HAL_SPI_Receive+0x2ca>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d102      	bne.n	8006478 <HAL_SPI_Receive+0x2d0>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d114      	bne.n	80064a2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fa59 	bl	8006930 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e018      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1b6      	bne.n	800641c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fa3e 	bl	8006930 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80064d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	ffff0000 	.word	0xffff0000

080064e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08e      	sub	sp, #56	; 0x38
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3320      	adds	r3, #32
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3330      	adds	r3, #48	; 0x30
 8006502:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x32>
 800650e:	2302      	movs	r3, #2
 8006510:	e209      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800651a:	f7fe f933 	bl	8004784 <HAL_GetTick>
 800651e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006524:	887b      	ldrh	r3, [r7, #2]
 8006526:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800652e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006536:	7efb      	ldrb	r3, [r7, #27]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d014      	beq.n	8006566 <HAL_SPI_TransmitReceive+0x86>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006542:	d106      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800654c:	7efb      	ldrb	r3, [r7, #27]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d009      	beq.n	8006566 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006552:	2302      	movs	r3, #2
 8006554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006564:	e1df      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x98>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x98>
 8006572:	887b      	ldrh	r3, [r7, #2]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800658a:	e1cc      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b04      	cmp	r3, #4
 8006596:	d003      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2205      	movs	r2, #5
 800659c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	887a      	ldrh	r2, [r7, #2]
 80065b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	887a      	ldrh	r2, [r7, #2]
 80065ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	887a      	ldrh	r2, [r7, #2]
 80065c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	887a      	ldrh	r2, [r7, #2]
 80065d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	4b82      	ldr	r3, [pc, #520]	; (80067f0 <HAL_SPI_TransmitReceive+0x310>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	8879      	ldrh	r1, [r7, #2]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660c:	d107      	bne.n	800661e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d970      	bls.n	8006708 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006626:	e068      	b.n	80066fa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b02      	cmp	r3, #2
 8006634:	d11a      	bne.n	800666c <HAL_SPI_TransmitReceive+0x18c>
 8006636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800666a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	f248 0308 	movw	r3, #32776	; 0x8008
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01a      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x1d2>
 800667c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800668c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b2:	f7fe f867 	bl	8004784 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066be:	429a      	cmp	r2, r3
 80066c0:	d803      	bhi.n	80066ca <HAL_SPI_TransmitReceive+0x1ea>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d102      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0x1f0>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d114      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f92d 	bl	8006930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e115      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80066fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d193      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x148>
 8006700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d190      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x148>
 8006706:	e0e7      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b07      	cmp	r3, #7
 800670e:	f240 80dd 	bls.w	80068cc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006712:	e066      	b.n	80067e2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d119      	bne.n	8006756 <HAL_SPI_TransmitReceive+0x276>
 8006722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006724:	2b00      	cmp	r3, #0
 8006726:	d016      	beq.n	8006756 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006754:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d11a      	bne.n	800679a <HAL_SPI_TransmitReceive+0x2ba>
 8006764:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d017      	beq.n	800679a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	8812      	ldrh	r2, [r2, #0]
 8006772:	b292      	uxth	r2, r2
 8006774:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677a:	1c9a      	adds	r2, r3, #2
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006798:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800679a:	f7fd fff3 	bl	8004784 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d803      	bhi.n	80067b2 <HAL_SPI_TransmitReceive+0x2d2>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d102      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x2d8>
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d114      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f8b9 	bl	8006930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e0a1      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d195      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x234>
 80067e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d192      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x234>
 80067ee:	e073      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x3f8>
 80067f0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d11b      	bne.n	800683a <HAL_SPI_TransmitReceive+0x35a>
 8006802:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006804:	2b00      	cmp	r3, #0
 8006806:	d018      	beq.n	800683a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3320      	adds	r3, #32
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006838:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d11d      	bne.n	8006884 <HAL_SPI_TransmitReceive+0x3a4>
 8006848:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01a      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800685a:	7812      	ldrb	r2, [r2, #0]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006882:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006884:	f7fd ff7e 	bl	8004784 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006890:	429a      	cmp	r2, r3
 8006892:	d803      	bhi.n	800689c <HAL_SPI_TransmitReceive+0x3bc>
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x3c2>
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d114      	bne.n	80068cc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f844 	bl	8006930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e02c      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d190      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x314>
 80068d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d18d      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2200      	movs	r2, #0
 80068e0:	2108      	movs	r1, #8
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f8c4 	bl	8006a70 <SPI_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f816 	bl	8006930 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e001      	b.n	8006926 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006926:	4618      	mov	r0, r3
 8006928:	3730      	adds	r7, #48	; 0x30
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop

08006930 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0208 	orr.w	r2, r2, #8
 800694e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0210 	orr.w	r2, r2, #16
 800695e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6919      	ldr	r1, [r3, #16]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b3c      	ldr	r3, [pc, #240]	; (8006a6c <SPI_CloseTransfer+0x13c>)
 800697c:	400b      	ands	r3, r1
 800697e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800698e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b04      	cmp	r3, #4
 800699a:	d014      	beq.n	80069c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0220 	orr.w	r2, r2, #32
 80069c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d014      	beq.n	80069fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00f      	beq.n	80069fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e2:	f043 0204 	orr.w	r2, r3, #4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00f      	beq.n	8006a26 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a24:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00f      	beq.n	8006a50 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a36:	f043 0208 	orr.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a4e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	fffffc90 	.word	0xfffffc90

08006a70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a80:	e010      	b.n	8006aa4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a82:	f7fd fe7f 	bl	8004784 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d803      	bhi.n	8006a9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d102      	bne.n	8006aa0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e00f      	b.n	8006ac4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695a      	ldr	r2, [r3, #20]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d0df      	beq.n	8006a82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3307      	adds	r3, #7
 8006aea:	08db      	lsrs	r3, r3, #3
 8006aec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e03e      	b.n	8006b98 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7fb f8b4 	bl	8001c9c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f000 f830 	bl	8006ba4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	f000 f8b8 	bl	8006cc4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6858      	ldr	r0, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	f000 f8ff 	bl	8006d64 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6892      	ldr	r2, [r2, #8]
 8006b6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6892      	ldr	r2, [r2, #8]
 8006b7a:	f041 0101 	orr.w	r1, r1, #1
 8006b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <HAL_SRAM_Init+0x9c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <HAL_SRAM_Init+0x9c>)
 8006b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	52004000 	.word	0x52004000

08006ba4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f023 0101 	bic.w	r1, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d102      	bne.n	8006bd4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006bce:	2340      	movs	r3, #64	; 0x40
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e001      	b.n	8006bd8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006be4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006bea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006bf0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006bf6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006bfc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006c02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006c08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006c0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006c14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006c3c:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <FMC_NORSRAM_Init+0x11c>)
 8006c3e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c4e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006c56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	ea02 0103 	and.w	r1, r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4319      	orrs	r1, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c80:	d10c      	bne.n	8006c9c <FMC_NORSRAM_Init+0xf8>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d006      	beq.n	8006cb2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	0008fb7f 	.word	0x0008fb7f

08006cc4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	3b02      	subs	r3, #2
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	3201      	adds	r2, #1
 8006d18:	4319      	orrs	r1, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2c:	d113      	bne.n	8006d56 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d36:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	051b      	lsls	r3, r3, #20
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	d11d      	bne.n	8006db6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	6811      	ldr	r1, [r2, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	6852      	ldr	r2, [r2, #4]
 8006d8e:	0112      	lsls	r2, r2, #4
 8006d90:	4311      	orrs	r1, r2
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	0212      	lsls	r2, r2, #8
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	6992      	ldr	r2, [r2, #24]
 8006d9e:	4311      	orrs	r1, r2
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	68d2      	ldr	r2, [r2, #12]
 8006da4:	0412      	lsls	r2, r2, #16
 8006da6:	430a      	orrs	r2, r1
 8006da8:	ea43 0102 	orr.w	r1, r3, r2
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006db4:	e005      	b.n	8006dc2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	cff00000 	.word	0xcff00000

08006dd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	fb03 f203 	mul.w	r2, r3, r3
 8006dea:	4613      	mov	r3, r2
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4413      	add	r3, r2
 8006df0:	43db      	mvns	r3, r3
 8006df2:	ea01 0203 	and.w	r2, r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	fb03 f303 	mul.w	r3, r3, r3
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	431a      	orrs	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	43db      	mvns	r3, r3
 8006e28:	401a      	ands	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	605a      	str	r2, [r3, #4]
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	fb03 f203 	mul.w	r2, r3, r3
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	43db      	mvns	r3, r3
 8006e62:	ea01 0203 	and.w	r2, r1, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	fb03 f303 	mul.w	r3, r3, r3
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68d9      	ldr	r1, [r3, #12]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	fb03 f203 	mul.w	r2, r3, r3
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	ea01 0203 	and.w	r2, r1, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	fb03 f303 	mul.w	r3, r3, r3
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	60da      	str	r2, [r3, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a19      	ldr	r1, [r3, #32]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	fb03 f303 	mul.w	r3, r3, r3
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	fb03 f202 	mul.w	r2, r3, r2
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	43db      	mvns	r3, r3
 8006eee:	ea01 0203 	and.w	r2, r1, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	fb03 f303 	mul.w	r3, r3, r3
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	0a1b      	lsrs	r3, r3, #8
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	0a12      	lsrs	r2, r2, #8
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	0a12      	lsrs	r2, r2, #8
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	0a12      	lsrs	r2, r2, #8
 8006f44:	fb03 f202 	mul.w	r2, r3, r2
 8006f48:	4613      	mov	r3, r2
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	ea01 0203 	and.w	r2, r1, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	0a09      	lsrs	r1, r1, #8
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	0a09      	lsrs	r1, r1, #8
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	0a09      	lsrs	r1, r1, #8
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	431a      	orrs	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	fa93 f3a3 	rbit	r3, r3
 8006f9e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <LL_GPIO_Init+0x26>
  {
    return 32U;
 8006faa:	2320      	movs	r3, #32
 8006fac:	e003      	b.n	8006fb6 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	fab3 f383 	clz	r3, r3
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006fb8:	e048      	b.n	800704c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d03a      	beq.n	8007046 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d003      	beq.n	8006fe0 <LL_GPIO_Init+0x58>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d10e      	bne.n	8006ffe <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ff2b 	bl	8006e44 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6819      	ldr	r1, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff ff0b 	bl	8006e14 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	461a      	mov	r2, r3
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff ff3c 	bl	8006e84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d111      	bne.n	8007038 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2bff      	cmp	r3, #255	; 0xff
 8007018:	d807      	bhi.n	800702a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	461a      	mov	r2, r3
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ff4e 	bl	8006ec4 <LL_GPIO_SetAFPin_0_7>
 8007028:	e006      	b.n	8007038 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	461a      	mov	r2, r3
 8007030:	69b9      	ldr	r1, [r7, #24]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff ff72 	bl	8006f1c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	461a      	mov	r2, r3
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fec7 	bl	8006dd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3301      	adds	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	fa22 f303 	lsr.w	r3, r2, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1af      	bne.n	8006fba <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <LL_SPI_IsEnabled>:
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <LL_SPI_IsEnabled+0x18>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <LL_SPI_IsEnabled+0x1a>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_SPI_SetInternalSSLevel>:
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <LL_SPI_GetNSSPolarity>:
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ffb4 	bl	8007064 <LL_SPI_IsEnabled>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d167      	bne.n	80071d2 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	4b35      	ldr	r3, [pc, #212]	; (80071dc <LL_SPI_Init+0xf4>)
 8007108:	4013      	ands	r3, r2
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	6991      	ldr	r1, [r2, #24]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	6a12      	ldr	r2, [r2, #32]
 8007112:	4311      	orrs	r1, r2
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	6892      	ldr	r2, [r2, #8]
 8007118:	430a      	orrs	r2, r1
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ffbf 	bl	80070b0 <LL_SPI_GetNSSPolarity>
 8007132:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800713a:	d112      	bne.n	8007162 <LL_SPI_Init+0x7a>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <LL_SPI_Init+0x62>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007148:	d006      	beq.n	8007158 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007150:	d107      	bne.n	8007162 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8007158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff94 	bl	800708a <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <LL_SPI_Init+0xf8>)
 8007168:	4013      	ands	r3, r2
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	6951      	ldr	r1, [r2, #20]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	68d2      	ldr	r2, [r2, #12]
 8007172:	4311      	orrs	r1, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	6912      	ldr	r2, [r2, #16]
 8007178:	4311      	orrs	r1, r2
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	69d2      	ldr	r2, [r2, #28]
 800717e:	4311      	orrs	r1, r2
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	6852      	ldr	r2, [r2, #4]
 8007184:	4311      	orrs	r1, r2
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	f402 22c0 	and.w	r2, r2, #393216	; 0x60000
 800718e:	430a      	orrs	r2, r1
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b4:	d105      	bne.n	80071c2 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff85 	bl	80070cc <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	f023 0201 	bic.w	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	651a      	str	r2, [r3, #80]	; 0x50

    status = SUCCESS;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	8fbfffe0 	.word	0x8fbfffe0
 80071e0:	d839ffff 	.word	0xd839ffff

080071e4 <LL_TIM_SetPrescaler>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_TIM_SetAutoReload>:
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <LL_TIM_SetRepetitionCounter>:
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <LL_TIM_OC_SetCompareCH1>:
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_TIM_OC_SetCompareCH2>:
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_TIM_OC_SetCompareCH3>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <LL_TIM_OC_SetCompareCH4>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <LL_TIM_OC_SetCompareCH5>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <LL_TIM_OC_SetCompareCH6>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	f043 0201 	orr.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	615a      	str	r2, [r3, #20]
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3d      	ldr	r2, [pc, #244]	; (800740c <LL_TIM_Init+0x108>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d013      	beq.n	8007344 <LL_TIM_Init+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007322:	d00f      	beq.n	8007344 <LL_TIM_Init+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a3a      	ldr	r2, [pc, #232]	; (8007410 <LL_TIM_Init+0x10c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <LL_TIM_Init+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a39      	ldr	r2, [pc, #228]	; (8007414 <LL_TIM_Init+0x110>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <LL_TIM_Init+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a38      	ldr	r2, [pc, #224]	; (8007418 <LL_TIM_Init+0x114>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <LL_TIM_Init+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a37      	ldr	r2, [pc, #220]	; (800741c <LL_TIM_Init+0x118>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d106      	bne.n	8007352 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2d      	ldr	r2, [pc, #180]	; (800740c <LL_TIM_Init+0x108>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01f      	beq.n	800739a <LL_TIM_Init+0x96>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007360:	d01b      	beq.n	800739a <LL_TIM_Init+0x96>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <LL_TIM_Init+0x10c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d017      	beq.n	800739a <LL_TIM_Init+0x96>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a29      	ldr	r2, [pc, #164]	; (8007414 <LL_TIM_Init+0x110>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <LL_TIM_Init+0x96>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a28      	ldr	r2, [pc, #160]	; (8007418 <LL_TIM_Init+0x114>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00f      	beq.n	800739a <LL_TIM_Init+0x96>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a27      	ldr	r2, [pc, #156]	; (800741c <LL_TIM_Init+0x118>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00b      	beq.n	800739a <LL_TIM_Init+0x96>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a26      	ldr	r2, [pc, #152]	; (8007420 <LL_TIM_Init+0x11c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d007      	beq.n	800739a <LL_TIM_Init+0x96>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a25      	ldr	r2, [pc, #148]	; (8007424 <LL_TIM_Init+0x120>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d003      	beq.n	800739a <LL_TIM_Init+0x96>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <LL_TIM_Init+0x124>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d106      	bne.n	80073a8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff23 	bl	8007200 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ff0f 	bl	80071e4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a10      	ldr	r2, [pc, #64]	; (800740c <LL_TIM_Init+0x108>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00f      	beq.n	80073ee <LL_TIM_Init+0xea>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a12      	ldr	r2, [pc, #72]	; (800741c <LL_TIM_Init+0x118>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00b      	beq.n	80073ee <LL_TIM_Init+0xea>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a11      	ldr	r2, [pc, #68]	; (8007420 <LL_TIM_Init+0x11c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d007      	beq.n	80073ee <LL_TIM_Init+0xea>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a10      	ldr	r2, [pc, #64]	; (8007424 <LL_TIM_Init+0x120>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <LL_TIM_Init+0xea>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a0f      	ldr	r2, [pc, #60]	; (8007428 <LL_TIM_Init+0x124>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d105      	bne.n	80073fa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ff11 	bl	800721c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ff72 	bl	80072e4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800

0800742c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007442:	d045      	beq.n	80074d0 <LL_TIM_OC_Init+0xa4>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744a:	d848      	bhi.n	80074de <LL_TIM_OC_Init+0xb2>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007452:	d036      	beq.n	80074c2 <LL_TIM_OC_Init+0x96>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745a:	d840      	bhi.n	80074de <LL_TIM_OC_Init+0xb2>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007462:	d027      	beq.n	80074b4 <LL_TIM_OC_Init+0x88>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d838      	bhi.n	80074de <LL_TIM_OC_Init+0xb2>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007472:	d018      	beq.n	80074a6 <LL_TIM_OC_Init+0x7a>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d830      	bhi.n	80074de <LL_TIM_OC_Init+0xb2>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d003      	beq.n	800748a <LL_TIM_OC_Init+0x5e>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b10      	cmp	r3, #16
 8007486:	d007      	beq.n	8007498 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007488:	e029      	b.n	80074de <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f82d 	bl	80074ec <OC1Config>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]
      break;
 8007496:	e023      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f8a6 	bl	80075ec <OC2Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
      break;
 80074a4:	e01c      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f923 	bl	80076f4 <OC3Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]
      break;
 80074b2:	e015      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f9a0 	bl	80077fc <OC4Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]
      break;
 80074c0:	e00e      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fa05 	bl	80078d4 <OC5Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
      break;
 80074ce:	e007      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 fa62 	bl	800799c <OC6Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	75fb      	strb	r3, [r7, #23]
      break;
 80074dc:	e000      	b.n	80074e0 <LL_TIM_OC_Init+0xb4>
      break;
 80074de:	bf00      	nop
  }

  return result;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0201 	bic.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4b2d      	ldr	r3, [pc, #180]	; (80075d4 <OC1Config+0xe8>)
 8007520:	4013      	ands	r3, r2
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0202 	bic.w	r2, r3, #2
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 0201 	bic.w	r2, r3, #1
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a23      	ldr	r2, [pc, #140]	; (80075d8 <OC1Config+0xec>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <OC1Config+0x82>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a22      	ldr	r2, [pc, #136]	; (80075dc <OC1Config+0xf0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <OC1Config+0x82>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a21      	ldr	r2, [pc, #132]	; (80075e0 <OC1Config+0xf4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <OC1Config+0x82>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a20      	ldr	r2, [pc, #128]	; (80075e4 <OC1Config+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <OC1Config+0x82>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <OC1Config+0xfc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d11e      	bne.n	80075ac <OC1Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 0208 	bic.w	r2, r3, #8
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0204 	bic.w	r2, r3, #4
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fe3a 	bl	8007238 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	fffeff8f 	.word	0xfffeff8f
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40010400 	.word	0x40010400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800

080075ec <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f023 0210 	bic.w	r2, r3, #16
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4b2f      	ldr	r3, [pc, #188]	; (80076dc <OC2Config+0xf0>)
 8007620:	4013      	ands	r3, r2
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	0212      	lsls	r2, r2, #8
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0220 	bic.w	r2, r3, #32
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f023 0210 	bic.w	r2, r3, #16
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <OC2Config+0xf4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00f      	beq.n	8007674 <OC2Config+0x88>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <OC2Config+0xf8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00b      	beq.n	8007674 <OC2Config+0x88>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <OC2Config+0xfc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d007      	beq.n	8007674 <OC2Config+0x88>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a21      	ldr	r2, [pc, #132]	; (80076ec <OC2Config+0x100>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <OC2Config+0x88>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <OC2Config+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d11f      	bne.n	80076b4 <OC2Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	019b      	lsls	r3, r3, #6
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	019b      	lsls	r3, r3, #6
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fdc4 	bl	8007254 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	feff8fff 	.word	0xfeff8fff
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40014400 	.word	0x40014400
 80076f0:	40014800 	.word	0x40014800

080076f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <OC3Config+0xf0>)
 8007728:	4013      	ands	r3, r2
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a24      	ldr	r2, [pc, #144]	; (80077e8 <OC3Config+0xf4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <OC3Config+0x86>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a23      	ldr	r2, [pc, #140]	; (80077ec <OC3Config+0xf8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <OC3Config+0x86>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <OC3Config+0xfc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <OC3Config+0x86>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <OC3Config+0x100>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <OC3Config+0x86>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <OC3Config+0x104>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d11f      	bne.n	80077ba <OC3Config+0xc6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	015b      	lsls	r3, r3, #5
 80077b6:	4313      	orrs	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff fd4f 	bl	8007270 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	fffeff8f 	.word	0xfffeff8f
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40010400 	.word	0x40010400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40014400 	.word	0x40014400
 80077f8:	40014800 	.word	0x40014800

080077fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <OC4Config+0xc0>)
 8007830:	4013      	ands	r3, r2
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	0212      	lsls	r2, r2, #8
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	031b      	lsls	r3, r3, #12
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	031b      	lsls	r3, r3, #12
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <OC4Config+0xc4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00f      	beq.n	8007884 <OC4Config+0x88>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a17      	ldr	r2, [pc, #92]	; (80078c4 <OC4Config+0xc8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00b      	beq.n	8007884 <OC4Config+0x88>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a16      	ldr	r2, [pc, #88]	; (80078c8 <OC4Config+0xcc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d007      	beq.n	8007884 <OC4Config+0x88>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a15      	ldr	r2, [pc, #84]	; (80078cc <OC4Config+0xd0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <OC4Config+0x88>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <OC4Config+0xd4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d107      	bne.n	8007894 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	019b      	lsls	r3, r3, #6
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fcf0 	bl	800728c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	feff8fff 	.word	0xfeff8fff
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40014400 	.word	0x40014400
 80078d0:	40014800 	.word	0x40014800

080078d4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4b22      	ldr	r3, [pc, #136]	; (8007984 <OC5Config+0xb0>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <OC5Config+0xb4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <OC5Config+0x78>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <OC5Config+0xb8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <OC5Config+0x78>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a16      	ldr	r2, [pc, #88]	; (8007990 <OC5Config+0xbc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <OC5Config+0x78>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a15      	ldr	r2, [pc, #84]	; (8007994 <OC5Config+0xc0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <OC5Config+0x78>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a14      	ldr	r2, [pc, #80]	; (8007998 <OC5Config+0xc4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d109      	bne.n	8007960 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff fc9b 	bl	80072a8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	fffeff8f 	.word	0xfffeff8f
 8007988:	40010000 	.word	0x40010000
 800798c:	40010400 	.word	0x40010400
 8007990:	40014000 	.word	0x40014000
 8007994:	40014400 	.word	0x40014400
 8007998:	40014800 	.word	0x40014800

0800799c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079bc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <OC6Config+0xb0>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	0212      	lsls	r2, r2, #8
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	051b      	lsls	r3, r3, #20
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	051b      	lsls	r3, r3, #20
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <OC6Config+0xb4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00f      	beq.n	8007a16 <OC6Config+0x7a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <OC6Config+0xb8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00b      	beq.n	8007a16 <OC6Config+0x7a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <OC6Config+0xbc>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <OC6Config+0x7a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a14      	ldr	r2, [pc, #80]	; (8007a5c <OC6Config+0xc0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <OC6Config+0x7a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <OC6Config+0xc4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d109      	bne.n	8007a2a <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fc46 	bl	80072c8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	feff8fff 	.word	0xfeff8fff
 8007a50:	40010000 	.word	0x40010000
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800

08007a64 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 8007a6c:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <LL_SetSystemCoreClock+0x1c>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	24000000 	.word	0x24000000

08007a84 <__libc_init_array>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4d0d      	ldr	r5, [pc, #52]	; (8007abc <__libc_init_array+0x38>)
 8007a88:	4c0d      	ldr	r4, [pc, #52]	; (8007ac0 <__libc_init_array+0x3c>)
 8007a8a:	1b64      	subs	r4, r4, r5
 8007a8c:	10a4      	asrs	r4, r4, #2
 8007a8e:	2600      	movs	r6, #0
 8007a90:	42a6      	cmp	r6, r4
 8007a92:	d109      	bne.n	8007aa8 <__libc_init_array+0x24>
 8007a94:	4d0b      	ldr	r5, [pc, #44]	; (8007ac4 <__libc_init_array+0x40>)
 8007a96:	4c0c      	ldr	r4, [pc, #48]	; (8007ac8 <__libc_init_array+0x44>)
 8007a98:	f000 f820 	bl	8007adc <_init>
 8007a9c:	1b64      	subs	r4, r4, r5
 8007a9e:	10a4      	asrs	r4, r4, #2
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	42a6      	cmp	r6, r4
 8007aa4:	d105      	bne.n	8007ab2 <__libc_init_array+0x2e>
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aac:	4798      	blx	r3
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7ee      	b.n	8007a90 <__libc_init_array+0xc>
 8007ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab6:	4798      	blx	r3
 8007ab8:	3601      	adds	r6, #1
 8007aba:	e7f2      	b.n	8007aa2 <__libc_init_array+0x1e>
 8007abc:	0800a9f4 	.word	0x0800a9f4
 8007ac0:	0800a9f4 	.word	0x0800a9f4
 8007ac4:	0800a9f4 	.word	0x0800a9f4
 8007ac8:	0800a9f8 	.word	0x0800a9f8

08007acc <memset>:
 8007acc:	4402      	add	r2, r0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d100      	bne.n	8007ad6 <memset+0xa>
 8007ad4:	4770      	bx	lr
 8007ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ada:	e7f9      	b.n	8007ad0 <memset+0x4>

08007adc <_init>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr

08007ae8 <_fini>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr
